<b>SELLPHON - Mobile Company 1</b>
<b>Time limit:</b> 2s
<b>Memory limit:</b> 1536MB

On day 1, a mobile manufacturing company bought L quantities of raw materials which can produce exactly L mobile phones. The raw materials are then transported to factories.

The company owns M factories located at various locations where these raw materials are converted into mobile phones. All the factories are capable of producing any number of mobile phones provided the availability of raw materials.

The manufactured mobile phones can be transported to N shops at various locations where these mobile phones are sold. Each shop has a selling capability. ith shop can sell at most S[i] mobile phones in a day. You are given a 2D map of order MxN. If map[i][j] is 'Y', ith factory can transport its mobile phones to jth shop.

Find the maximum number of mobile phones that can be sold by the company on day 1. For simplicity you can assume that the time taken for transportation of raw materials and mobiles as 0.

<b>Input</b>
The first line consists of an integer t, the number of test cases. For each test case, the first line consists of 3 integers L, M and N. The next line consists of N integers representing the array S. The next M lines represent the map.

<b>Output</b>
For each test case, find the maximum number of mobile phones that can be sold by the company on day 1.

<b>Constraints</b>

1 <= t <= 100

1 <= L <= 1000

1 <= M <= 200

1 <= N <= 200

0 <= S[i] <= 1000

map[i][j] âˆˆ {'Y', 'N'}




The naive solution would be to attempt to distribute the mobile phones by exploring all possible ways to allocate raw materials to factories and transport the phones to shops. For each factory, we would check every shop it can send mobile phones to (based on \(map[i][j] = Y\)) and try allocating phones from the factory to each shop. For every possible allocation, we would check if the shop's selling capacity is met and how many phones can be sold. This would involve iterating through all factories and shops repeatedly, exploring every possible distribution scenario. The time complexity would grow exponentially as we try to assign phones from multiple factories to multiple shops, making it inefficient for large inputs. This approach would fail to meet the time constraints due to the high number of possibilities.




To solve this problem, I need to find the maximum number of mobile phones that can be sold by the company on day 1. The company has L quantities of raw materials, which can produce exactly L mobile phones. There are M factories and N shops, and each shop has a selling capability. The company can transport mobile phones from factories to shops, but only if the map allows it.

My approach will be to first read the input data, including the number of test cases, the values of L, M, and N, the array S representing the selling capabilities of the shops, and the map representing the transportation possibilities between factories and shops.

Next, I will iterate over each test case and try to maximize the number of mobile phones sold by assigning the shops with the highest selling capabilities to the factories that can transport to them.

Before writing any code, I need to decide on the data structures and algorithms I will use. I will use 2D vectors to represent the map and the array S, and I will iterate over the shops and factories using loops.

Let's start by writing the code to read the input data.

My code should be able to handle multiple test cases. I will use a loop to iterate over each test case.

Please wait for my next step, which will contain the code to read the input data.




#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin >> t;
	while (t--) {
		int L, M, N;
		cin >> L >> M >> N;
		vector<int> S(N);
		for (int i = 0; i < N; i++) {
			cin >> S[i];
		}
		vector<string> map(M);
		for (int i = 0; i < M; i++) {
			cin >> map[i];
		}
	}
	return 0;
}





Now that I have the input data, I need to find a way to maximize the number of mobile phones sold. I will iterate over each shop and assign it to the factory that can transport to it, in order of decreasing selling capability. This way, I can ensure that the shops with the highest selling capabilities are assigned to the factories that can transport to them.

To do this, I will first create a vector of pairs, where each pair contains the selling capability of a shop and the shop's index. I will then sort this vector in descending order.

Next, I will iterate over each factory and assign the shops that can be transported to it, starting from the shop with the highest selling capability.

Let's write the code to implement this approach.

I will use a greedy algorithm to assign the shops to the factories.

Please wait for my next step, which will contain the code to implement this approach.




#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin >> t;
	while (t--) {
		int L, M, N;
		cin >> L >> M >> N;
		vector<int> S(N);
		for (int i = 0; i < N; i++) {
			cin >> S[i];
		}
		vector<string> map(M);
		for (int i = 0; i < M; i++) {
			cin >> map[i];
		}
		vector<pair<int, int>> shops;
		for (int i = 0; i < N; i++) {
			shops.push_back({S[i], i});
		}
		sort(shops.begin(), shops.end(), greater<pair<int, int>>());
		vector<int> sold(M, 0);
		for (auto shop : shops) {
			int index = shop.second;
			for (int i = 0; i < M; i++) {
				if (map[i][index] == 'Y') {
					sold[i] += shop.first;
					break;
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < M; i++) {
			ans += min(L, sold[i]);
			L -= min(L, sold[i]);
		}
		cout << ans << endl;
	}
	return 0;
}




1
10 2 3
5 4 3
YNY
NNY




Let's test the code using the minimum input values. For a single test case where \(L = 1\), \(M = 1\), \(N = 1\), \(S = \) { \(0\) }, and \(map = "Y"\), even though the first factory can transfer its phones to the first shop, the answer would be \(0\) since the first shop cannot sell any phones on day 1.




1
1 1 1
0
Y