\(\textbf{Problem Name: Multiples of the last}\)

<b> Time limit: </b> 1 second
<b> Memory limit: </b> 1536MB

\(\textbf{Problem Statement}\)

A natural number \(N\) \((1 \le N \le 1000)\) and then a sequence of \(N\) natural numbers is entered. Report:

\(\bull\) How many elements of the array are multiples of the last element of the array.

\(\textbf{Input}\)

Natural number + sequence of natural numbers.

\(\textbf{Output}\)

Natural number






The naive (and correct) approach is to iterate over every element and check if it's a multiple of the last element, and if so, add \(1\) to the answer. It is not clear from the statement whether the last element should be counted or not (since it's a multiple of itself), but from the given sample, it should not be counted. So let's implement the solution, first we take the input.





#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    return 0;
}




Now we compute the answer according to the statement. We know that \(x\) is a multiple of \(y\) if and only if \(x \equiv 0 \text{ (mod }y)\), so we can just check for that condition.




#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    int ans = 0;
    for (int i = 0; i < n - 1; i++) {
        if (a[i] % a[n - 1] == 0) {
            ans++;
        }
    }
    cout << ans << endl;
    return 0;
}




7
14
3
8
1
2
3
2




Now we add a test to make sure we don't count the last element, the answer should be \(0\) for \(N=1\).





1
4