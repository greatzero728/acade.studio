BLACKOUT - Blackout

Time limit: 0.200s-0.600s
Source limit: 50000B
Memory limit: 1536MB

Caracas, as any other city, never sleeps, however, this is about to change as the Chief Officer Marcos “the little one” is scheduling some blackouts to search an important criminal and bring it to justice (If you like to know the criminal is known as “El Pran Malandroso”), the criminal is known for fainting when he doesn't see any source of light, so this is a perfect plan for Marcos “the little one” to trap him and capture him.

Marcos will give you the map where he is searching the criminal, the zone is given in a matrix and each value represents a block, surrounded by streets, where the number at the \(i\)-th row and \(j\)-th column denotes the number of people living in this block.

As Marcos “the little one” is a good officer, he doesn't wants to bother more than a specific number of people, as when he darken the zone, the people will going to be mad. That's what he called you for, Marcos will give you the north-west corner and the south-east corner, he will search in this specific area, causing a blackout.

Marcos will perform a series of blackouts in the city during the night, he will perform each blackout in a given zone, he will return the city all of its light and then he will perform another blackout, so on until he does \(Q\) blackouts, as the criminal is constantly moving in the city, the blackout will be independent and the area of searching will be always considered different.

Knowing this, can you maximize the area searched without exceeding the limit that Marcos gives you? (Citizens will be going mad when a blackout occurs)

INPUT:
The first line will contain \(4\) integers \(N, M, Q\) and \(K,\) denoting, respectively the \(N\) and \(M\) matrix size denoting an aerial view of the city, \(Q\) blackouts that Marcos the little one will do and \(K\) people that he wants to bother as much.

Then, \(N\) lines follow, each containing \(M\) integers, representing the people living in the block.

After that, \(Q\) lines will follow, each one containing four integers denoting the \((i,j)\) point of the north-west corner and the \((i,j)\) point of the south-east corner.

OUTPUT:
The first and only line of output should contain a number, representing the maximum area that Marcos can look for the criminal.

Is important to note that each blackout is independent from the other, so, blackout affecting the zone (1,1) to (3,3) will lead to 45 people angry and 9 units of area, while a blackout from the zone (1,1) to (2,2) will get 12 people angry and 4 units of area. If the limit were 57, you could perform the two blackouts, giving a total result of 13.

CONSTRAINTS:
\(1 <= N,M <= 2000\)

\(1 <= Q <= 1000\)

\(1 <= K <= 1000\)

\(0 <= (N_i,M_j) <= 1000\)

It is safe to say that there will be always an answer to this problem. (You will always find at least one blackout that doesn't bother more than \(K\) citizens)




The problem simplifies to this: Each possible blackout has two values - the area of the blackout and the number of people it will affect. The problem asks for the maximum sum of areas that will be blacked out, without the total number of affected people exceeding \(k\).

We can solve this problem by considering every subset of the possible blackouts, and for every blackout, we can iterate over the cells it contains, but this approach is too slow.

Instead, we can use 2D prefix sum to get the number of affected people for each blackout and then we can solve the problem with knapsack dp.

Before moving onto the rest of the solution, let's start with taking the input.




#include <bits/stdc++.h>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int n, m, q, k;
	cin >> n >> m >> q >> k;

	vector<vector<int>> grid(n, vector<int>(m));

	for(int i=0; i<n; ++i){
		for(int j=0; j<m; ++j){
			cin >> grid[i][j];
		}
	}
    
	return 0;	
}





Now let's calculate the 2D prefix sum. I will not explain how it's calculated because it's a very standard method.




#include <bits/stdc++.h>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int n, m, q, k;
	cin >> n >> m >> q >> k;

	vector<vector<int>> grid(n, vector<int>(m));

	for(int i=0; i<n; ++i){
		for(int j=0; j<m; ++j){
			cin >> grid[i][j];
		}
	}

	vector<vector<ll>> grid_sum(n+1, vector<ll>(m+1, 0));

	for(int i=1; i<=n; ++i){
		for(int j=1; j<=m; ++j){
			grid_sum[i][j] = grid[i-1][j-1] + grid_sum[i-1][j] + grid_sum[i][j-1] - grid_sum[i-1][j-1];
		}
	}

	return 0;	
}




Now, let's calculate the area and the number of people it will affect for every possible blackout and store these values.





#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long

vector<pair<int, ll>> values;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int n, m, q, k;
	cin >> n >> m >> q >> k;

	vector<vector<int>> grid(n, vector<int>(m));

	for(int i=0; i<n; ++i){
		for(int j=0; j<m; ++j){
			cin >> grid[i][j];
		}
	}

	vector<vector<ll>> grid_sum(n+1, vector<ll>(m+1, 0));

	for(int i=1; i<=n; ++i){
		for(int j=1; j<=m; ++j){
			grid_sum[i][j] = grid[i-1][j-1] + grid_sum[i-1][j] + grid_sum[i][j-1] - grid_sum[i-1][j-1];
		}
	}

	for(int i=0; i<q; ++i){
		int i1, j1, i2, j2;
		cin >> i1 >> j1 >> i2 >> j2;
		int area = (i2-i1+1) * (j2-j1+1);
		ll sum = grid_sum[i2][j2] - grid_sum[i2][j1-1] - grid_sum[i1-1][j2] + grid_sum[i1-1][j1-1];
		values.pb({area, sum});
	}

	return 0;	
}




Now, we can do the knapsack dp.

\(dp[ind][k] =\) the maximum total area we can get from the blackouts in the range \([1, ind]\) such that their sum of affected people is less than or equal to k.

At each possible blackout, we will consider not doing it, and if we can do it, we will consider doing it.




#include <bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define pb push_back
#define ll long long

vector<pair<int, ll>> values;

const int N = 1e3+5;

int dp[N][N];

int f(int ind, int k){
	if(ind == 0) return 0;
	if(dp[ind][k] != -1) return dp[ind][k];
	dp[ind][k] = f(ind-1, k);
	if(k>=values[ind-1].se) dp[ind][k] = max(dp[ind][k], f(ind-1, k-values[ind-1].se) + values[ind-1].fi);
	return dp[ind][k];
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	memset(dp, -1, sizeof(dp));

	int n, m, q, k;
	cin >> n >> m >> q >> k;

	vector<vector<int>> grid(n, vector<int>(m));

	for(int i=0; i<n; ++i){
		for(int j=0; j<m; ++j){
			cin >> grid[i][j];
		}
	}

	vector<vector<ll>> grid_sum(n+1, vector<ll>(m+1, 0));

	for(int i=1; i<=n; ++i){
		for(int j=1; j<=m; ++j){
			grid_sum[i][j] = grid[i-1][j-1] + grid_sum[i-1][j] + grid_sum[i][j-1] - grid_sum[i-1][j-1];
		}
	}

	for(int i=0; i<q; ++i){
		int i1, j1, i2, j2;
		cin >> i1 >> j1 >> i2 >> j2;
		int area = (i2-i1+1) * (j2-j1+1);
		ll sum = grid_sum[i2][j2] - grid_sum[i2][j1-1] - grid_sum[i1-1][j2] + grid_sum[i1-1][j1-1];
		values.pb({area, sum});
	}

	cout << f(q, k);

	return 0;	
}




3 3 2 20

1 2 3

4 5 6

7 8 9

1 1 3 3

1 1 2 2




4 3 3 76

1 4 9

5 5 2

2 1 9

9 1 9

2 1 4 3

1 1 4 3

2 1 3 2




Now, I will add the following case because I want to see if the code works when 
n
n and 
m
m are minimum.

1 1 1 1
1
1 1 1 1

I expect the output to be '1' because there is only one possible blackout, the size of the area it covers is 
1
1, and we can use it.




1 1 1 1 
1
1 1 1 1