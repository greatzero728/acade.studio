MKWAVES - Making Waves
Time limit:	1s
Source limit:	50000B
Memory limit:	1536MB

Suppose we know a signal is generated by the function \(x\):  \(\sin (f1 \cdot t) + \sin (f2 \cdot t)\). Here, \(f1\) and \(f2\) are two unique frequencies, each having an integral value in the range 400 to 600 Hz (Hz = cycles per second), and \(t\) represents time. In this problem, you will be given N samples of this function at equally-spaced time intervals corresponding to \(t = \frac{1}{N}, t = \frac{2}{N}\), and so forth. From these samples, you are to determine \(f1\) and \(f2\).

For example, suppose \(f1 = 400 Hz, f2 = 500 Hz\), and N = 100. The first sample, at time \(t = \frac{1}{100}\) sec, is equal to \(\sin(400 \cdot 0.01) + \sin(500 \cdot 0.01) = \sin(4) \cdot \sin(5) = 0.156912 \). Similarly, the second sample, at time \(t = \frac{2}{100}\) sec, is equal to \(sin(400 \cdot 0.02) + sin(500 \cdot 0.02) = sin(8) + sin(10) = 0.312821\).

Input
There will be multiple cases to consider. Each case begins with an integer N, no larger than 1000, that specifies the number of signal samples. The next N data items are real numbers representing the signal samples at time \(\frac{1}{N}\) sec, \(\frac{2}{N}\) sec, and so forth. A single integer 0 follows the last case.

The number of samples for each case is guaranteed to be sufficient to allow the correct result to be obtained.

Output
For each input case, display a single line that is formatted like this:

Case 1, f1 = 400, f2 = 500




Let's reformulate the given problem.

\(N\)
\(\sin \left(f1 \cdot \frac{1}{N}\right) + \sin \left(f2 \cdot \frac{1}{N}\right)\)
\(\sin \left(f1 \cdot \frac{2}{N}\right) + \sin \left(f2 \cdot \frac{2}{N}\right)\)
...
\(\sin \left(f1 \cdot \frac{N}{N}\right) + \sin \left(f2 \cdot \frac{N}{N}\right)\)

The above information is provided. Here, \(f1\) and \(f2\) are two integers such that \(400 \leq f1, f2 \leq 600\).


\(\bull\) naive algorithm
Our task is to determine the values of \(f1\) and \(f2\) from the given data.
We can try to find a match for the given values by computing \(\sin \left(f1 \cdot \frac{i}{N}\right) + \sin \left(f2 \cdot \frac{i}{N}\right)\) for all possible combinations of \(f1\) and \(f2\) in the range \(400 \leq f1, f2 \leq 600\), and then comparing these values with the given data to find the closest match.
We can use a brute force approach to check all possible combinations of \(f1\) and \(f2\).

As the time complexity of this naive algorithm is just \(O(\delta^2 \cdot N)\) (here \(\delta = 600 - 400 + 1, N \leq 1000\)) so we can solve this problem with this naive algorithm.




#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1010;

double val[MAXN];
int N;

int main() {
    while(scanf("%d", &N), N) {
        for(int i = 1; i <= N; i++) scanf("%lf", val + i);
    }
}




Let's iterate through all possible values of \(f1\) and \(f2\) to identify the valid pairs. Here, \(f1\) and \(f2\) are integers such that \(400 \leq f1, f2 \leq 600\), so we will start by iterating over \(f1\) and \(f2\).




#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1010;

double val[MAXN];
int N;

void solve() {
    for(int f1 = 400; f1 <= 600; f1++) {
        for(int f2 = 400; f2 <= 600; f2++) {
            //We have to check if f1, f2 is valid.
        }
    }
}

int main() {
    while(scanf("%d", &N), N) {
        for(int i = 1; i <= N; i++) scanf("%lf", val + i);
        solve();
    }
}




We should generate the possible values of \(\sin \left(f1 \cdot \frac{i}{N}\right) + \sin \left(f2 \cdot \frac{i}{N}\right)\) for all possible combinations of \(f1\) and \(f2\), and then compare these values with the given data to find the closest match. However, we should avoid comparing floating-point numbers directly due to precision issues. Instead, we can compare the absolute difference between the generated values and the given data. If the absolute difference is less than a certain threshold, we can consider it a match. We can use a variable to store the minimum difference found so far and update it whenever we find a smaller difference.




#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1010;
const double pi = acos(-1), eps = 1e-5;

double val[MAXN];
int N;

void solve() {
    for(int f1 = 400; f1 <= 600; f1++) {
        for(int f2 = 400; f2 <= 600; f2++) {
            bool is_valid = true;
            for(int i = 1; i <= N; i++) {
                if(fabs(sin(pi / 180 * f1 * i / N) + sin(pi / 180 * f2 * i / N) - val[i]) < eps) continue;
                is_valid = false; break;
            }
            //If is_valid is true, it is a valid case.
        }
    }
}

int main() {
    while(scanf("%d", &N), N) {
        for(int i = 1; i <= N; i++) scanf("%lf", val + i);
        solve();
    }
}




If we find a valid \(f1\) and \(f2\), we can print the answer and immediately stop our iteration, as we will have already determined the values of \(f1\) and \(f2\).




#include <bits/stdc++.h>

using namespace std;

const int MAXN = 1010;
const double pi = acos(-1), eps = 1e-5;

double val[MAXN];
int N, cases;

void solve() {
    for(int f1 = 400; f1 <= 600; f1++) {
        for(int f2 = 400; f2 <= 600; f2++) {
            bool is_valid = true;
            for(int i = 1; i <= N; i++) {
                if(fabs(sin(pi / 180 * f1 * i / N) + sin(pi / 180 * f2 * i / N) - val[i]) < eps) continue;
                is_valid = false; break;
            }
            if(is_valid) {
                cout<<"Case "<<++cases<<", f1 = "<<f1<<", f2 = "<<f2<<endl;
                return;
            }
        }
    }
}

int main() {
    while(scanf("%d", &N), N) {
        for(int i = 1; i <= N; i++) scanf("%lf", val + i);
        solve();
    }
}




100
0.156912 0.312821 0.466731 0.617657 0.764638 0.906737 1.04305 1.17271
1.29489 1.40883 1.51381 1.60917 1.69432 1.76873 1.83195 1.8836 1.92338
1.95106 1.96649 1.96962 1.96045 1.93908 1.9057 1.86055 1.80396 1.73634
1.65816 1.56997 1.47237 1.36603 1.25166 1.13003 1.00196 0.868307 0.729943
0.587785 0.442764 0.295823 0.147918 1.68756e-010 -0.146981 -0.292088
-0.434403 -0.573031 -0.707107 -0.835801 -0.958325 -1.07394 -1.18195
-1.28171 -1.37266 -1.45428 -1.52611 -1.58779 -1.63898 -1.67947 -1.70907
-1.7277 -1.73535 -1.73205 -1.71795 -1.69323 -1.65816 -1.61308 -1.55838
-1.49452 -1.42201 -1.34141 -1.25334 -1.15846 -1.05745 -0.951057 -0.840028
-0.725146 -0.607206 -0.487017 -0.365392 -0.243145 -0.121082 -2.75143e-010
0.119322 0.236125 0.34968 0.459289 0.564288 0.664055 0.758014 0.845635
0.926438 1 1.06595 1.12398 1.17384 1.21533 1.24833 1.27276 1.28862
1.29596 1.29489 1.28558

0




Let's examine a custom corner case where \(N\) is at its minimum value: \(N = 1\).
In this case, the signal function can be expressed as follows: \(\sin(f1 \cdot t) + \sin(f2 \cdot t) = \sin(f1 \cdot 1) + \sin(f2 \cdot 1) = \sin(f1) + \sin(f2)\), since there is only one data point representing the signal sample at time \(t = \frac{1}{N} = \frac{1}{1} = 1\). 

As \(|\sin(a)| \leq 1\), let's check the maximum \(\sin\) values: \(\sin(f1) = \sin(f2) = 1\), leading to \(\sin(f1) + \sin(f2) = 2\).

<code>
1
2

0
</code>

In this case, since \(\sin(f1) + \sin(f2) = 2\), and for any \(a\), \(|\sin(a)| \leq 1\) holds, it follows that \(\sin(f1) = 1\) and \(\sin(f2) = 1\). Therefore, \(f1 = f2 = \arcsin(1) = \frac{\pi}{2} = 90\). 

Continuing, \(360 + 90 = 450\) fits within the range of [400, 600]. Thus, both \(f1\) and \(f2\) will be 450. Consequently, my answer will be: "Case 1, f1 = 450, f2 = 450".




1
2

0