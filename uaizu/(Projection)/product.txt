<b>Projection</b>

<b>Time Limit : 1 sec
Memory Limit : 131072 KB</b>

Given three points \(p1\), \(p2\), and \(p\), find the projection point \(x\) of \(p\) onto the line \(p1p2\).

<img pic1>

<b>Input</b>
\(x_{p1}\) \(y_{p1}\) \(x_{p2}\) \(y_{p2}\)
\(q\)
\(x_{p_0}\) \(y_{p_0}\)
\(x_{p_1}\) \(y_{p_1}\)
...
\(x_{p_{q-1}}\) \(y_{p_{q-1}}\)

In the first line, integer coordinates of \(p1\) and \(p2\) are given. Then, \(q\) queries are given for integer coordinates of \(p\).

<b>Output</b>
For each query, print the coordinate of the projection point \(x\). The output values should be in a decimal fraction with an error less than 0.00000001.

<b>Constraints</b>
1≤\(q\)≤1000
−10000≤\(x_i\),\(y_i\)≤10000
\(p1\) and \(p2\) are not identical.





Let's denote the vectors depicted in the figure. The vector from \(p1\) to \(p2\) will be \(\vec{a}\), and from \(p1\) to \(p\) will be \(\vec{b}\). We will also mark the point \(x\) - the projection, whose coordinates we are seeking. Furthermore, we will introduce the vector from \(p1\) to \(x\) - \(\vec{c}\). If we find the coordinates of \(\vec{c}\), we will solve the problem, because we need to shift \(p1\) by \(\vec{c}\) to get \(x\). From \(\triangle p1px\), we get: \(|\vec{c}| = \cos(\phi) \cdot |\vec{b}|\), where \(\phi\) is the angle between \(\vec{b}\) and \(\vec{c}\). We also know that \(\vec{b} \cdot \vec{a} = \cos(\phi) \cdot |\vec{b}| \cdot |\vec{a}|\), i.e. \(\cos(\phi) = \dfrac{\vec{b} \cdot \vec{a}}{|\vec{b}| \cdot |\vec{a}|}\). Therefore, we know the length of \(\vec{c}\): \(|\vec{c}| = \cos(\phi) \cdot |\vec{b}| = \dfrac{\vec{b} \cdot \vec{a}}{|\vec{b}| \cdot |\vec{a}|} \cdot |\vec{b}| = \dfrac{\vec{b} \cdot \vec{a}}{|\vec{a}|}\). Since \(\vec{a}\) and \(\vec{c}\) are collinear, then \(\vec{c} = \vec{a} \cdot \dfrac{|\vec{c}|}{|\vec{a}|}\).

First, let's simply read the input data.




#include <bits/stdc++.h>

using namespace std;

struct Point {
    double x, y;
};

int main() {
    Point p1, p2;
    int q;
    cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;
    while (q--) {
        Point p;
        cin >> p.x >> p.y;
    }
    return 0;
}




As we have already found, \(\vec{c} = \vec{a} \cdot \dfrac{|\vec{c}|}{|\vec{a}|} = \vec{a} \cdot \dfrac{\vec{b} \cdot \vec{a}}{|\vec{a}|^2}\)
First, let's calculate the vectors \(\vec{a}, \ \vec{b}\) to then find the vector \(\vec{c}\).




#include <bits/stdc++.h>

using namespace std;

struct Point {
    double x, y;
};

int main() {
    Point p1, p2;
    int q;
    cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;
    Point a = {p2.x - p1.x, p2.y - p1.y};
    while (q--) {
        Point p;
        cin >> p.x >> p.y;
        Point b = {p.x - p1.x, p.y - p1.y};
    }
    return 0;
}




For convenience, let's first calculate the coefficient \(k = \dfrac{\vec{b} \cdot \vec{a}}{|\vec{a}|^2}\). To calculate the square of the modulus, we'll use the following fact: \(\vec{a} \cdot \vec{a} = |\vec{a}| \cdot |\vec{a}|\).




#include <bits/stdc++.h>

using namespace std;

struct Point {
    double x, y;
};

double dot(Point a, Point b) {
    return a.x * b.x + a.y * b.y;
}

int main() {
    Point p1, p2;
    int q;
    cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;
    Point a = {p2.x - p1.x, p2.y - p1.y};
    while (q--) {
        Point p;
        cin >> p.x >> p.y;
        Point b = {p.x - p1.x, p.y - p1.y};
        double k = dot(b, a) / dot(a, a);
    }
    return 0;
}




Now, let's find the coordinates of the point \(x\) using \(\vec{c}\). To do this, we need to add the vector \(\vec{c}\) to the point \(p1\).




#include <bits/stdc++.h>

using namespace std;

struct Point {
    double x, y;
};

double dot(Point a, Point b) {
    return a.x * b.x + a.y * b.y;
}

int main() {
    Point p1, p2;
    int q;
    cin >> p1.x >> p1.y >> p2.x >> p2.y >> q;
    Point a = {p2.x - p1.x, p2.y - p1.y};
    while (q--) {
        Point p;
        cin >> p.x >> p.y;
        Point b = {p.x - p1.x, p.y - p1.y};
        double k = dot(b, a) / dot(a, a);
        Point res = {p1.x + a.x * k, p1.y + a.y * k};
        cout << fixed << setprecision(10) << res.x << " " << res.y << "\n";
    }
    return 0;
}





0 0 2 0
3
-1 1
0 1
1 1




0 0 3 4
1
2 5




Additionally, let's check the solution on the extreme case when \(p\) coincides with \(p1\). In this case, the projection will simply coincide with the point \(p1\).





52.1 69.8 228.2 1337.3
1
52.1 69.8