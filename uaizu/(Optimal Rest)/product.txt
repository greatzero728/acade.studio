Optimal Rest
Time Limit : 8 sec
Memory Limit : 131072 KB

Music Macro Language (MML) is a language for textual representation of musical scores. Although there are various dialects of MML, all of them provide a set of commands to describe scores, such as commands for notes, rests, octaves, volumes, and so forth.

In this problem, we focus on rests, i.e. intervals of silence. Each rest command consists of a command specifier ‘R’ followed by a duration specifier. Each duration specifier is basically one of the following numbers: ‘1’, ‘2’, ‘4’, ‘8’, ‘16’, ‘32’, and ‘64’, where ‘1’ denotes a whole (1), ‘2’ a half (1/2), ‘4’ a quarter (1/4), ‘8’ an eighth (1/8), and so on. This number is called the base duration, and optionally followed by one or more dots. The first dot adds the duration by the half of the base duration. For example, ‘4.’ denotes the duration of ‘4’ (a quarter) plus ‘8’ (an eighth, i.e. the half of a quarter), or simply 1.5 times as long as ‘4’. In other words, ‘R4.’ is equivalent to ‘R4R8’. In case with two or more dots, each extra dot extends the duration by the half of the previous one. Thus ‘4..’ denotes the duration of ‘4’ plus ‘8’ plus ‘16’, ‘4...’ denotes the duration of ‘4’ plus ‘8’ plus ‘16’ plus ‘32’, and so on. The duration extended by dots cannot be shorter than ‘64’. For exapmle, neither ‘64.’ nor ‘16...’ will be accepted since both of the last dots indicate the half of ‘64’ (i.e. the duration of 1/128).

In this problem, you are required to write a program that finds the shortest expressions equivalent to given sequences of rest commands.

Input
The input consists of multiple datasets. The first line of the input contains the number of datasets N. Then, N datasets follow, each containing a sequence of valid rest commands in one line. You may assume that no sequence contains more than 100,000 characters.

Output
For each dataset, your program should output the shortest expression in one line. If there are multiple expressions of the shortest length, output the lexicographically smallest one.




The naive algorithm for this problem would involve generating all possible combinations of rest commands for each input sequence, calculating their durations, and then comparing them to find the shortest and lexicographically smallest expression.
This approach is time limit exceeding because the number of combinations grows exponentially with the length of the input, making it infeasible for sequences up to 100,000 characters.
The complexity of this method leads to excessive computations, resulting in timeouts.




Let's denote the given rest command string as \(s\).
In this problem, we are given a command string \(s\) consisting of 'R', '.', and numbers.
We need to find an alternative command string that maintains the same rest time while minimizing its length. If there are multiple solutions, we should select the lexicographically smallest string.

There are only seven prefix style of commands: R1, R2, R4, R8, R16, R32, and R64.
The time for these commands is as follows: (Without loss of generality, let's denote the time period of R64 as 1 second.) R1 = 64s, R2 = 32s, R4 = 16s, R8 = 8s, R16 = 4s, R32 = 2s, R64 = 1s.




#include<bits/stdc++.h>

using namespace std;

const int NN = 101010;

char s[NN];

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        scanf("%s", s);
    }
}




For each command, we can add some '.' to represent 1.5 times the current command. Here are all the examples:

1) R1 \(\rightarrow\) 64s  
2) R1. \(\rightarrow\) 64s + 32s = 96s  
3) R1.. \(\rightarrow\) 64s + 32s + 16s = 112s  
4) R1... \(\rightarrow\) 64s + 32s + 16s + 8s = 120s  
5) R1.... \(\rightarrow\) 64s + 32s + 16s + 8s + 4s = 124s  
6) R1..... \(\rightarrow\) 64s + 32s + 16s + 8s + 4s + 2s = 126s  
7) R1...... \(\rightarrow\) 64s + 32s + 16s + 8s + 4s + 2s + 1s = 127s  
8) R2 \(\rightarrow\) 32s  
9) R2. \(\rightarrow\) 32s + 16s = 48s  
10) R2.. \(\rightarrow\) 32s + 16s + 8s = 56s  
11) R2... \(\rightarrow\) 32s + 16s + 8s + 4s = 60s  
12) R2.... \(\rightarrow\) 32s + 16s + 8s + 4s + 2s = 62s  
13) R2..... \(\rightarrow\) 32s + 16s + 8s + 4s + 2s + 1s = 63s  
14) R4 \(\rightarrow\) 16s  
15) R4. \(\rightarrow\) 16s + 8s = 24s  
16) R4.. \(\rightarrow\) 16s + 8s + 4s = 28s  
17) R4... \(\rightarrow\) 16s + 8s + 4s + 2s = 30s  
18) R4.... \(\rightarrow\) 16s + 8s + 4s + 2s + 1s = 31s  
19) R8 \(\rightarrow\) 8s  
20) R8. \(\rightarrow\) 8s + 4s = 12s  
21) R8.. \(\rightarrow\) 8s + 4s + 2s = 14s  
22) R8... \(\rightarrow\) 8s + 4s + 2s + 1s = 15s  
23) R16 \(\rightarrow\) 4s  
24) R16. \(\rightarrow\) 4s + 2s = 6s  
25) R16.. \(\rightarrow\) 4s + 2s + 1s = 7s  
26) R32 \(\rightarrow\) 2s  
27) R32. \(\rightarrow\) 2s + 1s = 3s  
28) R64 \(\rightarrow\) 1s

So, there are a total of 28 possible patterns.
Let's find all the patterns above by using code to add '.' to the basic seven prefix patterns. (Alternatively, we can add these patterns manually.)




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010;

char s[NN];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    while(t--) {
        scanf("%s", s);
    }
}




Let's verify if we have identified all the patterns correctly by printing them out.




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010;

char s[NN];

int main() {
    //int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    for(psi p: vec) cout<<p.x<<" => "<<p.y<<endl;
    
    //while(t--) {
    //    scanf("%s", s);
    //}
}




We have calculated all the patterns correctly. Now, let's restore the code and continue.




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010;

char s[NN];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    while(t--) {
        scanf("%s", s);
    }
}




We need to calculate the total rest time of the given rest command string first. Then, we will find the alternative command string that consists of the 28 patterns mentioned above, and have the same rest time as the given command string.

How do we calculate the total rest time?
It's a straightforward task. We can split the original string by separating 'R' and calculate the total time by adding the rest time of each sub-pattern.




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010;

char s[NN];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    while(t--) {
        scanf("%s", s);
        int all = 0, val = 0;
        for(int i = 0, x = 0; s[i]; i++) {
            if(s[i] == 'R') all += val, x = 0;
            else if(isdigit(s[i])) {
                x = 10 * x + s[i] - '0';
                if(!isdigit(s[i + 1])) x = 64 / x, val = x;
            }
            else x /= 2, val += x;
        }
        all += val;
    }
}




What is the maximum limit of rest time for the given rest command? While examining all possible patterns, we can observe that the ratio of string length to time is at most 32. (R1 = 64, R1. = 96 and so on.)
Therefore, with a maximum string length of 100,000, the total rest time can reach up to 3,200,000. (\(32 \times |s|\), where \(|s|\) represents the length of the given rest command string.)




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010, MM = 32 * NN;

char s[NN];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    while(t--) {
        scanf("%s", s);
        int all = 0, val = 0;
        for(int i = 0, x = 0; s[i]; i++) {
            if(s[i] == 'R') all += val, x = 0;
            else if(isdigit(s[i])) {
                x = 10 * x + s[i] - '0';
                if(!isdigit(s[i + 1])) x = 64 / x, val = x;
            }
            else x /= 2, val += x;
        }
        all += val;
    }
}




We can now consider dynamic programming.
Let's define \( dp[i] \) as the minimum length of the rest command required for a total rest time of \( i \). The answer will be given by \( dp[n] \) (where \( n \) is the length of the original rest command string, \( n = |s| \)).

What about the initial state? It is obvious that \( dp[0] = 0 \), because no rest time requires no command string, resulting in a minimum length of zero.
To calculate \( dp[i] \), we can consider all possible options. Let's confirm this in detail.
Suppose the current \( dp[i] \) represents a certain string \( str \). We will iterate through all 28 patterns, identifying the first pattern (prefix of \( str \)).
The condition of the validator is \( dp[i] = \min\{ s\_length + dp[i - s\_time] \} \), where \( s\_time \) is the rest time represented by the current pattern, and \( s\_length \) is the length of that pattern.

To calculate \( dp[i] \), we iterate through all 28 patterns and need to compute \( dp[0], dp[1], \ldots, dp[3200000] \).
Therefore, we can calculate all \( dp[i] \) in \( 28 \times 3200000 = 89600000 \) operations. This is acceptable given that the time limit constraint for this problem is 8 seconds.

Let's calculate all dp[i].




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010, MM = 32 * NN;

char s[NN];

int dp[MM];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    for(int i = 1; i < MM; i++) {
        dp[i] = 1e9;
        for(psi p: vec) if(i >= p.y) {
            dp[i] = min(dp[i], dp[i - p.y] + (int)p.x.size());
        }
    }
    
    while(t--) {
        scanf("%s", s);
        int all = 0, val = 0;
        for(int i = 0, x = 0; s[i]; i++) {
            if(s[i] == 'R') all += val, x = 0;
            else if(isdigit(s[i])) {
                x = 10 * x + s[i] - '0';
                if(!isdigit(s[i + 1])) x = 64 / x, val = x;
            }
            else x /= 2, val += x;
        }
        all += val;
    }
}




Then, we just need to determine how to find the optimal rest command string. (Backtracking.)
We have already calculated all dp[i].

Using a similar method to calculate \( dp[i] \), we can iterate through all possible prefix patterns that can occupy the leftmost position of our optimal rest command string.

Let's suppose the current candidate pattern's length is \( len \) and its rest time is \( time \).  
\(\bullet\) If \( len + dp[n - time] = dp[n] \), it means we can prepend the current pattern to our string.  
\(\bullet\) We need to calculate the lexicographical minimum candidate string, so if there are several candidates for the prefix pattern, we can select the lexicographical minimum.  
However, we must consider a special case. Since another pattern should be added to the right position of the current pattern, when finding the lexicographical minimum candidate, we need to compare the string after appending the 'R' character at the end of the current pattern.

In this way, we can add the optimal patterns from the leftmost position to the rightmost position.




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using psi = pair<string, int>;

const int NN = 101010, MM = 32 * NN;

char s[NN];

int dp[MM];

int main() {
    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    for(int i = 1; i < MM; i++) {
        dp[i] = 1e9;
        for(psi p: vec) if(i >= p.y) {
            dp[i] = min(dp[i], dp[i - p.y] + (int)p.x.size());
        }
    }
    
    while(t--) {
        scanf("%s", s);
        int all = 0, val = 0;
        for(int i = 0, x = 0; s[i]; i++) {
            if(s[i] == 'R') all += val, x = 0;
            else if(isdigit(s[i])) {
                x = 10 * x + s[i] - '0';
                if(!isdigit(s[i + 1])) x = 64 / x, val = x;
            }
            else x /= 2, val += x;
        }
        all += val;
        
        string ans;
        while(all) {
            psi mn = {"R", all};
            for(psi p: vec) if(all >= p.y && dp[all - p.y] + p.x.size() == dp[all]) {
                if(p.x + "R" < mn.x + "R") mn = p;
            }
            ans += mn.x;
            all -= mn.y;
        }
        printf("%s\n", ans.c_str());
    }
}




3
R2R2
R1R2R4R8R16R32R64
R1R4R16




The reason my algorithm timed out, despite being linear time within \(89\ 600\ 000\) operations, is that the local time limit was set too low.
The original time limit constraint is about 8 seconds and I just consumed about 1 second to calculate all \( dp[1], dp[2], \ldots, dp[MM - 1] \). (Here, I define \( MM \) as \( 32 \times 1010101 \), which represents \( 32 \times |s| \).)

For the local system, to verify that my code works for the sample test case, let's only calculate some initial \( dp[i] \): \( dp[0], dp[1], \ldots \). We can immediately stop calculating \( dp[i] \) if the current execution time reaches 1000 ms.




#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using namespace std::chrono;
using psi = pair<string, int>;

const int NN = 101010, MM = 32 * NN;

char s[NN];

int dp[MM];

int main() {
#ifndef ONLINE_JUDGE
    auto start_time = steady_clock::now();
#endif

    int t; scanf("%d", &t);
    vector<psi> vec;
    for(int i = 1; i <= 64; i *= 2) {
        string s = "R" + to_string(i);
        int val = 64 / i, x = val;
        for(int j = 0; x; j++) {
            vec.push_back({s, val});
            s += '.';
            x /= 2, val += x;
        }
    }
    
    for(int i = 1; i < MM; i++) {
#ifndef ONLINE_JUDGE
        auto current_time = steady_clock::now();
        auto elapsed_time = duration_cast<milliseconds>(current_time - start_time).count();
        if (elapsed_time >= 1000) break;
#endif
        dp[i] = 1e9;
        for(psi p: vec) if(i >= p.y) {
            dp[i] = min(dp[i], dp[i - p.y] + (int)p.x.size());
        }
    }
    
    while(t--) {
        scanf("%s", s);
        int all = 0, val = 0;
        for(int i = 0, x = 0; s[i]; i++) {
            if(s[i] == 'R') all += val, x = 0;
            else if(isdigit(s[i])) {
                x = 10 * x + s[i] - '0';
                if(!isdigit(s[i + 1])) x = 64 / x, val = x;
            }
            else x /= 2, val += x;
        }
        all += val;
        
        string ans;
        while(all) {
            psi mn = {"R", all};
            for(psi p: vec) if(all >= p.y && dp[all - p.y] + p.x.size() == dp[all]) {
                if(p.x + "R" < mn.x + "R") mn = p;
            }
            ans += mn.x;
            all -= mn.y;
        }
        printf("%s\n", ans.c_str());
    }
}



3
R2R2
R1R2R4R8R16R32R64
R1R4R16





My code produces the correct output as I expected.
This change doesn't affect my code because if I submit this code to the online judge, the judge ignores all code within the `#ifndef ONLINE_JUDGE` and `#endif` directives.




Let's examine a custom corner case where the number of test cases \(N\) is at its minimum value: \(N = 1\).
In this test case, I will check the situation where the number of R is at its minimum value: when the number of R is 1.

<code>
1
R1
</code>

Each rest command consists of a command specifier ‘R’ followed by a duration specifier, so its minimum length is 2.
In this sample test case, the length is already 2, so we cannot find any other valid minimum command.
Therefore, the answer for this case will be just "R1."




1
R1