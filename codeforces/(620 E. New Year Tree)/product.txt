<b>Problem Name:</b> New Year Tree
<b>Time Limit:</b> 3 seconds
<b>Memory Limit:</b> 256 megabytes

<b>Problem Statement:</b>

The New Year holidays are over, but Resha doesn't want to throw away the New Year tree. He invited his best friends Kerim and Gural to help him to redecorate the New Year tree.

The New Year tree is an undirected tree with \(n\) vertices and root in the vertex \(1\).

You should process the queries of the two types:

1. Change the colours of all vertices in the subtree of the vertex \(v\) to the colour \(c\).
2. Find the number of different colours in the subtree of the vertex \(v\).

<b>Input:</b>
The first line contains two integers \(n\), \(m\) (\(1 \le n, m \le 4\cdot 10^5\)) — the number of vertices in the tree and the number of the queries.

The second line contains \(n\) integers \(c_i\) (\(1 \le c_i \le 60\)) — the colour of the \(i\)-th vertex.

Each of the next \(n - 1\) lines contains two integers \(x_j\), \(y_j\) (\(1 \le x_j, y_j \le n\)) — the vertices of the \(j\)-th edge. It is guaranteed that you are given correct undirected tree.

The last \(m\) lines contains the description of the queries. Each description starts with the integer \(t_k\) (\(1 \le t_k \le 2\)) — the type of the \(k\)-th query. For the queries of the first type then follows two integers \(v_k\), \(c_k\) (\(1 \le v_k \le n, 1 \le c_k \le 60\)) — the number of the vertex whose subtree will be recoloured with the colour \(c_k\). For the queries of the second type then follows integer \(v_k\) (\(1 \le v_k \le n\)) — the number of the vertex for which subtree you should find the number of different colours.

<b>Output:</b>
For each query of the second type print the integer \(a\) — the number of different colours in the subtree of the vertex given in the query.

Each of the numbers should be printed on a separate line in order of query appearing in the input.





There is a solution where when we have a query of type \(1\) we can iterate over every node in the subtree of node \(v_k\) and change its color to \(c_k\), and for every query of type \(2\) we can iterate over every node in the subtree of node \(v_k\) and calculate the number of distinct colors, however this solution is too slow.

We can flat our tree into an array such that \(a_i\) (the \(i^{th}\) index in the array) is the \(i^{th}\) node in the dfs-order of the tree, so let \(in_i\) be the time that our dfs entered node \(i\), and let \(out_i\) be the time that our dfs has visited all the nodes in the subtree of node \(i\), now we have converted the problem into:

We have two types of queries:

1- Change the color of every index \(j\) (where \(in_{v_k} \le j \le out_{v_k}\)) into \(c_k\).
2- Calculate the number of distinct colors from the index \(in_{v_k}\) to the index \(out_{v_k}\).

We can solve this problem by using Segment Tree.

We can represent the colors as a binary number where the \(i^{th}\) bit corresponds to the \(i^{th}\) color, so each node (let the range of this node is \([l,r]\)) in our segment tree will carry a number that corresponds to the colors of the range \([l,r]\), so if the \(i^{th}\) bit is set, then there is a color \(i\) in the range \([l,r]\), otherwise then there is no color \(i\) in the range \([l,r]\), so for the queries of type \(1\), we can use lazy propagation to set the color of every index from the index \(in_{v_k}\) to the index \(out_{v_k}\) into \(c_k\) (which means the binary number is \(2^{c_k}\)), and for the queries of type \(2\), we can get the number binary number that corresponds to the colors in the range \([in_{v_k},out_{v_k}]\), so our answer will be the number of bits that are set in this binary number.

Note: The colors will be \(0\)-based and we will use \(\texttt{long long}\) to avoid overflow since the number \(c_k\) can reach \(59\) (as \(0\)-based) (which means the binary number can each \(2^{60}-1\)).




#include <bits/stdc++.h>
#define MAXN 400010
#define INF 1000000000
using namespace std;
typedef long long ll;
typedef pair<int,int> ii;
int n,m;
vector<int> adj[MAXN];
int l[MAXN],r[MAXN],tim,a[MAXN];
ll tree[4*MAXN],lazy[4*MAXN];
void push(int node,int s,int e)
{
	if (lazy[node])
	{
		tree[node]=lazy[node];
		if (s!=e)
		{
			lazy[node*2]=lazy[node];
			lazy[node*2+1]=lazy[node];
		}
		lazy[node]=0;
	}
}
void update(int node,int s,int e,int l,int r,int val)
{
	push(node,s,e);
	if (l>e || r<s || s>e) return;
	if (l<=s && r>=e)
	{
		lazy[node]=(1LL<<val);
		push(node,s,e);
		return;
	}
	update(node*2,s,(s+e)/2,l,r,val);
	update(node*2+1,(s+e)/2+1,e,l,r,val);
	tree[node]=tree[node*2]|tree[node*2+1];
}
ll query(int node,int s,int e,int l,int r)
{
	push(node,s,e);
	if (l>e || r<s || s>e) return 0;
	if (l<=s && r>=e) return tree[node];
	return query(node*2,s,(s+e)/2,l,r)|query(node*2+1,(s+e)/2+1,e,l,r);
}
void dfs(int node)
{
	l[node]=++tim;
	for (auto i:adj[node]) if (!l[i]) dfs(i);
	r[node]=tim;
}
int main()
{
	scanf("%d%d",&n,&m);
	for (int i=1;i<=n;i++)
	{
		scanf("%d",&a[i]);
		a[i]--;
	}
	for (int i=1;i<n;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	dfs(1);
	for (int i=1;i<=n;i++)
	{
		update(1,1,n,l[i],l[i],a[i]);
	}
	while (m--)
	{
		int cmd;
		scanf("%d",&cmd);
		if (cmd==1)
		{
			int v,c;
			scanf("%d%d",&v,&c);
			c--;
			update(1,1,n,l[v],r[v],c);
		}
		else
		{
			int v;
			scanf("%d",&v);
			printf("%d\n",__builtin_popcountll(query(1,1,n,l[v],r[v])));
		}
	}
	return 0;
}




Now, let's test our solution and check that it doesn't overflow:
<code>
3 3
60 60 60
1 2
1 3
1 2 59
1 3 58
2 1
</code>

After the first query the colors of the node become: \([60,59,60]\).
After the second query the colors of the node become: \([60,59,58]\).
So, the answer for the third query will be \(3\) (since the subtree of node \(1\) contains nodes \(1,2\) and \(3\) and they all have different colors).




3 3
60 60 60
1 2
1 3
1 2 59
1 3 58
2 1