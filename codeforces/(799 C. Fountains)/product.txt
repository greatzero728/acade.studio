C. Fountains
time limit per test: 2 seconds
memory limit per test: 256 megabytes

Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.

Help Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.

Input
The first line contains three integers n, c and d (2 ≤ n ≤ 100 000, 0 ≤ c, d ≤ 100 000) — the number of fountains, the number of coins and diamonds Arkady has.

The next n lines describe fountains. Each of these lines contain two integers \(b_i\) and \(p_i (1 ≤ b_i, p_i ≤ 100 000)\) — the beauty and the cost of the i-th fountain, and then a letter "C" or "D", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.

Output
Print the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.

Note
In the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.

In the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.




We can examine every possible pair of fountains. This involves iterating through all the fountains, and for each fountain, checking every other one to determine if both can be purchased within the given coin and diamond limits.
The time complexity of this approach is \(O(n^2)\), where \(n\) represents the number of fountains. Given the constraints (up to 100 000 fountains), this could lead to as many as 10 billion operations in the worst case, which significantly exceeds the 2-second time limit.
Consequently, this naive method would take an excessively long time to execute.




We should build two fountains. There are two possible types of money: coins and diamonds. There are two possible ways to build two fountains:

1) The type of money used to pay for the two fountains is different. In this case, for each money type, we only need to check the maximum beauty of the fountains that we can buy within the current money limit. The answer will be their sum.

2) The type of money used to pay for the two fountains is the same. In this case, there are two possible scenarios:
   - 2-1) Both money types are coins. In this case, we need to build two coin-type fountains within the upper-limit constraint of \(c\).
   - 2-2) Both money types are diamonds. In this case, we need to build two diamond-type fountains within the upper-limit constraint of \(d\).
   
   
   
   
   2-1) and 2-2) follow the same format, so without loss of generality, I will explain only 2-1), as 2-2) uses a similar method.
Let's outline our sub-problems for 2-1) and 2-2) here:

There are \(N\) available fountains. (\(N \leq n \leq 100\ 000\), The sum of \(N\) for the two cases, 2-1) and 2-2), is \(n\) because we split the total fountains into case 2-1) and case 2-2) based on their money type.)
Each fountain has a beauty value \(b_i\) and a cost \(p_i\) (which means that if we pay \(p_i\), we can build a fountain with beauty \(b_i\)). So \((b_0, p_0), (b_1, p_1), ..., (b_{N - 1}, p_{N - 1})\) are given.
We currently have \(Mx\) amount and need to build two fountains.
Calculate the maximum sum of the beauty of the fountains.




We can iterate through index \(i\).
At this point, we can assume that we've already updated all information about the fountains in the index range \([1, i - 1]\).
Then, we can select the \(j\)-th and \(i\)-th fountains (\(0 \leq j < i\)).
With this method, we can check all possible cases.

However, how can we select the \(j\)-th fountain?
Obviously, we can iterate \(j\) from 0 to \(i - 1\). If we do it this way, the time complexity of our algorithm will be \(O(N^2)\), which is unacceptable because \(N\) can be up to \(10^5\).

So, let's consider the attributes of the \(j\)-th fountain.
We have already selected the \(i\)-th fountain in the current case. Our remaining total cost will be \(Mx - p_i\). This means we can build the \(j\)-th fountain if \(p_j \leq Mx - p_i\).
Therefore, for all possible \(j\) (where \(0 \leq j < i, p_j \leq Mx - p_i\)), we need to maximize \(b_j\).

This involves general Fenwick tree operations to maximize values at certain indices and calculate the maximum value in the prefix.
To efficiently select the \(j\)-th fountain, we can utilize a Fenwick tree to keep track of the maximum beauty values for fountains that can be built within the remaining budget.
As we iterate through the fountains, we update the Fenwick tree with the beauty value at their respective cost. When considering the \(i\)-th fountain, we query the Fenwick tree to find the maximum beauty value for all fountains where \(p_j \leq Mx - p_i\).
This allows us to efficiently retrieve the best possible \(b_j\) without needing to iterate through all previous fountains, thereby reducing the time complexity to \(O(N \log N)\).




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppc = pair<pii, char>;

const int NN = 101010;

int n, c, d;

ppc fountain[NN];

// 1)
int solve_1() {
    //implement case 1)
}

// 2)
int solve_2() {
    // implement case 2)
}

int main() {
    scanf("%d %d %d", &n, &c, &d);
    for(int i = 0; i < n; i++) {
        scanf("%d %d %c", &fountain[i].x.x, &fountain[i].x.y, &fountain[i].y);
    }
    printf("%d\n", max(solve_1(), solve_2()));
}




Let's handle the case 1) where mentioned in block 2.
1) The type of money used to pay for the two fountains is different. In this case, for each money type, we only need to check the maximum beauty of the fountains that we can buy within the current money limit. The answer will be their sum.




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppc = pair<pii, char>;

const int NN = 101010, inf = 1e9;

int n, c, d;

ppc fountain[NN];

// 1)
int solve_1() {
    int max_beauty_in_coin = -inf;
    int max_beauty_in_diamond = -inf;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') {
            if(cost <= c) max_beauty_in_coin = max(max_beauty_in_coin, beauty);
        }
        else {
            if(cost <= d) max_beauty_in_diamond = max(max_beauty_in_diamond, beauty);
        }
    }
    return max(0, max_beauty_in_coin + max_beauty_in_diamond);
}

// 2)
int solve_2() {
    // implement case 2)
}

int main() {
    scanf("%d %d %d", &n, &c, &d);
    for(int i = 0; i < n; i++) {
        scanf("%d %d %c", &fountain[i].x.x, &fountain[i].x.y, &fountain[i].y);
    }
    printf("%d\n", max(solve_1(), solve_2()));
}




Let's handle the case 2) where mentioned in block 2.
2) The type of money used to pay for the two fountains is the same. In this case, there are two possible scenarios:
   - 2-1) Both money types are coins. In this case, we need to build two coin-type fountains within the upper-limit constraint of \(c\).
   - 2-2) Both money types are diamonds. In this case, we need to build two diamond-type fountains within the upper-limit constraint of \(d\).

Let's outline our sub-problems for 2-1) and 2-2) here:

There are \(N\) available fountains. (\(N \leq n \leq 100\ 000\), The sum of \(N\) for the two cases, 2-1) and 2-2), is \(n\) because we split the total fountains into case 2-1) and case 2-2) based on their money type.)
Each fountain has a beauty value \(b_i\) and a cost \(p_i\) (which means that if we pay \(p_i\), we can build a fountain with beauty \(b_i\)). So \((b_0, p_0), (b_1, p_1), ..., (b_{N - 1}, p_{N - 1})\) are given.
We currently have \(Mx\) amount and need to build two fountains.
Calculate the maximum sum of the beauty of the fountains.




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppc = pair<pii, char>;

const int NN = 101010, inf = 1e9;

int b[NN], p[NN], Mx, N;
int n, c, d;

ppc fountain[NN];

// 1)
int solve_1() {
    int max_beauty_in_coin = -inf;
    int max_beauty_in_diamond = -inf;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') {
            if(cost <= c) max_beauty_in_coin = max(max_beauty_in_coin, beauty);
        }
        else {
            if(cost <= d) max_beauty_in_diamond = max(max_beauty_in_diamond, beauty);
        }
    }
    return max(0, max_beauty_in_coin + max_beauty_in_diamond);
}

int solve_sub_problem() {
    // implement sub-problem
}

// 2)
int solve_2() {
    int ans = 0;
    
    // 2-1)
    N = 0, Mx = c;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    
    // 2-2)
    N = 0, Mx = d;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'D') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    return ans;
}

int main() {
    scanf("%d %d %d", &n, &c, &d);
    for(int i = 0; i < n; i++) {
        scanf("%d %d %c", &fountain[i].x.x, &fountain[i].x.y, &fountain[i].y);
    }
    printf("%d\n", max(solve_1(), solve_2()));
}




Let's implement the sub-problem step by step.
First, let's create a general Fenwick tree operation function to calculate the maximum value for indices less than or equal to \( u \), and another operation function to update the beauty value at index \( u \).




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppc = pair<pii, char>;

const int NN = 101010, inf = 1e9;

int b[NN], p[NN], Mx, N;
int n, c, d;

ppc fountain[NN];

// 1)
int solve_1() {
    int max_beauty_in_coin = -inf;
    int max_beauty_in_diamond = -inf;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') {
            if(cost <= c) max_beauty_in_coin = max(max_beauty_in_coin, beauty);
        }
        else {
            if(cost <= d) max_beauty_in_diamond = max(max_beauty_in_diamond, beauty);
        }
    }
    return max(0, max_beauty_in_coin + max_beauty_in_diamond);
}

int B[NN];

int calc_max_beauty(int u) {
    int ans = -inf;
    for(; u; u ^= u & -u) ans = max(ans, B[u]);
    return ans;
}
void maximize_beauty(int u, int beauty) {
    for(; u < NN; u += u & -u) B[u] = max(B[u], beauty);
}

int solve_sub_problem() {
    // implement sub-problem
}

// 2)
int solve_2() {
    int ans = 0;
    
    // 2-1)
    N = 0, Mx = c;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    
    // 2-2)
    N = 0, Mx = d;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'D') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    return ans;
}

int main() {
    scanf("%d %d %d", &n, &c, &d);
    for(int i = 0; i < n; i++) {
        scanf("%d %d %c", &fountain[i].x.x, &fountain[i].x.y, &fountain[i].y);
    }
    printf("%d\n", max(solve_1(), solve_2()));
}




I have explained in detail in block 4, let's explain again here.

First, we need to initialize the Fenwick tree node values to \(-\infty\) since we need to calculate the maximum value in the range \([0, Mx - p_i]\) when checking the candidates that contain the \(i\)-th fountain.
Then, for each step where we check the candidates that contain the \(i\)-th fountain, we first calculate the maximum beauty value of the \(j\)-th fountain (where \(0 \leq j < i\) and \(p_j \leq Mx - p_i\)).
After maximizing the answer, we can update the information of the \(i\)-th fountain, as we need to implement the above logic for indices greater than \(i\).




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppc = pair<pii, char>;

const int NN = 101010, inf = 1e9;

int b[NN], p[NN], Mx, N;
int n, c, d;

ppc fountain[NN];

// 1)
int solve_1() {
    int max_beauty_in_coin = -inf;
    int max_beauty_in_diamond = -inf;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') {
            if(cost <= c) max_beauty_in_coin = max(max_beauty_in_coin, beauty);
        }
        else {
            if(cost <= d) max_beauty_in_diamond = max(max_beauty_in_diamond, beauty);
        }
    }
    return max(0, max_beauty_in_coin + max_beauty_in_diamond);
}

int B[NN];

int calc_max_beauty(int u) {
    int ans = -inf;
    for(; u; u ^= u & -u) ans = max(ans, B[u]);
    return ans;
}
void maximize_beauty(int u, int beauty) {
    for(; u < NN; u += u & -u) B[u] = max(B[u], beauty);
}

int solve_sub_problem() {
    int ans = 0;
    for(int i = 0; i < NN; i++) B[i] = -inf;
    for(int i = 0; i < N; i++) {
        if(Mx - p[i] > 0) ans = max(ans, calc_max_beauty(Mx - p[i]) + b[i]);
        maximize_beauty(p[i], b[i]);
    }
    return ans;
}

// 2)
int solve_2() {
    int ans = 0;
    
    // 2-1)
    N = 0, Mx = c;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'C') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    
    // 2-2)
    N = 0, Mx = d;
    for(int i = 0; i < n; i++) {
        int beauty = fountain[i].x.x;
        int cost = fountain[i].x.y;
        char type = fountain[i].y;
        if(type == 'D') b[N] = beauty, p[N] = cost, N++;
    }
    ans = max(ans, solve_sub_problem());
    return ans;
}

int main() {
    scanf("%d %d %d", &n, &c, &d);
    for(int i = 0; i < n; i++) {
        scanf("%d %d %c", &fountain[i].x.x, &fountain[i].x.y, &fountain[i].y);
    }
    printf("%d\n", max(solve_1(), solve_2()));
}




3 7 6
10 8 C
4 3 C
5 6 D




2 4 5
2 5 C
2 1 D




3 10 10
5 5 C
5 5 C
10 11 D




Let's examine a custom corner case where \(n, c, d, b_i, p_i\) are at their minimum value: \(n = 2, c 
= d = 0, b_i = p_i = 1\).

2 0 0
1 1 C
1 1 D

In this case, since \(c = d = 0\), we can't build any fountains because we don't have any money. Therefore, the answer for this test case will be "0".




2 0 0
1 1 C
1 1 D