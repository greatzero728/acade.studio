B. Lecture Sleep
time limit per test: 1 second
memory limit per test: 256 megabytes

Your friend Mishka and you attend a calculus lecture. Lecture lasts n minutes. Lecturer tells \(a_i\) theorems during the i-th minute.

Mishka is really interested in calculus, though it is so hard to stay awake for all the time of lecture. You are given an array t of Mishka's behavior. If Mishka is asleep during the i-th minute of the lecture then \(t_i\) will be equal to 0, otherwise it will be equal to 1. When Mishka is awake he writes down all the theorems he is being told — \(a_i\) during the i-th minute. Otherwise he writes nothing.

You know some secret technique to keep Mishka awake for k minutes straight. However you can use it only once. You can start using it at the beginning of any minute between 1 and n - k + 1. If you use it on some minute i then Mishka will be awake during minutes j such that \(j \in [i, i + k - 1]\) and will write down all the theorems lecturer tells.

You task is to calculate the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.

Input
The first line of the input contains two integer numbers n and k (1 ≤ k ≤ n ≤ \(10^5\)) — the duration of the lecture in minutes and the number of minutes you can keep Mishka awake.

The second line of the input contains n integer numbers \(a_1, a_2, ... a_n (1 ≤ a_i ≤ 10^4)\) — the number of theorems lecturer tells during the i-th minute.

The third line of the input contains n integer numbers \(t_1, t_2, ... t_n (0 ≤ t_i ≤ 1)\) — type of Mishka's behavior at the i-th minute of the lecture.

Output
Print only one integer — the maximum number of theorems Mishka will be able to write down if you use your technique only once to wake him up.

Note
In the sample case the better way is to use the secret technique at the beginning of the third minute. Then the number of theorems Mishka will be able to write down will be equal to 16.




Let's formulate the problem again:
Given integers \(a_1, a_2, ..., a_n\) (where \(a_i \leq 10000\)) and a binary array \(t_1, t_2, ..., t_n\), along with an integer \(k\) (where \(1 \leq k \leq n \leq 100000\)), we can select a subarray of length \(k\) and set all \(t_i\) in the selected array to 1.
Our goal is to maximize \(\sum{a_i \cdot t_i}\) (for \(1 \leq i \leq n\)).
Calculate the maximum value of the expression above.

\(\bull\) naive algorithm
There are \(n - k + 1\) possible subarrays of length \(k\).
Let's examine all these subarrays. For each case, we can set all \(t_i\) in the current subarray to 1 and calculate \(\sum{a_i \cdot t_i}\) with a time complexity of \(O(n)\).
However, the number of candidate subarrays of length \(k\) can be up to \(n\) if \(k = 1\), resulting in a time complexity of \(O(n^2)\) for this naive algorithm. \((1 \leq n \leq 10 ^ 5)\)
Therefore, this naive algorithm is a time limit exceeding algorithm.





#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> a(n + 1);
    vector<int> t(n + 1);

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }

    for (int i = 1; i <= n; i++) {
        cin >> t[i];
    }
}




We need to efficiently calculate the maximum sum of theorems that can be written down.
Let's use the prefix sum technique to speed up the calculation.
We define \(sumA[i]\) and \(sumT[i]\) as the prefix sums of arrays \(a\) and \(t\), respectively.
\(sumA[i] = \sum_{j = 1}^{i} a[j]\)
\(sumT[i] = \sum_{j = 1}^{i} a[j] \cdot t[j]\)
Then, the total sum of theorems that can be written down by using the secret technique to wake Mishka up starting at minute \(i\) can be expressed as:
\(sumT[i - 1] + sumA[i + k - 1] - sumA[i - 1] + sumT[n] - sumT[i + k - 1]\)
This can be simplified to:
\(sumT[n] - sumT[i + k - 1] + sumA[i + k - 1] - (sumA[i - 1] - sumT[i - 1])\)




#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> a(n + 1);
    vector<int> t(n + 1);
    vector<int> sumA(n + 1);
    vector<int> sumT(n + 1);

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }

    for (int i = 1; i <= n; i++) {
        cin >> t[i];
    }

    for (int i = 1; i <= n; i++) {
        sumA[i] = sumA[i - 1] + a[i];
        sumT[i] = sumT[i - 1] + a[i] * t[i];
    }

    int maxSum = 0;
    for (int i = 1; i <= n - k + 1; i++) {
        int currentSum = sumT[n] - sumT[i + k - 1] + sumA[i + k - 1] - (sumA[i - 1] - sumT[i - 1]);
        maxSum = max(maxSum, currentSum);
    }

    cout << maxSum << endl;
}




Let's examine a custom corner case, where \(n, k, a_i, t_i\) are their minimum values: \(n = k =1, a_i = 1, t_i = 0\).
<code>
1 1
1
0
</code>
In this case the number of subarray that has length k is the full array, so we can set all \(t_i\) into 1.
So, in this case, the answer will be : \(\sum{a_i \cdot t_i} = 1 \cdot 1 = 1\).





1 1
1
0