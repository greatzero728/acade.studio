B. Build the Permutation
time limit per test: 1 second
memory limit per test: 256 megabytes

You are given three integers n,a,b. Determine if there exists a permutation \(p_1,p_2,…,p_n\) of integers from 1 to n, such that:

\(\bull\) There are exactly a integers i with 2≤i≤n−1 such that \(p_{i−1}<p_i>p_{i+1}\) (in other words, there are exactly a local maximums).

\(\bull\) There are exactly b integers i with 2≤i≤n−1 such that \(p_{i−1}>p_i<p_{i+1}\) (in other words, there are exactly b local minimums).

If such permutations exist, find any such permutation.

Input
The first line of the input contains a single integer t (1≤t≤\(10^4\)) — the number of test cases. The description of test cases follows.

The only line of each test case contains three integers n, a and b (2≤n≤\(10^5\), 0≤a,b≤n).

The sum of n over all test cases doesn't exceed \(10^5\).

Output
For each test case, if there is no permutation with the requested properties, output −1.

Otherwise, print the permutation that you are found. If there are several such permutations, you may print any of them.

Note
In the first test case, one example of such permutations is [1,3,2,4]. In it \(p_1<p_2>p_3\), and 2 is the only such index, and \(p_2>p_3<p_4\), and 3 the only such index.

One can show that there is no such permutation for the third test case.




\(\bull\) naive algorithm
For each test case, we can iterate all possible \(2 ^ n\) permutations and calculate the number of local maximums and local minimums. If the number of local maximums is a and the number of local minimums is b, we need to print such permutation. But to do this approach, we have to iterate all possible \(2 ^ n\) permutations, and this is not efficient as n is up to \(10 ^ 5\).
So this naive algorithm is time limit exceeding algorithm.

\(\bull\) real algorithm
Let's think about the total number of local maximums and local minimums.

These are the definitions of local maximums and local minimums:
\(\bull\) There are exactly a integers i with 2≤i≤n−1 such that \(p_{i−1}<p_i>p_{i+1}\) (in other words, there are exactly a local maximums).
\(\bull\) There are exactly b integers i with 2≤i≤n−1 such that \(p_{i−1}>p_i<p_{i+1}\) (in other words, there are exactly b local minimums).

As we can see in the definition, the index i meets 2≤i≤n−1, so there are n-2 possible indices where the total number of local maximums and local minimums can occur.

\(\textcolor{blue}{a + b ≤ n - 2}\)

For every continuous local maximum, there must be a corresponding local minimum, and vice versa. This means that if we list all local maximums and local minimums in ascending order, the sequence will be: (local maximum), (local minimum), (local maximum), (local minimum), ... or (local minimum), (local maximum), (local minimum), (local maximum), ...
This means the difference between the number of local maximums and local minimums should be less than or equal to 1.

\(\textcolor{blue}{|a - b| ≤ 1}\)




Now, we can start thinking about how to generate a permutation where the where the above conditions meet.

If either \( a + b \leq n - 2 \) or \( |a - b| \leq 1 \) is not satisfied, it means we cannot find the required permutations. In this case, we must print "-1".

Otherwise, there are 3 cases to consider, and we only need to determine how to find the required permutation for each case.

\(\textcolor{red}{1)\ the\ case\ where\ a = b + 1:}\)
Let's consider the following permutation:
\(\left(n - 1, n - 0, n - 3, n - 2, n - 5, n - 4, n - 7, n - 6, \dots, n - (2 \cdot b - 1), n - (2 \cdot b - 2), n - (2 \cdot b + 1), n - 2 \cdot b, n - (2 \cdot b + 2), n - (2 \cdot b + 3), n - (2 \cdot b + 4), \dots, 3, 2, 1 \right)\)

\(n - 0, n - 2, n - 4, n - 6, \dots, n - (2 \cdot b - 2), n - 2 \cdot b\) represent the indices of local maximums. The number of local maximums is a.
\(n - 3, n - 5, n - 7, \dots, n - (2 \cdot b - 1), n - (2 \cdot b + 1)\) represent the indices of local minimums. The number of local minimums is b.

Identifying local maximums and local minimums can be challenging, so let's verify the formula with an example:
Let \(n = 27\), \(a = 10\), and \(b = 9\).
The permutation is:
\(\left(27 - 1, 27 - 0, 27 - 3, 27 - 2, 27 - 5, 27 - 4, 27 - 7, 27 - 6, \dots, 27 - (2 \cdot 9 - 1), 27 - (2 \cdot 9 - 2), 27 - (2 \cdot 9 + 1), 27 - 2 \cdot 9, 27 - (2 \cdot 9 + 2), 27 - (2 \cdot 9 + 3), 27 - (2 \cdot 9 + 4), \dots, 3, 2, 1\right) = \left(26, 27, 24, 25, 22, 23, 20, 21, \dots, 10, 11, 8, 9, 7, 6, 5, \dots, 3, 2, 1\right)\)

In this case, \(27, 25, 23, 21, \dots, 11, 9\) are the indices of local maximums, totaling 10, which matches \(a\).
This is validated by the conditions \(26 < 27 > 24\), \(24 < 25 > 22\), \(22 < 23 > 20\), \(20 < 21 > 18\), ..., \(10 < 11 > 8\), \(8 < 9 > 7\).

Conversely, \(24, 22, 20, \ldots, 10, 8\) are the indices of local minimums, totaling 9, consistent with \(b\).
This is confirmed by the conditions \(27 > 24 < 25\), \(25 > 22 < 23\), \(23 > 20 < 21\), ..., \(13 > 10 < 11\), \(11 > 8 < 9\).

\(\textcolor{red}{2)\ the\ case\ where\ a = b:}\)
Let's consider the following permutation:
\(\left(1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot a + 1, 2 \cdot a, 2 \cdot a + 2, 2 \cdot a + 3, 2 \cdot a + 4, \dots, n - 2, n - 1, n \right)\)

\(2 \cdot 1 + 1, 2 \cdot 2 + 1, \dots, 2 \cdot a + 1\) represent the indices of local maximums. The number of local maximums is a.
\(2 \cdot 1, 2 \cdot 2, \dots, 2 \cdot a\) represent the indices of local minimums. The number of local minimums is b.

Identifying local maximums and local minimums can be challenging, so let's verify the formula with an example:
Let \(n = 27\), \(a = 9\), and \(b = 9\).
The permutation is:
\(\left(1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot 9 + 1, 2 \cdot 9, 2 \cdot 9 + 2, 2 \cdot 9 + 3, 2 \cdot 9 + 4, \dots, 27 - 2, 27 - 1, 27 \right)\) = \(\left(1, 3, 2, 5, 4, \dots, 19, 18, 20, 21, 22, \dots, 25, 26, 27 \right)\)

In this case, \(3, 5, \dots, 19\) are the indices of local maximums, totaling 9, which matches \(a\).
This is validated by the conditions \(1 < 3 > 2\), \(2 < 5 > 4\), ..., \(16 < 19 > 18\).

Conversely, \(2, 4, \dots, 18\) are the indices of local minimums, totaling 9, consistent with \(b\).
This is confirmed by the conditions \(3 > 2 < 5\), \(5 > 4 < 7\), ..., \(19 > 18 < 20\).

\(\textcolor{red}{3)\ the\ case\ where\ a + 1 = b:}\)
Let's consider the following permutation:
\(\left(n, 1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot a + 1, 2 \cdot a, 2 \cdot a + 2, 2 \cdot a + 3, 2 \cdot a + 4, \dots, n - 2, n - 1 \right)\)

\(2 \cdot 1 + 1, 2 \cdot 2 + 1, \dots, 2 \cdot a + 1\) represent the indices of local maximums. The number of local maximums is a.
\(1, 2 \cdot 1, 2 \cdot 2, \dots, 2 \cdot a\) represent the indices of local minimums. The number of local minimums is b.

Identifying local maximums and local minimums can be challenging, so let's verify the formula with an example:
Let \(n = 27\), \(a = 9\), and \(b = 9\).
The permutation is:
\(\left(27, 1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot 9 + 1, 2 \cdot 9, 2 \cdot 9 + 2, 2 \cdot 9 + 3, 2 \cdot 9 + 4, \dots, 27 - 2, 27 - 1 \right)\) = \(\left(27, 1, 3, 2, 5, 4, \dots, 19, 18, 20, 21, 22, \dots, 25, 26 \right)\)

In this case, \(3, 5, \dots, 19\) are the indices of local maximums, totaling 9, which matches \(a\).
This is validated by the conditions \(1 < 3 > 2\), \(2 < 5 > 4\), ..., \(16 < 19 > 18\).

Conversely, \(1, 2, 4, \dots, 18\) are the indices of local minimums, totaling 9, consistent with \(b\).
This is confirmed by the conditions \(27 > 1 < 3\), \(3 > 2 < 5\), \(5 > 4 < 7\), ..., \(19 > 18 < 20\).




#include<bits/stdc++.h>

using namespace std;

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        int n, a, b; scanf("%d %d %d", &n, &a, &b);
    }
}





If either \( a + b \leq n - 2 \) or \( |a - b| \leq 1 \) is not satisfied, it means we cannot find the required permutations. In this case, we must print "-1".




#include<bits/stdc++.h>

using namespace std;

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        int n, a, b; scanf("%d %d %d", &n, &a, &b);
        if(a + b > n - 2 || abs(a - b) > 1) {
            puts("-1");
            continue;
        }
    }
}





\(\textcolor{red}{1)\ the\ case\ where\ a = b + 1:}\)
In case of a = b + 1, the following permutation satisfies the given requirement, so let's print this permutation.
\(\left(n - 1, n - 0, n - 3, n - 2, n - 5, n - 4, n - 7, n - 6, \dots, n - (2 \cdot b - 1), n - (2 \cdot b - 2), n - (2 \cdot b + 1), n - 2 \cdot b, n - (2 \cdot b + 2), n - (2 \cdot b + 3), n - (2 \cdot b + 4), \dots, 3, 2, 1 \right)\)





#include<bits/stdc++.h>

using namespace std;

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        int n, a, b; scanf("%d %d %d", &n, &a, &b);
        if(a + b > n - 2 || abs(a - b) > 1) {
            puts("-1");
            continue;
        }
        if(a == b + 1) {
            for(int i = 0; i <= b; i++) {
                printf("%d %d ", n - (2 * i + 1), n - (2 * i));
            }
            for(int i = n - (2 * b + 2); i >= 1; i--) {
                printf("%d ", i);
            }
            puts("");
        }
    }
}





\(\textcolor{red}{2)\ the\ case\ where\ a = b:}\)
In case of a = b, the following permutation satisfies the given requirement, so let's print this permutation.
\(\left(1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot a + 1, 2 \cdot a, 2 \cdot a + 2, 2 \cdot a + 3, 2 \cdot a + 4, \dots, n - 2, n - 1, n \right)\)




#include<bits/stdc++.h>

using namespace std;

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        int n, a, b; scanf("%d %d %d", &n, &a, &b);
        if(a + b > n - 2 || abs(a - b) > 1) {
            puts("-1");
            continue;
        }
        if(a == b + 1) {
            for(int i = 0; i <= b; i++) {
                printf("%d %d ", n - (2 * i + 1), n - (2 * i));
            }
            for(int i = n - (2 * b + 2); i >= 1; i--) {
                printf("%d ", i);
            }
            puts("");
        }
        if(a == b) {
            printf("1");
            for(int i = 1; i <= a; i++) {
                printf(" %d %d", 2 * i + 1, 2 * i);
            }
            for(int i = 2 * a + 2; i <= n; i++) {
                printf(" %d", i);
            }
            puts("");
        }
    }
}





\(\textcolor{red}{3)\ the\ case\ where\ a + 1 = b:}\)
In case of a + 1 = b, the following permutation satisfies the given requirement, so let's print this permutation.
\(\left(n, 1, 2 \cdot 1 + 1, 2 \cdot 1, 2 \cdot 2 + 1, 2 \cdot 2, \dots, 2 \cdot a + 1, 2 \cdot a, 2 \cdot a + 2, 2 \cdot a + 3, 2 \cdot a + 4, \dots, n - 2, n - 1 \right)\)




#include<bits/stdc++.h>

using namespace std;

int main() {
    int t; scanf("%d", &t);
    while(t--) {
        int n, a, b; scanf("%d %d %d", &n, &a, &b);
        if(a + b > n - 2 || abs(a - b) > 1) {
            puts("-1");
            continue;
        }
        if(a == b + 1) {
            for(int i = 0; i <= b; i++) {
                printf("%d %d ", n - (2 * i + 1), n - (2 * i));
            }
            for(int i = n - (2 * b + 2); i >= 1; i--) {
                printf("%d ", i);
            }
            puts("");
        }
        if(a == b) {
            printf("1");
            for(int i = 1; i <= a; i++) {
                printf(" %d %d", 2 * i + 1, 2 * i);
            }
            for(int i = 2 * a + 2; i <= n; i++) {
                printf(" %d", i);
            }
            puts("");
        }
        if(a + 1 == b) {
            printf("%d 1", n);
            for(int i = 1; i <= a; i++) {
                printf(" %d %d", 2 * i + 1, 2 * i);
            }
            for(int i = 2 * a + 2; i < n; i++) {
                printf(" %d", i);
            }
            puts("");
        }
    }
}





2nd test case is different with the sample output, so let me check if my result is correct:
permutation: 6 1 3 2 4 5
\(\bull\) 1 < 3 > 2
So all possible local maximums are: 3
\(\bull\) 6 > 1 < 3, 3 > 2 < 4
So all possible local maximums are: 1, 2

Finally, this permutation contains 1 local maximum, and 2 local minimums.
So my output is correct.




Let's examine a custom corner case where \( n \), \( a \), and \( b \) are at their minimum values: \( n = 2 \), \( a = b = 0 \).
<code>
1
2 0 0
</code>
In this test case, since \( a = b = 0 \), there should be no local maxima or minima. The possible permutations {1, 2} and {2, 1} can be considered valid answers, as they do not contain any local maxima or minima.




1
2 0 0