<b>Title: </b> Dynasty Puzzles
<b>time limit per test:</b> 2 seconds
<b>memory limit per test:</b> 256 megabytes

The ancient Berlanders believed that the longer the name, the more important its bearer is. Thus, Berland kings were famous for their long names. But long names are somewhat inconvenient, so the Berlanders started to abbreviate the names of their kings. They called every king by the first letters of its name. Thus, the king, whose name was Victorious Vasily Pupkin, was always called by the berlanders VVP.

In Berland over its long history many dynasties of kings replaced each other, but they were all united by common traditions. Thus, according to one Berland traditions, to maintain stability in the country, the first name of the heir should be the same as the last name his predecessor (hence, the first letter of the abbreviated name of the heir coincides with the last letter of the abbreviated name of the predecessor). Berlanders appreciate stability, so this tradition has never been broken. Also Berlanders like perfection, so another tradition requires that the first name of the first king in the dynasty coincides with the last name of the last king in this dynasty (hence, the first letter of the abbreviated name of the first king coincides with the last letter of the abbreviated name of the last king). This tradition, of course, has also been always observed.

The name of a dynasty is formed by very simple rules: we take all the short names of the kings in the order in which they ruled, and write them in one line. Thus, a dynasty of kings "ab" and "ba" is called "abba", and the dynasty, which had only the king "abca", is called "abca".

Vasya, a historian, has recently found a list of abbreviated names of all Berland kings and their relatives. Help Vasya to find the maximally long name of the dynasty that could have existed in Berland.

Note that in his list all the names are ordered by the time, that is, if name \(A\) is earlier in the list than \(B\), then if \(A\) and \(B\) were kings, then king \(A\) ruled before king \(B\) .

<b>Input</b>
The first line contains integer \( n (1 ≤ n ≤ 5·10^5) \)— the number of names in Vasya's list. Next \(n\) lines contain \(n\) abbreviated names, one per line. An abbreviated name is a non-empty sequence of lowercase Latin letters. Its length does not exceed \(10\) characters.

<b>Output</b>
Print a single number — length of the sought dynasty's name in letters.

If Vasya's list is wrong and no dynasty can be found there, print a single number 0.

<b>Note</b>
In the first sample two dynasties can exist: the one called "abcca" (with the first and second kings) and the one called "abccba" (with the first and third kings).

In the second sample there aren't acceptable dynasties.

The only dynasty in the third sample consists of one king, his name is "c"





The naive way to solve this problem is to try all possible ways of forming a dynasty. We can do this via a backtracking algorithm. We can start with the first king and try to find the next king whose name starts with the last letter of the current king's name. We can continue this process until we reach the last king. If the last king's name starts with the first letter of the first king's name, then we have found a valid dynasty and find the maximum length of the dynasty. This approach has a time complexity of \( O(2^n) \) that is not acceptable for the given constraints, as \( n \leq 5*10^5 \).





Note that we are working with only lower case Latin English letters, so there is a limited number of ways to form a dynasty.
So, if we say we start with a king whose name ends with 'a', then we can only have a king whose name starts with 'a', there might be up to 26 distinct endings for the next king, and so on.

So, we can define a dynamic programming solution to solve this problem. Let's define a 2D dp array where dp[i][j] will store the maximum length of the dynasty that can be formed if we start with the king whose name starts with the i-th letter and ends with the j-th letter.

We can see that the transition from one state to another is very simple. If we are at the state dp[i][j], then we can move to the state dp[j][k] where k is the first letter of the name of the next king. We can iterate over all the names and update the dp array accordingly.

Finally, we can see that the answer is the maximum value in the dp array. So, we can iterate over all the values in the dp array and find the maximum value.






#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<string> names(n);
    for (int i = 0; i < n; i++) {
        cin >> names[i];
    }

    return 0;
}





Now, let's build the dp as we discussed in the above.






#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<string> names(n);
    for (int i = 0; i < n; i++) {
        cin >> names[i];
    }

    int dp[26][26];
    for (int i = 0; i < 26; i++) {
        for (int j = 0; j < 26; j++) {
            dp[i][j] = 0;
        }
    }

    for (const string& name : names) {
        int len = name.size();
        char start = name[0];
        char end = name[len - 1];

        for (int j = 0; j < 26; j++) {
            if (dp[j][start - 'a'] > 0) {
                dp[j][end - 'a'] = max(dp[j][end - 'a'], dp[j][start - 'a'] + len);
            }
        }

        dp[start - 'a'][end - 'a'] = max(dp[start - 'a'][end - 'a'], len);
    }

    int max_len = 0;
    for (int i = 0; i < 26; i++) {
        max_len = max(max_len, dp[i][i]);
    }

    cout << max_len << endl;

    return 0;
}





Let's try a custom test where all the input letters are the same.

This will ensure that we include duplicated words and do not skip anything.

Let's say n is 4, and the input is
aaaaa
aa
aaaaaaa
a

This must be the sum of the letters, which is 5+2+7+1, that is, 15




4
aaaaa
aa
aaaaaaa
a
