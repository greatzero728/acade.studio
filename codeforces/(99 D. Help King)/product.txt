<b>
Problem title: Help King
time limit per test: 2 seconds
memory limit per test: 256 megabytes
</b>
Once upon a time in a far away kingdom lived the King. The King had a beautiful daughter, Victoria. They lived happily, but not happily ever after: one day a vicious dragon attacked the kingdom and stole Victoria. The King was full of grief, yet he gathered his noble knights and promised half of his kingdom and Victoria's hand in marriage to the one who will save the girl from the infernal beast.

Having travelled for some time, the knights found the dragon's lair and all of them rushed there to save Victoria. Each knight spat on the dragon once and, as the dragon had quite a fragile and frail heart, his heart broke and poor beast died. As for the noble knights, they got Victoria right to the King and started brawling as each one wanted the girl's hand in marriage.

The problem was that all the noble knights were equally noble and equally handsome, and Victoria didn't want to marry any of them anyway. Then the King (and he was a very wise man and didn't want to hurt anybody's feelings) decided to find out who will get his daughter randomly, i.e. tossing a coin. However, there turned out to be \(n\) noble knights and the coin only has two sides. The good thing is that when a coin is tossed, the coin falls on each side with equal probability. The King got interested how to pick one noble knight using this coin so that all knights had equal probability of being chosen (the probability in that case should always be equal to \(1/n\). First the King wants to know the expected number of times he will need to toss a coin to determine the winner. Besides, while tossing the coin, the King should follow the optimal tossing strategy (i.e. the strategy that minimizes the expected number of tosses). Help the King in this challenging task.

<b>Input</b>
The first line contains a single integer \(n\) from the problem's statement (\(1 \le n \le 10000\)).

<b>Output</b>
Print the sought expected number of tosses as an irreducible fraction in the following form: \(``a\texttt{/}b"\) (without the quotes) without leading zeroes.





Let's first explore the problem in simpler terms. There are \(n\) knights and a king with a perfectly balanced 2 faced coin. The king wants to flip the coin a number of times to determine a winner, such that all the knights have an equal chance to be the winner.

There is no functioning obvious or naive solution for this problem.

We can see that if we have 2 knights, we can flip the coin once. If we have 4 knights, we can flip the coin once to eliminate 2 knights and another to choose from the remaining knights. For every exponent of 2, the answer is an integer.

If we have 3 knights, we face a complication: there isn't a way to perfectly divide the chances like the exponents of 2. If we follow what we did for 4 knights, we will end up with a knight with a \(1/2\) chance and 2 knights with a \(1/4\) chance, or all knights have a \(1/4\) chance, but there's a \(1/4\) chance that no one wins.

To mitigate this problem, we'll start the cycle again if we have no winners, which means we'll possibly have an infinite number of coin flips. We can picture it as a binary tree, where every split is a coin toss:
<img explain>

In that way, all knights have the same chance of being chosen \(1/3\) as there's an equal number of occurrences at each depth, and the expected number of coin tosses is \(2*\frac{3}{4} + 4*\frac{3}{16}+6*\frac{3}{64}+\dots = \sum\limits_{n=1}^{\infty}\frac{6n}{2^{2n}}\) which is a converging infinite sum with the result of \(\frac{8}{3}\)

If we have 5 knights, we'll need to flip thrice to have 8 slots, fill 5 of them with the knights, and have 3 fail nodes. After flipping coins at those 3 fail node, we'll have 6 empty slots, after adding the knights, we'll have 1 fail node, and the pattern repeats itself.

We'll have \(\sum\limits_{n=1}^{\infty} \frac{20n-5}{2^{4n-1}} + \frac{20n}{2^{4n}}\) a converging infinite sum of \(\frac{18}{5}\)

So this is our algorithm:

If the number of fail nodes is less than \(n\), we flip a coin at each fail node, doubling the fail nodes. If the number is greater instead, we decrease from it the number of knights and continue using the remaining fail nodes.

However doing so in this form is impossible as there will be infinite depths. So, we use the same steps until we reach a fail nodes of 1, since that means we're repeating the sequence.

Now that we have the sequence of depths that the tree forms, we can directly calculate the expected number of tosses, we just have to do it in such a way, that the sum doesn't overflow. We will make use of a data structure for huge numbers for this issue.




#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(){
    ll n; cin>>n;
}




We first realize that the answer for 3 is the same for 6, 12, ...., that is because the resulting tree is the same, just enlarged.
So we make our \(n\) an odd number by repeatedly dividing it by 2, if after doing so, \(n\) becomes 1, that means it's a power of \(2\) and the number of tosses needed is that power.




#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(){
    ll n; cin>>n;
    ll x = 0;
    while(n%2==0){
        n/=2;
        x++;
    }
    if(n==1){
        cout << x << "/1";
        return 0;
    }
    
}




Now we loop over the tree depth, while keeping track of if the depth holds a number of fail nodes that's larger than n and exiting when the fail nodes are equal to 1 once again.




#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(){
    ll n; cin>>n;
    ll x = 0;
    while(n%2==0){
        n/=2;
        x++;
    }
    if(n==1){
        cout << x << "/1";
        return 0;
    }
    
    vector<int>depths;
    ll failNodes = 1;
    while(true){
        failNodes*=2;
        depths.push_back(failNodes/n);
        failNodes%=n;
        if(failNodes == 1){
            break;
        }
    }
}




We'll loop through the stored depths, if a depth can hold \(n\) knights (its value is 1), we add to the answer.





#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(){
    ll n; cin>>n;
    ll x = 0;
    while(n%2==0){
        n/=2;
        x++;
    }
    if(n==1){
        cout << x << "/1";
        return 0;
    }
    
    vector<int>depths;
    ll failNodes = 1;
    while(true){
        failNodes*=2;
        depths.push_back(failNodes/n);
        failNodes%=n;
        if(failNodes == 1){
            break;
        }
    }
    
    ll k=depths.size(), ans = 0;
    for(ll i=0; i<k; i++){
        if(depths[i]){
            ans+=(1ll<<(k-i-1))*(i+1);
        }
    }
    ans *= n;
    ans += k;
}




We then simplify the fraction of ans over all possible outcomes at the maximum depth using their gcd.




#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(){
    ll n; cin>>n;
    ll x = 0;
    while(n%2==0){
        n/=2;
        x++;
    }
    if(n==1){
        cout << x << "/1";
        return 0;
    }
    
    vector<int>depths;
    ll failNodes = 1;
    while(true){
        failNodes*=2;
        depths.push_back(failNodes/n);
        failNodes%=n;
        if(failNodes == 1){
            break;
        }
    }
    
    ll k=depths.size(), ans = 0;
    for(ll i=0; i<k; i++){
        if(depths[i]){
            ans+=(1ll<<(k-i-1))*(i+1);
        }
    }
    ans *= n;
    ans += k;
    
    ll b = (1ll<<k)-1;
    ll gc = __gcd(ans,b);
    ans /= gc;
    b /= gc;
    cout << ans+b*x <<"/" << b;
}




This solution functions correctly; however, since the repeating tree can reach massive depths, the datatype <tt>long long</tt> can't hold the answer.

We'll make a new data structure <tt>high</tt> to mitigate this issue, the specifics of its workings aren't of value, we just handle operations digit by digit.




#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

#define fo(i,a,b) for (int i = a; i <= b; ++i)
#define fd(i,a,b) for (int i = a; i >= b; --i)
#define fe(i,x) for (int i = g[x], y = E[i].y; i; i = E[i].l, y = E[i].y)
#define forall(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); ++i)
#define pb push_back
#define SIZE(x) ((int) (x).size())
#define MP make_pair
#define fi first
#define se second
#define UNIQUE(x) x.resize(unique(x.begin(), x.end()) - x.begin())
#define clr(a,x) memset(&a, x, sizeof(a))
#define move(a,b) memcpy(&b, &a, sizeof(a))
#define Plus(a,b) (((ll) (a) + (b)) % mo)
#define Minus(a,b) ((((ll) (a) - (b) ) % mo + mo) % mo)
#define Mul(a,b) ((ll) (a) * (b) % mo)
#define updmin(a,b) (a = min(a, b))
#define updmax(a,b) (a = max(a, b))
#define sqr(x) ((x) * (x))

const int ml=510, mo=(int)1e8;
int len(0);
struct high{
    int n, a[ml];
    high(){ clr(a, 0), n = 1; }
    high(int x){
        clr(a, 0), n = 0;
        do { a[++n] = x % mo, x /= mo; } while (x);
    }
    void init(int x){
        clr(a, 0), n = 0;
        do { a[++n] = x % mo, x /= mo; } while (x);
    }

    void cut(){
        updmax(len, n);
        while (n > 1 && !a[n]) --n;
    }

    int cmp(high p){
        if (n > p.n) return 1;
        if (n < p.n) return -1;
        fd (i, n, 1) if (a[i] > p.a[i]) return 1;
        else if (a[i] < p.a[i]) return -1;
        return 0;
    }
    void add(int d){
        int g = d; ++n;
        fo (i, 1, n){
            if (!g) break;
            g += a[i], a[i] = g % mo, g /= mo;
        }
        cut();
    }
    void mul(int d){
        ll g = 0; n += 2;
        fo (i, 1, n) g = (ll) a[i] * d + g, a[i] = g % mo, g /= mo;
        cut();
    }
    void div(int d){
        int g = 0;
        fd (i, n, 1) g = g * mo + a[i], a[i] = g / d, g %= d;
        cut();
    }
    high operator +(high p){
        high ret; ret.init(0);
        int g = 0; ret.n = max(n, p.n) + 1;
        fo (i, 1, ret.n) g += a[i] + p.a[i], ret.a[i] = g % mo, g /= mo;
        ret.cut();
        return ret;
    }
    high operator -(high p){
        high ret; ret.init(0);
        int g = 0; ret.n = n;
        fo (i, 1, ret.n){
            ret.a[i] = g + a[i] - p.a[i];
            if (ret.a[i] < 0) g = -1, ret.a[i] += mo; else g = 0;
        }
        ret.cut();
        return ret;
    }
    high operator /(high p){
        high d, R, tmp; d.init(0), R.init(0);
        d.n = n;
        fd (i, n, 1){
            R.mul(mo);
            R.add(a[i]);
            int l = 0, r = mo - 1;
            while (l <= r){
                int m = (l + r) / 2;
                high t = p;
                t.mul(m);
                int c = R.cmp(t);
                if (!c){
                    d.a[i] = m;
                    break;
                }
                if (c > 0) d.a[i] = m, l = m + 1;
                else r = m - 1;
            }
            high t = p;
            t.mul(d.a[i]);
            R = R - t;
        }
        d.cut();
        return d;
    }

    void print(){
        printf("%d", a[n]);
        fd (i, n - 1, 1) printf("%08d", a[i]);
    }
};

high GCD(high a, high b){
    int Cnt = 0, two = 0;
    while (b.n > 1 || b.a[1]){
        while (!(a.a[1] & 1) && !(b.a[1] & 1))
            a.div(2), b.div(2), ++two;
        while (!(a.a[1] & 1)) a.div(2);
        while (!(b.a[1] & 1)) b.div(2);
        if (a.cmp(b) > 0) swap(a, b);
        b = b - a;
    }
    while (two) a.mul(2);
    return a;
}



int main(){
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    ll n; cin>>n;
    ll x = 0;
    while(n%2==0){
        n/=2;
        x++;
    }
    if(n==1){
        cout << x << "/1";
        return 0;
    }

    int k = 0, m = 1;
    high ans;
    ans.init(0);
    do {
        ++k, m <<= 1;
        ans.mul(2);
        if (m > n){
            m -= n;
            ans.add(k);
        }
    } while (m > 1);

    ans.mul(n);
    ans.add(k);

    high b,gc,c;
    b.init(1);
    for(int i=0; i<k; i++) {
        b.mul(2);
    }
    b = b-*(new high(1));
    gc = GCD(ans,b);
    ans= ans/gc;
    b = b/gc;
    c = b;
    b.mul(x);
    ans = ans + b;
    ans.print();
    printf("/");
    c.print();
}




2




3




4




We'll test the corner case where we only have one knight, in that case we don't need to toss any coins as he's already the winner.

<b>Input</b>
<code>
1
</code>

<b>Expected Output</b>
<code>
0/1
</code>




1