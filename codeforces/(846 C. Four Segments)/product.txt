<b>C. Four Segments</b>

<b>time limit per test</b> \(1 \, \text{second}\)
<b>memory limit per test</b> \(256 \, \text{megabytes}\)

You are given an array of \(n\) integer numbers. Let \(\text{sum}(l, r)\) be the sum of all numbers on positions from \(l\) to \(r\) non-inclusive (\(l\)-th element is counted, \(r\)-th element is not counted). For indices \(l\) and \(r\) holds \(0 \leq l \leq r \leq n\). Indices in array are numbered from \(0\).

For example, if \(a = [-5, 3, 9, 4]\), then \(\text{sum}(0, 1) = -5\), \(\text{sum}(0, 2) = -2\), \(\text{sum}(1, 4) = 16\) and \(\text{sum}(i, i) = 0\) for each \(i\) from \(0\) to \(4\).

Choose the indices of three delimiters \(\text{delim}_0\), \(\text{delim}_1\), \(\text{delim}_2\) \((0 \leq \text{delim}_0 \leq \text{delim}_1 \leq \text{delim}_2 \leq n)\) and divide the array in such a way that the value of \(\text{res} = \text{sum}(0, \text{delim}_0) - \text{sum}(\text{delim}_0, \text{delim}_1) + \text{sum}(\text{delim}_1, \text{delim}_2) - \text{sum}(\text{delim}_2, n)\) is maximal.

Note that some of the expressions \(\text{sum}(l, r)\) can correspond to empty segments (if \(l = r\) for some segment).

<b>Input</b>
The first line contains one integer number \(n \, (1 \leq n \leq 5000)\).

The second line contains \(n\) numbers \(a_0, a_1, \dots, a_{n-1} \, (-10^9 \leq a_i \leq 10^9)\).

<b>Output</b>
Choose three indices so that the value of \(\text{res}\) is maximal. If there are multiple answers, print any of them.




Let \(i\) be \(\text{delim}_0\), \(j\) be \(\text{delim}_1\), and \(k\) be \(\text{delim}_2\).

A naive solution would be to brute force all triples \( 0\le i\le j \le k \le n\) and calculate the sum of each part using prefix sum and maximize the answer, but that would be \(O(n^3)\) which is too slow to pass.

Let \(p_i\) be the prefix sum of the array to index \(i\).

For the constrains of \(n\) we can brute force \(i\) and \(j\), so we already know the first two parts and the remaining two parts can represented using prefix sums as follows:

The third part = \(sum(j,k) = p_{k-1}-p_{j-1}\)
The fourth part = \(sum(k,n) = p_{n-1}-p_{k-1}\)

And we want to maximize the third part because we add its value and minimize the fourth part because we subtract its value. We can see that \(p_{n-1}\) and \(p_{j-1}\) are already known so the only variable is \(p_{k-1}\) it is positive in third part that needs to be maximized and negative in the fourth part that needs to be minimized, so it is best to choose the maximum \(p_{k-1}\) where \(j \le k \le n\), and we can calculate that value for each suffix and use it after brute forcing \(i\) and \(j\).

The time complexity of such solution is \(n^2\) which is enough to pass.




#include <bits/stdc++.h>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];
    
    return 0;
}






Let's calculate the prefix sum of the array and store it in array \(p\) and calculate for each suffix of the array that starts from index \(x\) the maximum \(p_{y-1}\) where \(i\le y <= n\) and store \(y\).





#include <bits/stdc++.h>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];

    vector<long long> p(n);
    p[0] = a[0];
    for (int i = 1; i < n; i++)
        p[i] = p[i - 1] + a[i];
    vector<long long> maxSuf(n + 1);
    vector<int> idx(n + 1);
    for (int i = n; i >= 0; i--) {
        maxSuf[i] = i ? p[i - 1] : 0;
        idx[i] = i;
        if (i + 1 <= n && maxSuf[i + 1] > maxSuf[i]) {
            maxSuf[i] = maxSuf[i + 1];
            idx[i] = idx[i + 1];
        }
    }

    return 0;
}




Let's brute force indices \(i\) and \(j\) where \(0 \le i \le j \le n\) and get the best \(k\) \((j \le k \le n)\) for them by where it is the index with maximum \(p_{k-1}\) that we calculated in the previous block, and maximize the answer, and update the indices \(i,j,k\) that corresponds to that answer to print them at the end.




#include <bits/stdc++.h>

using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++)
        cin >> a[i];

    vector<long long> p(n);
    p[0] = a[0];
    for (int i = 1; i < n; i++)
        p[i] = p[i - 1] + a[i];
    vector<long long> maxSuf(n + 1);
    vector<int> idx(n + 1);
    for (int i = n; i >= 0; i--) {
        maxSuf[i] = i ? p[i - 1] : 0;
        idx[i] = i;
        if (i + 1 <= n && maxSuf[i + 1] > maxSuf[i]) {
            maxSuf[i] = maxSuf[i + 1];
            idx[i] = idx[i + 1];
        }
    }

    long long ans = LLONG_MIN;
    int ansI, ansJ, ansK;
    for (int i = 0; i <= n; i++) {
        long long first = (i ? p[i - 1] : 0);
        for (int j = i; j <= n; j++) {
            long long second = (j ? p[j - 1] : 0) - (i ? p[i - 1] : 0);
            long long third = maxSuf[j] - (j ? p[j - 1] : 0);
            long long fourth = p[n - 1] - maxSuf[j];
            long long cur = first - second + third - fourth;
            if (cur > ans) {
                ans = cur;
                ansI = i, ansJ = j, ansK = idx[j];
            }
        }
    }
    cout << ansI << ' ' << ansJ << ' ' << ansK << endl;

    return 0;
}




For the third sample test the output in the problem statement makes \(res = sum(0,1) - sum(1,1) + sum(1,1) - sum(1,1) = 10000 - 0 + 0 - 0 = 10000\), and our output makes \(res = sum(0,0) - sum(0,0) + sum(0,1) - sum(1,1) = 0- 0 + 10000- 0 = 10000\).

Since both \(res\) are the same, then our output is correct.




Let's add a test case when \(n=1\) and the only value in the array is negative to see if the answer will be correct and not negative or equal to this value.

<b>Input</b>
1
-1

The expected output should make \(res=1\) by adding the value -1 to a part that should be subtracted which could be the second or the fourth part, so it should be either 0 1 0 or 0 0 0.




1
-1