<b>Levko and Array Recovery
time limit per test: 1 second
memory limit per test: 256 megabytes</b>

Levko loves array \(a_1 , a_2 , ... , a_n\), consisting of integers, very much. That is why Levko is playing with array \(a\), performing all sorts of operations with it. Each operation Levko performs is of one of two types:

• Increase all elements from \(l_i\) to \(r_i\) by \(d_i\). In other words, perform assignments \(a_j = a_j + d_i\) for all \(j\) that meet the inequation \(l_i \le j \le r_i\).
• Find the maximum of elements from \(l_i\) to \(r_i\). That is, calculate the value \(m_i = \max\limits_{j = l_i}^{r_i} a_j\).

Sadly, Levko has recently lost his array. Fortunately, Levko has records of all operations he has performed on array \(a\). Help Levko, given the operation records, find at least one suitable array. The results of all operations for the given array must coincide with the record results. Levko clearly remembers that all numbers in his array didn't exceed \(10^9\) in their absolute value, so he asks you to find such an array.

<b>Input</b>
The first line contains two integers \(n\) and \(m\) (\(1 \le n, m \le 5000\)) — the size of the array and the number of operations in Levko's records, correspondingly.

Next \(m\) lines describe the operations, the \(i\)-th line describes the \(i\)-th operation. The first integer in the \(i\)-th line is integer \(t_i\) (\(1 \le t_i \le 2\)) that describes the operation type. If \(t_i = 1\), then it is followed by three integers \(l_i\), \(r_i\) and \(d_i\) (\(1 \le l_i \le r_i \le n\), \(-10^4 \le d_i \le 10^4\)) — the description of the operation of the first type. If \(t_i = 2\), then it is followed by three integers \(l_i\), \(r_i\) and \(m_i\) (\(1 \le l_i \le r_i \le n\), \(-5 · 10^7 \le m_i \le 5 \cdot 10^7\)) — the description of the operation of the second type.

The operations are given in the order Levko performed them on his array.

<b>Output</b>
In the first line print "YES'' (without the quotes), if the solution exists and "NO'' (without the quotes) otherwise.

If the solution exists, then on the second line print \(n\) integers \(a_1 , a_2 , ... , a_n\) \((|a_i| \le 10^9)\) — the recovered array.




The most naive solution would involve trying all possible permutations of values for the array. For each permutation, we simulate the two types of operations:

• For the first operation, we loop through the range \([l_i, r_i]\) and add \(d_i\) to the elements in that range.
• For the second type of operation, we loop through the range \([l_i, r_i]\), find the maximum value, and check if it equals \(m_i\).

This solution is highly inefficient because each element in the array can take up to \(2 \times 10^9\) possible values. Hence, there are \((2 \times 10^9)^n\) different arrays, where \(n\) can be as large as \(5000\). This naive solution is computationally infeasible, and we need a far more efficient approach.

<b>To solve this problem efficiently:</b>

Let's first break down the key idea. The operations give us constraints on what the values of the array could be:

<b>• Type 1:</b> operations add some value \(d_i\) to a subarray. This suggests that we need to keep track of how much each element is incremented over time. So, we can create an array \(ds\) to store the added values \(d_i\) in the range \(l_i\) to \(r_i\), and we can simply loop from \(l_i\) to \(r_i\).

<b>• Type 2:</b> operations tell us that the maximum value in the range \([l_i, r_i]\) must be less than or equal to \(m_i\).
This means:

\( a[i] + ds[i] \leq m_i \quad \text{for all} \, l_i \leq i \leq r_i \)

This is because if \(a[i]+ds[i] > m_i\), then the maximum value in the range \([l_i, r_i]\) will never be equal to \(m_i\) and will equal this maximum value.

Therefore, \(a[i]\) must satisfy:

\( a[i] \leq m_i - ds[i] \)

This creates an upper bound on the possible values in that subarray. So, we can create an array \(a\) to hold the upper bound values in each range in the array. And we first should initialize the array \(a\) with a very high value (\(10^9\)) and then, for each operation of type 2, we loop on the range \([l_i : r_i]\) and update the upper bound in this range by the value \(m_i\).

And this approach will be \(O(n*m)\), and this time complexity will fit under the problem constraints.

Once we have constructed the array \(a\), we need to check whether it satisfies all the conditions, so we simulate the operations again using our array \(a\) and check if it achieves each operation of type 2 (i.e., the maximum value in range \([l_i : r_i]\) equals \(m_i\)).

If no violations are found, then the array \(a\) is a valid solution, and we output "YES" followed by the array.

The key idea behind this approach is that the array \(a\) represents the largest possible values that \(a\) can take, given the constraints from the Type 2 operations. If there is any valid solution, it must fit within these bounds.

Now let's implement this:




Let's first create a struct \(operation\) to hold the operation values, and then let's input the data and store the operations in a vector of \(operation\).




#include <bits/stdc++.h>
using namespace std;

struct operatoin {
    int type, l, r, d;
};

signed main() {
    int n, m;
    cin >> n >> m;
    vector<operatoin> ope(m);
    for(int i = 0; i < m; i++) {
        cin >> ope[i].type >> ope[i].l >> ope[i].r >> ope[i].d;
    }
}   




Let's then create the \(ds\) and \(a\) vectors and we set the initial values of array \(a\) by \(10^9\) as we discussed before.

Then we iterate over all operations and if this is an update operation, we update the \(ds\) array for type 1 operations, and for operation type 2, we update array \(a\) with the upper bounds in the range \([l_i:r_i]\) as we discussed before.




#include <bits/stdc++.h>
using namespace std;

struct operatoin {
    int type, l, r, d;
};

signed main() {
    int n, m;
    cin >> n >> m;
    vector<operatoin> ope(m);
    for(int i = 0; i < m; i++) {
        cin >> ope[i].type >> ope[i].l >> ope[i].r >> ope[i].d;
    }
    vector<int> ds(n+1), a(n+1, 1e9);
    for(auto &p : ope) {
        if(p.type == 1) {
            for(int i = p.l; i <= p.r; i++) {
                ds[i] += p.d;
            }
        } else {
            for(int i = p.l; i <= p.r; i++) {
                a[i] = min(a[i], p.d-ds[i]);
            }
        }
    }
}   




After creating our array \(a\) that holds the upper bounds in the range \([l_i:r_i]\), we now need to check if this array \(a\) satisfies all the conditions or not.

So we simulate the operations again on our array \(a\) as we discussed before.

We first set the \(ds\) values to zeros and then loop again over the operations. For operation type 1, we update the \(ds\) values in the range \([l_i : r_i]\). For type 2, we loop over the array \(a\) and find the maximum value in the range \([l_i:r_i]\) plus the current value of \(ds[i]\). If this maximum value is not equal to \(m_i\) (in our struct, we call it \(d\)), then there is no valid array that can achieve this, and we print "NO" and terminate the program.

If this array \(a\) satisfies all the conditions, then we print "YES" and then print this array \(a\).




#include <bits/stdc++.h>
using namespace std;

struct operatoin {
    int type, l, r, d;
};

signed main() {
    int n, m;
    cin >> n >> m;
    vector<operatoin> ope(m);
    for(int i = 0; i < m; i++) {
        cin >> ope[i].type >> ope[i].l >> ope[i].r >> ope[i].d;
    }
    vector<int> ds(n+1), a(n+1, 1e9);
    for(auto &p : ope) {
        if(p.type == 1) {
            for(int i = p.l; i <= p.r; i++) {
                ds[i] += p.d;
            }
        } else {
            for(int i = p.l; i <= p.r; i++) {
                a[i] = min(a[i], p.d-ds[i]);
            }
        }
    }
    ds = vector<int>(n+1);
    for(auto &p : ope) {
        if(p.type == 1) {
            for(int i = p.l; i <= p.r; i++) {
                ds[i] += p.d;
            }
        } else {
            int mx = INT_MIN;
            for(int i = p.l; i <= p.r; i++) {
                mx = max(mx, a[i]+ds[i]);
            }
            if(mx != p.d) {
                cout << "NO";
                return 0;
            }
        }
    }
    cout << "YES\n";
    for(int i = 1; i <= n; i++) {
        cout << a[i] << ' ';
    }
}   




4 5
1 2 3 1
2 1 2 8
2 3 4 7
1 1 3 3
2 3 4 8




4 5
1 2 3 1
2 1 2 8
2 3 4 7
1 1 3 3
2 3 4 13




Our code runs correctly against the sample test cases; however, the output array of our code in the first test case is not identical with the output of the sample test case, but this is still a correct output, and this is because:

Initial array:
\( a = [8, 7, 4, 7] \)

1. Operation Type 1: Add 1 to range \([2, 3]\)
Result: \( a = [8, 8, 5, 7] \)

2. Operation Type 2: Max in range \([1, 2]\) should be 8
<b>Valid:</b> \( \max(8, 8) = 8 \)

3. Operation Type 2: Max in range \([3, 4]\) should be 7
<b>Valid:</b> \( \max(5, 7) = 7 \)

4. Operation Type 1: Add 3 to range \([1, 3]\)
Result: \( a = [11, 11, 8, 7] \)

5. Operation Type 2: Max in range \([3, 4]\) should be 8
<b>Valid:</b> \( \max(8, 7) = 8 \)

So the array \(a\) that our code gets is correct.




Now let's test our code against some custom test cases with minimal constraints as a corner test case to check its correctness,

<b>Test Case</b>
<code>1 1
2 1 1 0</code>

<b>Expected output</b>
<code>YES
0</code>

<b>Explanation:</b> We have one element in the array and one operation.
The operation of type 2: Max in range [1, 1] is 0. Since the maximum value for the only element in the array is constrained to be 0, we set the element to 0.
Thus, the array \( a = [0] \) satisfies the given constraint.




1 1
2 1 1 0