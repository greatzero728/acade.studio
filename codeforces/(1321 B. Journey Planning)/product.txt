B. Journey Planning
time limit per test: 2 seconds
memory limit per test: 256 megabytes

Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n.

Tanya plans her journey as follows. First of all, she will choose some city c1 to start her journey. She will visit it, and after that go to some other city \(c_2>c_1\), then to some other city \(c_3>c_2\), and so on, until she chooses to end her journey in some city \(c_k>c_{k−1}\). So, the sequence of visited cities \([c_1,c_2,…,c_k]\) should be strictly increasing.

There are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value \(b_i\) associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities \(c_i\) and \(c_{i+1}\), the condition \(c_{i+1}−c_i=b_{c_i+1}−b_{c_i}\) must hold.

For example, if n=8 and b=[3,4,4,6,6,7,8,9], there are several three possible ways to plan a journey:

\(\bullet\) c=[1,2,4];
\(\bullet\) c=[3,5,6,8];
\(\bullet\) c=[7] (a journey consisting of one city is also valid).

There are some additional ways to plan a journey that are not listed above.

Tanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?

Input
The first line contains one integer \(n (1≤n≤2⋅10^5)\) — the number of cities in Berland.

The second line contains n integers \(b_1, b_2, ..., b_n (1≤b_i≤4⋅10^5)\), where \(b_i\) is the beauty value of the i-th city.

Output
Print one integer — the maximum beauty of a journey Tanya can choose.

Note
The optimal journey plan in the first example is c=[2,4,5].

The optimal journey plan in the second example is c=[1].

The optimal journey plan in the third example is c=[3,6].




\(\bullet\) We can consider all possible \(2^n\) sub-sequences of \(\{1, 2, ..., n\}\) and for each sub-sequence, we can check if this sub-sequence is a valid sequence by checking condition \(c_{k - 1} < c_k\) and \(c_{i+1}−c_i=b_{c_i+1}−b_{c_i}\) are hold.
If one sub-sequence is a valid sub-sequence, then we can maximize answer with the sum of beauty values over all visited cities.
But to implement this naive algorithm, we need \(O(2 ^ n \cdot n)\) time complexity.
However, \(n\) can be up to \(2 \cdot 10^5\), so this naive algorithm is a time limit exceed algorithm.

\(\bullet\) Let's consider about this condition: \(c_{i+1} - c_i = b_{c_i + 1} - b_{c_i}\).
This is equivalent to the following condition: \(b_{c_i} - c_i = b_{c_i + 1} - c_{i + 1}\) (we added \(b_{c_i} - c_{i + 1}\) to both sides).




Let's denote \(b_i - i\) as \(a_i\), then the condition becomes \(a_{c_i} = a_{c_{i + 1}}\).
This means that if we have a valid journey \([c_1, c_2, ..., c_k]\), then \(a_{c_1} = a_{c_2} = ... = a_{c_k}\).
Therefore, for a given value of \(a\), we can find all indices \(i\) such that \(a_i = a\), and these indices will form a valid journey.
To maximize the beauty value of the journey, we can sum up all \(b_i\) for each \(i\) with \(a_i = a\), for all possible values of \(a\).

Next, we will write the code for the input and for mapping the values of \(b_i - i\) to a sequence of indices \(i\) such that \(b_i - i = a\). 

Note that all values of \(b_i - i\) are in the range \([-n, 4 \cdot 10^5 - n]\), where n is the number of cities, and can be stored in an array or similar data structure.




#include <bits/stdc++.h>
using namespace std;

const int MAXN = 2e5 + 10;
const int MAXA = 4e5 + 10;

int n;
int b[MAXN];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> b[i];
    }

    return 0;
}




To map the values of \(b_i - i\) to a sequence of indices \(i\) such that \(b_i - i = a\), we can use a hash map where the keys are the values of \(a = b_i - i\) and the values are vectors of indices \(i\) with the given value of \(a\).
We will iterate over all cities and for each city, we will calculate the value of \(a = b_i - i\) and append index \(i\) to the corresponding vector in the hash map.
Finally, we will iterate over all vectors in the hash map and calculate the sum of \(b_i\) for each vector. The maximum of these sums will be the answer.

Let's implement this. 

We also need to take into account that all \(a = b_i - i\) are in the range \([-n, 4 \cdot 10^5 - n]\), so we can simple use an array instead of a hash map. 

This way, we can achieve \(O(n)\) time complexity. 

Next, we will write the code that will find the maximum sum of \(b_i\) for all vectors in the hash map.




#include <bits/stdc++.h>
using namespace std;

const int MAXN = 2e5 + 10;
const int MAXA = 4e5 + 10;

int n;
int b[MAXN];

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> b[i];
    }

    long long ans = 0;
    vector<long long> a(MAXA + MAXN);
    for (int i = 1; i <= n; i++) {
        a[b[i] - i + MAXN] += b[i];
    }
    for (int i = 0; i < MAXA + MAXN; i++) {
        ans = max(ans, a[i]);
    }
    cout << ans;

    return 0;
}




Let's check a custom corner case, where n and \(b_i\) are their minimum possible values: \(n = 1, b_i = 1\).
1
1
In this case, a journey consisting of one city is also valid, so the optimal array c will be {1}, and the answer should be \(b_{c_1} = b_1 = 1\).




1
1