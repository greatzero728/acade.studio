<b>B. Nastya and Scoreboard</b>
<b>time limit per test: 1 second</b>
<b>memory limit per test: 256 megabytes</b>
Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple.
Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer.

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of \(7\) segments, which can be turned on or off to display different numbers. The picture shows how all \(10\) decimal digits are displayed:

<img digit>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke <b>exactly</b> \(k\) segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly \(k\) sticks (which are off now)?

It is <b>allowed</b> that the number includes leading zeros.

<b>Input</b>
The first line contains integer \(n\) \((1 \leq n \leq 2000)\) — the number of digits on scoreboard and \(k\) \((0 \leq k \leq 2000)\) — the number of segments that stopped working.

The next \(n\) lines contain one binary string of length \(7\), the \(i\)-th of which encodes the \(i\)-th digit of the scoreboard.

Each digit on the scoreboard consists of \(7\) segments. We number them, as in the picture below, and let the \(i\)-th place of the binary string be \(0\) if the \(i\)-th stick is not glowing and \(1\) if it is glowing. Then a binary string of length \(7\) will specify which segments are glowing now.

<img digit2>

Thus, the sequences ``1110111'', ``0010010'', ``1011101'', ``1011011'', ``0111010'', ``1101011'', ``1101111'', ``1010010'', ``1111111'', ``1111011'' encode in sequence all digits from \(0\) to \(9\) inclusive.

<b>Output</b>
Output a single number consisting of \(n\) digits — the maximum number that can be obtained if you turn on exactly \(k\) sticks or \(-1\), if it is impossible to turn on exactly \(k\) sticks so that a correct number appears on the scoreboard digits.

<b>Note</b>
In the first test, we are obliged to include all \(7\) sticks and get one \(8\) digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For \(5\) of additionally included sticks, you can get the numbers \(07\), \(18\), \(34\), \(43\), \(70\), \(79\), \(81\) and \(97\), of which we choose the maximum — \(97\).

In the third test, it is impossible to turn on exactly \(5\) sticks so that a sequence of numbers appears on the scoreboard.




The naive solution is try all numbers and pick the maximum one that can be obtained if you turn on exactly \(k\) sticks. But this solution will not work because it is very slow because of its big time complexity.




To solve this problem, we can use a dynamic programming approach. We can create a 2D array dp where \(dp_{i, j}\) represents whether it is possible to turn on exactly j sticks in the suffix of the array from index i to the end, and get a valid sequence of digits.

We can initialize the dp array by setting all values to false, and then update the values based on the possible transitions from one digit to another. We can use the fact that a digit can be represented by a binary string of length 7, where each bit corresponds to a segment of the digit.

We can iterate over the array from left to right, and for each position, we can try to turn on each possible digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can update the dp array accordingly.

Once we have filled in the dp array, we can use it to find the maximum possible number of digits that can be obtained by turning on exactly k sticks.

We will start with an empty code, and then add to it step by step.

Here is a description of the code we will write:

\(\bullet\) We will start by reading the input and initializing the dp array.
\(\bullet\) We will then iterate over the array and update the dp values based on the possible transitions from one digit to another.
\(\bullet\) Finally, we will use the dp array to find the maximum possible number of digits that can be obtained by turning on exactly k sticks.

Let's start by writing the code to read the input and initialize the dp array.




#include <bits/stdc++.h>

using namespace std ;

const int MAX = 2000 + 10 ;

int arr[MAX] , mask[20] = {119, 18, 93, 91, 58, 107, 111, 82, 127, 123} , cost[MAX][20] ;
int n , k ;
int dp[MAX][MAX] ;

int main()
{
	memset(dp , -1 , sizeof(dp)) ;
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>n>>k ;
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 6 ; j >= 0 ; --j)
		{
			char c ;
			cin>>c ;
			if(c == '1')
				arr[i] += (1 << j) ;
		}
	}
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 9 ; j >= 0 ; --j)
		{
			int x = (arr[i] & mask[j]) ;
			cost[i][j] = -1 ;
			if(x != arr[i])
				continue ;
			cost[i][j] =  __builtin_popcount(mask[j]) - __builtin_popcount(arr[i]) ;
		}
	}
	return 0 ;
}




Now that we have initialized the dp array and read the input, we need to fill in the dp array based on the possible transitions from one digit to another. We can do this by iterating over the array and for each position, trying to turn on each possible digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can update the dp array accordingly.

We can use a recursive function to fill in the dp array. The function should take two parameters: the current index and the number of sticks that need to be turned on. The function should return true if it is possible to turn on exactly the required number of sticks, and false otherwise.

We can also use a loop to fill in the dp array. The loop should iterate over the array and for each position, try to turn on each possible digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can update the dp array accordingly.

Let's use a recursive function to fill in the dp array. We can call this function solve.

The solve function should take two parameters: idx and rem. The idx parameter represents the current index, and the rem parameter represents the number of sticks that need to be turned on.

We can use a loop to iterate over all possible digits and try to turn on each digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can recursively call the solve function with the updated index and number of sticks.

We can also use a base case to stop the recursion. If the number of sticks that need to be turned on is 0, we can return true.

Let's implement the solve function and fill in the dp array.




#include <bits/stdc++.h>

using namespace std ;

const int MAX = 2000 + 10 ;

int arr[MAX] , mask[20] = {119, 18, 93, 91, 58, 107, 111, 82, 127, 123} , cost[MAX][20] ;
int n , k ;
int dp[MAX][MAX] ;

bool solve(int idx , int rem)
{
	if(rem < 0)
		return 0 ;
	if(idx == n)
		return (rem == 0) ;
	int &ret = dp[idx][rem] ;
	if(ret != -1)
		return ret ;
	ret = 0 ;
	for(int j = 9 ; j >= 0 ; --j)
	{
		if(cost[idx][j] == -1)
			continue ;
		ret |= solve(idx+1 , rem - cost[idx][j]) ;
	}
	return ret ;
}

int main()
{
	memset(dp , -1 , sizeof(dp)) ;
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>n>>k ;
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 6 ; j >= 0 ; --j)
		{
			char c ;
			cin>>c ;
			if(c == '1')
				arr[i] += (1 << j) ;
		}
	}
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 9 ; j >= 0 ; --j)
		{
			int x = (arr[i] & mask[j]) ;
			cost[i][j] = -1 ;
			if(x != arr[i])
				continue ;
			cost[i][j] =  __builtin_popcount(mask[j]) - __builtin_popcount(arr[i]) ;
		}
	}
	bool ans = solve(0 , k) ;
	if(ans == 0)
		return cout<<-1<<"\n" , 0 ;
	return 0 ;
}




Now that we have the dp array filled, we need to use it to find the maximum possible number of digits that can be obtained by turning on exactly k sticks. We can do this by iterating over the array and for each position, trying to turn on each possible digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can check if it is possible to turn on exactly k sticks by checking the dp array.

We can use a function to find the maximum possible number of digits. The function should take no parameters and return the maximum possible number of digits.

We can also use a loop to iterate over the array and for each position, try to turn on each possible digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can check if it is possible to turn on exactly k sticks by checking the dp array.

Let's implement the function to find the maximum possible number of digits.

We need to add a function called build that will be used to construct the maximum possible number of digits. This function will be called after we have filled the dp array.

The build function should take two parameters: idx and rem. The idx parameter represents the current index, and the rem parameter represents the number of sticks that need to be turned on.

We can use a loop to iterate over all possible digits and try to turn on each digit by setting the corresponding bits in the binary string. If the resulting binary string is a valid digit, we can recursively call the build function with the updated index and number of sticks.

We can also use a base case to stop the recursion. If the number of sticks that need to be turned on is 0, we can return.

Let's implement the build function.





#include <bits/stdc++.h>

using namespace std ;

const int MAX = 2000 + 10 ;

int arr[MAX] , mask[20] = {119, 18, 93, 91, 58, 107, 111, 82, 127, 123} , cost[MAX][20] ;
int n , k ;
int dp[MAX][MAX] ;

bool solve(int idx , int rem)
{
	if(rem < 0)
		return 0 ;
	if(idx == n)
		return (rem == 0) ;
	int &ret = dp[idx][rem] ;
	if(ret != -1)
		return ret ;
	ret = 0 ;
	for(int j = 9 ; j >= 0 ; --j)
	{
		if(cost[idx][j] == -1)
			continue ;
		ret |= solve(idx+1 , rem - cost[idx][j]) ;
	}
	return ret ;
}

void build(int idx , int rem)
{
	if(idx == n)
		return ;
	for(int j = 9 ; j >= 0 ; --j)
	{
		if(cost[idx][j] == -1)
			continue ;
		if(solve(idx+1 , rem - cost[idx][j]) == true)
		{
			cout<<j ;
			build(idx+1 , rem - cost[idx][j]) ;
			return ;
		}
	}
	return ;
}

int main()
{
	memset(dp , -1 , sizeof(dp)) ;
	ios_base::sync_with_stdio(0) ;
	cin.tie(0) ;
	cin>>n>>k ;
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 6 ; j >= 0 ; --j)
		{
			char c ;
			cin>>c ;
			if(c == '1')
				arr[i] += (1 << j) ;
		}
	}
	for(int i = 0 ; i < n ; ++i)
	{
		for(int j = 9 ; j >= 0 ; --j)
		{
			int x = (arr[i] & mask[j]) ;
			cost[i][j] = -1 ;
			if(x != arr[i])
				continue ;
			cost[i][j] =  __builtin_popcount(mask[j]) - __builtin_popcount(arr[i]) ;
		}
	}
	bool ans = solve(0 , k) ;
	if(ans == 0)
		return cout<<-1<<"\n" , 0 ;
	build(0 , k) ;
	return 0 ;
}




Let’s try a custom test withe the minimal constrains to check if our code is correct.

<b>Test:</b>
<code>1 0
0000000
</code>

<b>Expected answer</b>
<code>-1</code>

Why? because we can't turn on 0 sticks on the scoreboard and get a valid number if the scoreboard is empty.





1 0
0000000