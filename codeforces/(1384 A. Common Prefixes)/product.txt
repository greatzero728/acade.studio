<b>A. Common Prefixes</b>
time limit per test: 1 second
memory limit per test: 256 megabytes

The length of the <b>longest common prefix</b> of two strings \(s=s_1s_2…s_n\) and \(t=t_1t_2…t_m\) is defined as the maximum integer \(k (0≤k≤min(n,m))\) such that \(s_1s_2…s_k\) equals \(t_1t_2…t_k\).

Koa the Koala initially has \(n+1\) strings \(s_1,s_2,…,s_{n+1}\).

For each \(i (1≤i≤n)\) she calculated \(a_i\) — the length of the <b>longest common prefix</b> of \(s_i\) and \(s_{i+1}\).

Several days later Koa found these numbers, but she couldn't remember the strings.

So Koa would like to find some strings \(s_1,s_2,…,s_{n+1}\) which would have generated numbers \(a_1,a_2,…,a_n\). Can you help her?

If there are many answers print any. We can show that answer always exists for the given constraints.

<b>Input</b>
Each test contains multiple test cases. The first line contains \(t (1≤t≤100)\) — the number of test cases. Description of the test cases follows.

The first line of each test case contains a single integer \(n (1≤n≤100)\) — the number of elements in the list \(a\).

The second line of each test case contains \(n\) integers \(a_1,a_2,…,a_n (0≤a_i≤50)\) — the elements of \(a\).

It is guaranteed that the sum of \(n\) over all test cases does not exceed 100.

<b>Output</b>
For each test case:

Output \(n+1\) lines. In the \(i\)-th line print string \(s_i (1≤|s_i|≤200)\), consisting of <b>lowercase Latin letters</b>. Length of the longest common prefix of strings \(s_i\) and \(s_{i+1}\) has to be equal to \(a_i\).

If there are many answers print any. We can show that answer always exists for the given constraints.

<b>Note</b>
In the 1-st test case one of the possible answers is \(s=[aeren,ari,arousal,around,ari]\).

Lengths of longest common prefixes are:

Between \(\textcolor{red}aeren\) and \(\textcolor{red}{a}ri →1\)
Between \(\textcolor{red}{ar}i\) and \(\textcolor{red}{ar}ousal →2\)
Between \(\textcolor{red}{arou}sal\) and \(\textcolor{red}{arou}nd →4\)
Between \(\textcolor{red}{ar}ound\) and \(\textcolor{red}{ar}i →2\)





To solve this problem, we need to find a way to generate strings \(s_1, s_2, ..., s_{n+1}\) that satisfy the given constraints on the lengths of the longest common prefixes. We can generate the \(s_i\) step by step in the order of : \(s_1, s_2, ..., s_{n + 1}\).
\(\bullet\) Without loss of generality, we can assume that \(s_1\) is "aaa...a". (Here, the length of \(s_1\) is sum of (the maximum value of LCP array \(a\)) and 1).
\(\bullet\) To achieve \(LCP(s_1, s_2) = a_1\), we can set \(s_2\) to be equal to \(s_1\) and then replace the character at \(s_2[a_1]\) with another character.
If we do like above, the \(LCP(s_1, s_2)\) will be \(a_1\), because \(s_1[0] = s_2[0], s_1[1] = s_2[1], ..., s_1[a_1 - 1] = s_2[a_1 - 1], s_1[a_1] \neq s_2[a_1]\).
\(\bullet\) To achieve \(LCP(s_2, s_3) = a_2\), we can set \(s_3\) to be equal to \(s_2\) and then replace the character at \(s_3[a_2]\) with another character.
If we do like above, the \(LCP(s_2, s_3)\) will be \(a_2\), because \(s_2[0] = s_3[0], s_2[1] = s_3[1], ..., s_2[a_2 - 1] = s_3[a_2 - 1], s_2[a_2] \neq s_3[a_2]\).
\(\bullet\) In the same way, we can build \(s\) sequentially.





#include <bits/stdc++.h>

using namespace std;

const int NN = 121;

int a[NN];

int main() {
    int T, N;
    cin >> T;

    while (T--) {
        cin >> N;
        for(int i = 0; i < N; i++) cin>>a[i];
    }

    return 0;
}





We have already established that \(s_1\) is "aaa...a". (Here, the length of \(s_1\) is sum of (the maximum value of LCP array \(a\)) and 1).





#include <bits/stdc++.h>

using namespace std;

const int NN = 121;

int a[NN];

int main() {
    int T, N;
    cin >> T;

    while (T--) {
        cin >> N;
        for(int i = 0; i < N; i++) cin>>a[i];
        
        string S(*max_element(a, a + N) + 1, 'a');
        
        cout<<S<<endl;
    }

    return 0;
}





Let's construct \(s_i\) sequentially from its preceding string \(s_{i - 1}\) and \(a_{i - 1}\). (\(a_{i - 1}\) represents the LCP value between \(s_{i - 1}\) and \(s_i\))
We can consider \(s_i\) as just \(s_{i - 1}\), and then we can swap \(s_i[a_{i - 1}]\) with another value to ensure that \(LCP(s_{i - 1}, s_i) = a_{i - 1}\).





#include <bits/stdc++.h>

using namespace std;

const int NN = 121;

int a[NN];

int main() {
    int T, N;
    cin >> T;

    while (T--) {
        cin >> N;
        for(int i = 0; i < N; i++) cin>>a[i];
        
        string S(*max_element(a, a + N) + 1, 'a');
        
        cout<<S<<endl;
        for(int i = 0; i < N; i++) {
            S[a[i]] = (S[a[i]] == 'a') ? 'b' : 'a';
            cout << S << endl;
        }
    }

    return 0;
}





The output is different with the sample output. Let's check my output is correct.

\(\bullet\) 1-st test case:
<b>Input</b>
<code>
4
1 2 4 2
</code>
<b>Output</b>
<code>
aaaaa
abaaa
abbaa
abbab
abaab
</code>
The answer I found is \(s = [aaaaa, abaaa, abbaa, abbab, abaab]\).
Lengths of longest common prefixes are:
Between \(\textcolor{red}{a}aaaa\) and \(\textcolor{red}{a}baaa→1\)
Between \(\textcolor{red}{ab}aaa\) and \(\textcolor{red}{ab}baa→2\)
Between \(\textcolor{red}{abba}a\) and \(\textcolor{red}{abba}b→4\)
Between \(\textcolor{red}{ab}bab\) and \(\textcolor{red}{ab}aab→2\)
So my output is correct for 1-st test case.

\(\bullet\) 2-nd test case:
<b>Input</b>
<code>
2
5 3
</code>
<b>Output</b>
<code>
aaaaaa
aaaaab
aaabab
</code>
The answer I found is \(s = [aaaaaa, aaaaab, aaabab]\).
Lengths of longest common prefixes are:
Between \(\textcolor{red}{aaaaa}a\) and \(\textcolor{red}{aaaaa}b→5\)
Between \(\textcolor{red}{aaa}aab\) and \(\textcolor{red}{aaa}bab→3\)
So my output is correct for 2-nd test case.

\(\bullet\) 3-rd test case:
<b>Input</b>
<code>
3
1 3 1
</code>
<b>Output</b>
<code>
aaaa
abaa
abab
aaab
</code>
The answer I found is \(s = [aaaa, abaa, abab, aaab]\).
Lengths of longest common prefixes are:
Between \(\textcolor{red}{a}aaa\) and \(\textcolor{red}{a}baa→1\)
Between \(\textcolor{red}{aba}a\) and \(\textcolor{red}{aba}b→3\)
Between \(\textcolor{red}{a}bab\) and \(\textcolor{red}{a}aab→1\)
So my output is correct for 3-rd test case.

\(\bullet\) 4-th test case:
<b>Input</b>
<code>
3
0 0 0
</code>
<b>Output</b>
<code>
a
b
a
b
</code>
The answer I found is \(s = [a, b, a, b]\).
Lengths of longest common prefixes are:
Between \(a\) and \(b →0\)
Between \(b\) and \(a→0\)
Between \(a\) and \(b→0\)
So my output is correct for 4-st test case.

So my answer is correct for a given sample test case.





Let's add a custom corner case where \(n\) takes its minimum value: \(n = 1\).
<b>Input</b>
<code>
1
1
3
</code>
In this case, we need to construct \(s_1\) and \(s_2\) such that \(LCP(s_1, s_2) = 3\). According to my solution, \(s_1\) is "aaaa".
And to make \(s_2\), we copied \(s_1\) and change \(s_2[a_1]\) into another value: 'b', so \(s_2\) will be "aaab".





1
1
3