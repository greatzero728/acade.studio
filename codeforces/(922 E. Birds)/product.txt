Problem Statement:
<b>Birds</b>
time limit per test: 1 second
memory limit per test: 256 megabytes

Apart from plush toys, Imp is a huge fan of little yellow birds!
<img rg>
To summon birds, Imp needs strong magic. There are n trees in a row on an alley in a park, there is a nest on each of the trees. In the i-th nest there are \(c_i\) birds; to summon one bird from this nest Imp needs to stay under this tree and it costs him \(cost_i\) points of mana. However, for each bird summoned, Imp increases his mana capacity by B points. Imp summons birds one by one, he can summon any number from 0 to \(c_i\) birds from the i-th nest.

Initially Imp stands under the first tree and has W points of mana, and his mana capacity equals W as well. He can only go forward, and each time he moves from a tree to the next one, he restores X points of mana (but it can't exceed his current mana capacity). Moving only forward, what is the maximum number of birds Imp can summon?

<b>Input</b>
The first line contains four integers n, W, B, X \((1 ≤ n ≤ 10^3, 0 ≤ W, B, X ≤ 10^9)\) — the number of trees, the initial points of mana, the number of points the mana capacity increases after a bird is summoned, and the number of points restored when Imp moves from a tree to the next one.

The second line contains n integers \(c_1, c_2, ..., c_n (0 ≤ c_i ≤ 10^4)\) — where \(c_i\) is the number of birds living in the i-th nest. It is guaranteed that \(\sum_{i=1}^{n} c_i \leq 10^4 \).

The third line contains n integers \(cost_1, cost_2, ..., cost_n (0 ≤ cost_i ≤ 10^9)\), where \(cost_i\) is the mana cost to summon a bird from the i-th nest.

<b>Output</b>
Print a single integer — the maximum number of birds Imp can summon.

<b>Note</b>
In the first sample base amount of Imp's mana is equal to 12 (with maximum capacity also equal to 12). After he summons two birds from the first nest, he loses 8 mana points, although his maximum capacity will not increase (since B = 0). After this step his mana will be 4 of 12; during the move you will replenish 4 mana points, and hence own 8 mana out of 12 possible. Now it's optimal to take 4 birds from the second nest and spend 8 mana. The final answer will be — 6.

In the second sample the base amount of mana is equal to 1000. The right choice will be to simply pick all birds from the last nest. Note that Imp's mana doesn't restore while moving because it's initially full.





When approaching this complex problem, the first idea that may come to mind is using a simple greedy strategy: move from one tree to the next, summoning as many birds as possible from each nest while ensuring Imp's mana never drops below zero. However, this rudimentary approach fails to maximize the number of birds summoned since it neglects how mana restores between trees. The issue demands a more nuanced solution due to mana fluctuating with each summoned avian and traversed arboreal element.

Let us explore a more sophisticated methodology. We could employ dynamic programming to methodically retain the most propitious situation upon inspecting each tree and quantity of birds summoned hitherto. The concept is to tabulate the maximum mana remaining after conjuring a specific number of birds from all trees up to a designated point. We can accomplish this by maintaining a table where each entry represents the foremost mana leftover after summoning a definite number of birds up to a given tree.

We initiate with Imp situated under the first tree with his initial mana, \(W\). For each bird he summons, he diminishes some mana, but his mana capacity can burgeon by \(B\) points per avian. As he progresses from one tree to the next, his mana partially replenishes by \(X\) points, but this restoration is limited by his current maximum mana capacity.

To actualize this, we can initialize an array where the base case relates to no birds being invoked and possessing all of the original mana available. We iterate over each tree and ponder how many birds we can summon from that tree. For every valid scenario (where the mana doesn’t become negative), we update our table by considering the cost of summoning birds and the potential mana replenishment from moving to the subsequent tree. The objective is to methodically track the maximum number of birds we can summon, ensuring Imp’s mana stays non-negative.





#include <bits/stdc++.h>
using namespace std;

const int MAXN = 10005;

int n, W, B, X;
int id[MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
}





After reading the number of trees, the initial mana, the mana capacity increase per bird, and the mana restoration per move, we now need to read the cost associated with summoning birds from each nest. These costs are critical because they will determine how many birds we can afford to summon from each tree, depending on how much mana Imp has left. By storing these costs, we are laying the groundwork for how we will later decide whether it's worth summoning more birds from a specific tree or moving on to the next tree.





#include <bits/stdc++.h>
using namespace std;

const int MAXN = 10005;

int n, W, B, X;
int cost[MAXN], id[MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
    
    for (int i = 0; i < n; i++) {
        cin >> cost[i];
    }
}





Next, we need to initialize our dynamic programming (DP) table. This table will help us keep track of the maximum mana remaining after summoning a certain number of birds up to a given tree. Initially, we set all values to negative infinity, representing impossible states, except for the starting point where no birds have been summoned and Imp has all his initial mana. This setup is essential because it allows us to systematically explore all possible numbers of birds that can be summoned while ensuring that we don't consider any invalid states.





#include <bits/stdc++.h>
using namespace std;

const int MAXN = 10005;

int n, W, B, X;
int cost[MAXN], id[MAXN];
long long dp[2][MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
    
    for (int i = 0; i < n; i++) {
        cin >> cost[i];
    }
    
    fill(&dp[0][0], &dp[0][0] + 2 * MAXN, -INF);
    dp[0][0] = W;
    int cur = 0;
}





Now, let's move on to the main logic where we iterate over each bird one by one. For each bird, we consider all possible scenarios—how many birds have been summoned before this point, how much mana is left, and whether it’s feasible to summon another bird from the current tree. We carefully update the DP table based on these considerations. The idea here is to determine the best possible scenario for each number of birds summoned so far, taking into account the mana costs and potential mana restoration from moving to the next tree.





#include <bits/stdc++.h>
using namespace std;

const int MAXN = 10005;

int n, W, B, X;
int cost[MAXN], id[MAXN];
long long dp[2][MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
    
    for (int i = 0; i < n; i++) {
        cin >> cost[i];
    }
    
    fill(&dp[0][0], &dp[0][0] + 2 * MAXN, -INF);
    dp[0][0] = W;
    int cur = 0;
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= i; j++) {
            if (dp[cur][j] >= 0) {
                long long curcap = W + (long long)j * B;
                long long val = min(dp[cur][j], curcap);
                long long add = (i + 1 < m) ? (long long)(id[i + 1] - id[i]) * X : 0;

}





As we continue this process, we need to handle two main cases. First, we need to consider what happens if we don't summon an additional bird from the current tree. In this case, we simply move to the next state without any changes to the number of birds summoned, but with potential mana restoration if we move to the next tree. The second case is when we do decide to summon another bird. Here, we subtract the mana cost and then update our DP table to reflect the new state. This dual consideration ensures that we’re always choosing the best option between summoning a bird or conserving mana for the future.





#include <bits/stdc++.h>
using namespace std;

const long long INF = 1e18;
const int MAXN = 10005;

int n, W, B, X;
int cost[MAXN], id[MAXN];
long long dp[2][MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
    
    for (int i = 0; i < n; i++) {
        cin >> cost[i];
    }
    
    fill(&dp[0][0], &dp[0][0] + 2 * MAXN, -INF);
    dp[0][0] = W;
    int cur = 0;
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= i; j++) {
            if (dp[cur][j] >= 0) {
                long long curcap = W + (long long)j * B;
                long long val = min(dp[cur][j], curcap);
                long long add = (i + 1 < m) ? (long long)(id[i + 1] - id[i]) * X : 0;
                
                dp[1 - cur][j] = max(dp[1 - cur][j], val + add);
                if (cost[id[i]] <= val) {
                    dp[1 - cur][j + 1] = max(dp[1 - cur][j + 1], val - cost[id[i]] + add);
                }
                dp[cur][j] = -INF;
            }
        }
        cur = 1 - cur;
    }

}





Finally, after we've processed all the trees and all possible numbers of birds that can be summoned, we need to determine the maximum number of birds that Imp can actually summon without running out of mana. This is simply a matter of finding the highest number of birds for which the corresponding DP state is valid, meaning Imp has non-negative mana left. By doing this, we conclude the process, ensuring that we have explored all possible ways of summoning birds and found the optimal solution.






#include <bits/stdc++.h>
using namespace std;

const long long INF = 1e18;
const int MAXN = 10005;

int n, W, B, X;
int cost[MAXN], id[MAXN];
long long dp[2][MAXN];

int main() {
    cin >> n >> W >> B >> X;
    int m = 0;

    for (int i = 0; i < n; i++) {
        int cap; 
        cin >> cap;
        while (cap--) {
            id[m++] = i;
        }
    }
    
    for (int i = 0; i < n; i++) {
        cin >> cost[i];
    }
    
    fill(&dp[0][0], &dp[0][0] + 2 * MAXN, -INF);
    dp[0][0] = W;
    int cur = 0;
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j <= i; j++) {
            if (dp[cur][j] >= 0) {
                long long curcap = W + (long long)j * B;
                long long val = min(dp[cur][j], curcap);
                long long add = (i + 1 < m) ? (long long)(id[i + 1] - id[i]) * X : 0;
                
                dp[1 - cur][j] = max(dp[1 - cur][j], val + add);
                if (cost[id[i]] <= val) {
                    dp[1 - cur][j + 1] = max(dp[1 - cur][j + 1], val - cost[id[i]] + add);
                }
                dp[cur][j] = -INF;
            }
        }
        cur = 1 - cur;
    }
    
    int tot = m;
    while (dp[cur][tot] < 0) {
        tot--;
    }

    cout << tot << endl;

}





Our solution passed the samples. Let's have a test case where we will have small random inputs according to the constraints. This will help us check our solution's strength against corner cases.
Let's have,
<code>
4 10 2 3
2 3 1 4
4 2 3 1
</code>

Imp starts with 10 mana and can summon birds from four trees. From the first tree, he can summon 2 birds at a cost of 4 mana each, leaving him with 2 mana. Moving to the second tree, his mana is restored by 3 points (up to 5), allowing him to summon 3 birds at 2 mana each, leaving him with 1 mana. At the third tree, he can summon 1 bird at 3 mana, but since this would deplete his mana, he chooses not to summon here. Moving to the fourth tree, his mana restores by another 3 points (up to 4), and he can summon all 4 birds for 1 mana each. In total, Imp summons 9 birds.

Hence, Our program should have the output as follows,
<code>
9
</code>





4 10 2 3
2 3 1 4
4 2 3 1