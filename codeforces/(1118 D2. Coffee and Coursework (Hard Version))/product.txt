<b>D2. Coffee and Coursework (Hard Version)</b>
time limit per test: 2.5 seconds
memory limit per test: 256 megabytes

Polycarp has to write a coursework. The coursework consists of \(m\) pages.

Polycarp also has \(n\) cups of coffee. The coffee in the \(i\)-th cup Polycarp has \(a_i\) caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in any order. Polycarp drinks each cup instantly and completely (i.e. he cannot split any cup into several days).

Surely, courseworks are not being written in a single day (in a perfect world of Berland, at least).

Let's consider some day of Polycarp's work. Consider Polycarp drinks \(k\) cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are \(a_{i_1},a_{i_2},…,a_{i_k}\). Then the first cup he drinks gives him energy to write \(a_{i_1}\) pages of coursework, the second cup gives him energy to write \(max(0,a_{i_2}−1)\) pages, the third cup gives him energy to write \(max(0,a_{i_3}−2)\) pages, ..., the \(k\)-th cup gives him energy to write \(max(0,a_{i_k}−k+1)\) pages.

If Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.

Polycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.

<b>Input</b>
The first line of the input contains two integers \(n\) and \(m (1≤n≤2⋅10^5, 1≤m≤10^9)\) — the number of cups of coffee and the number of pages in the coursework.

The second line of the input contains \(n\) integers \(a_1,a_2,…,a_n (1≤a_i≤10^9)\), where \(a_i\) is the caffeine dosage of coffee in the \(i\)-th cup.

<b>Output</b>
If it is impossible to write the coursework, print -1. Otherwise print the minimum number of days Polycarp needs to do it.

<b>Note</b>
In the first example Polycarp can drink fourth cup during first day (and write 1 page), first and second cups during second day (and write 2+(3−1)=4 pages), fifth cup during the third day (and write 2 pages) and third cup during the fourth day (and write 1 page) so the answer is 4. It is obvious that there is no way to write the coursework in three or less days.

In the second example Polycarp can drink third, fourth and second cups during first day (and write 4+(2−1)+(3−2)=6 pages) and sixth cup during second day (and write 4 pages) so the answer is 2. It is obvious that Polycarp cannot write the whole coursework in one day in this test.

In the third example Polycarp can drink all cups of coffee during first day and write 5+(5−1)+(5−2)+(5−3)+(5−4)=15 pages of coursework.

In the fourth example Polycarp cannot drink all cups during first day and should drink one of them during the second day. So during first day he will write 5+(5−1)+(5−2)+(5−3)=14 pages of coursework and during second day he will write 5 pages of coursework. This is enough to complete it.

In the fifth example Polycarp cannot write the whole coursework at all, even if he will drink one cup of coffee during each day, so the answer is -1.





Let's consider the naive approach to solving this problem.
Each day, we first determine the number of coffees to drink, which has a time complexity of \(O(n)\).
After determining the number of coffees, we then identify the corresponding coffee list for the current day, resulting in a total time complexity of \(O(n!)\) across all coffees.
With this approach, Polycarp completes the task by drinking the coffees, and if he finishes, we minimize the answer for the current day.
After checking all possible options, if the answer hasn't been updated, we print -1; otherwise, we print the answer.
However, this naive approach is too slow, as \(n \leq 2 \cdot 10^5\), which leads to a time limit exceeded error.





We need to find a way to optimize the solution to avoid the time limit exceeded error.
One possible approach is to use a binary search to find the minimum number of days required to complete the coursework.
We can start by sorting the coffee list in descending order, which will allow us to maximize the number of pages written per day.
Then, we can use a binary search to find the minimum number of days required to complete the coursework.
The binary search will involve finding the middle value of the range of possible days and checking if it is possible to complete the coursework in that many days.
If it is possible, we update the upper bound of the range; otherwise, we update the lower bound.
We continue this process until the range is reduced to a single value, which will be the minimum number of days required to complete the coursework.
This approach has a time complexity of \(O(n \log n)\), which should be efficient enough to solve the problem within the given time limit.





#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }
    sort(a.rbegin(), a.rend());
    int l = 1, r = n + 1;
    while (l < r) {
        int mid = (l + r) / 2;
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += max(0, a[i] - i / mid);
        }
        if (sum >= m) {
            r = mid;
        } else {
            l = mid + 1;
        }
    }
    if (l > n) {
        cout << -1 << endl;
    } else {
        cout << l << endl;
    }
    return 0;
}





Let's check a custom corner case, where \(n, m, a_i\) are their minimum possible values: \(n = m = a_i = 1\).
<b>Input</b>
<code>
1 1
1
</code>
In this case, \(a_1 = 1\) and the number of page is \(m = 1\) so we can finish the task in the first day only drink the first coffee.
So in this case the answer will be 1.





1 1
1