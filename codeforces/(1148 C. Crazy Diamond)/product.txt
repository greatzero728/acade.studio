<b>Crazy Diamond</b>
time limit per test: 3 seconds
memory limit per test: 256 megabytes

You are given a permutation \(p\) of integers from \(1\) to \(n\), where \(n\) is an even number.

Your goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:

take two indices \(i\) and \(j\) such that \(2⋅|i−j|≥n\) and swap \(p_i\) and \(p_j\).

There is <b>no need to minimize</b> the number of operations, however you should use no more than \(5⋅n\) operations. One can show that it is always possible to do that.

<b>Input</b>
The first line contains a single integer \(n \space (2≤n≤3⋅10^5, \space n\) is even) — the length of the permutation.

The second line contains \(n\) distinct integers \(p_1,p_2,…,p_n (1≤p_i≤n)\) — the given permutation.

<b>Output</b>
On the first line print \(m \space (0≤m≤5⋅n)\) — the number of swaps to perform.

Each of the following \(m\) lines should contain integers \(a_i,b_i \space (1≤a_i,b_i≤n, |a_i−b_i|≥\frac{n}{2})\) — the indices that should be swapped in the corresponding swap.

Note that there is no need to minimize the number of operations. We can show that an answer always exists.

<b>Note</b>
In the first example, when one swap elements on positions \(1\) and \(2\), the array becomes sorted.

In the second example, pay attention that there is no need to minimize number of swaps.

In the third example, after swapping elements on positions \(1\) and \(5\) the array becomes: \([4,5,3,1,2,6]\). After swapping elements on positions \(2\) and \(5\) the array becomes \([4,2,3,1,5,6]\) and finally after swapping elements on positions \(1\) and \(4\) the array becomes sorted: \([1,2,3,4,5,6]\).





as it is hard to find a naive solution for this problem, Let's think about that we want for every element from \(1\) to \(n\) in our permutation to be in its correct position so the first idea to come to mind is that we will swap the position of current element \(i\) with the element in the position \(i\) it is true if and only if the difference between the two position is greater than or equal to \(\frac{n}{2}\), So what about if the difference is less than \(\frac{n}{2}\) we want to use a temporary position which the difference between it and the desired position is \( > = \frac{n}{2}\) and this position can be \(n\) or \(1\) because these positions are the first and last positions in the array so for example if i want to put some element which is in position \(i\) to another position \(j\) first check \(i-j>=\frac{n}{2}\) if not i try to put \(i\) to position \(n\) if it is not applicable then i put it on position \(1\) and then check the difference between \(1\) and \(j\) if it is \(>= \frac{n}{2}\) then swap them else I swap \(1\) and \(n\) then swap \(n\) and \( j\), But it remains to restore the positions that we used to \(swap(i,j)\) and we can do it with the same approach when we used them to \(swap(i,j\)) and this gives us 5 operations as a worst case scenario to put an element in its correct position.






So first we will take the input and for every element we will save its position.






#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];


int main() {
    
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }

 

    return 0;
}






Then we will loop on all the elements and for every element that not in its correct position we will do the swap operation.






#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];


int main() {
    
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }

    
     for (int i = 1; i <= n; ++i) {
        if (a[i] != i) {
            // we will do the swap operation
        }
    }
 

    return 0;
}





No we will implement the function \(swap\_operation\) which we will give it the two positions that we want to swap and what the function will do is: first it takes \(i,j\) positions and make sure that \(j > i\) and if the difference between \( j-i>=\frac{n}{2}\) then we will swap them safely and return and we will swap the position by another function lets call it \(doSwap\) and this function will just swap these elements in the two arrays \(a\) and \(pos\) and we will save this operation in our \(ans\) vector.





#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];

vector<pair<int, int>> ans;

void doSwap(int i, int j) {

    ans.push_back({i, j});
    swap(pos[a[i]], pos[a[j]]);
    swap(a[i], a[j]);

}

void swap_operation(int i, int j) {
    if (i > j)
        swap(i, j);
    if (j - i >= n / 2) {
        doSwap(i, j);
    } 
}

int main() {

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }

    
    for (int i = 1; i <= n; ++i) {
        if (a[i] != i) {
            swap_operation(i, pos[i]);
        }
    }


    return 0;
}





And what if \(j<=\frac{n}{2}\) then it means that we can swap \(j\) with \(n\) and because \(i<j\) so we can also swap \(i\) with \(n\) so we will use \(n\) as out temporary position in this case.






#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];

vector<pair<int, int>> ans;

void doSwap(int i, int j) {

    ans.push_back({i, j});
    swap(pos[a[i]], pos[a[j]]);
    swap(a[i], a[j]);

}

void swap_operation(int i, int j) {
    if (i > j)
        swap(i, j);
    if (j - i >= n / 2) {
        doSwap(i, j);
    } else if (j <= n / 2) {
        doSwap(i, n);
        doSwap(j, n);
        doSwap(i, n);
    }
}

int main() {

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }

    
    for (int i = 1; i <= n; ++i) {
        if (a[i] != i) {
            swap_operation(i, pos[i]);
        }
    }


    return 0;
}





and what if \(i> \frac{n}{2}\) that means that we can swap \(i\) with \(1\) and also we can swap \(j\) with \(1\) because \(j>i\) so we will use \(1\) as our temporary position.






#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];

vector<pair<int, int>> ans;

void doSwap(int i, int j) {

    ans.push_back({i, j});
    swap(pos[a[i]], pos[a[j]]);
    swap(a[i], a[j]);

}

void swap_operation(int i, int j) {
    if (i > j)
        swap(i, j);
    if (j - i >= n / 2) {
        doSwap(i, j);
    } else if (j <= n / 2) {
        doSwap(i, n);
        doSwap(j, n);
        doSwap(i, n);
    } else if (i > n / 2) {
        doSwap(i, 1);
        doSwap(j, 1);
        doSwap(i, 1);
    } 
}

int main() {

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }
    

    for (int i = 1; i <= n; ++i) {
        if (a[i] != i) {
            swap_operation(i, pos[i]);
        }
    }


    return 0;
}





And the last thing what if none of the above conditions happen then it means that \(j>\frac{n}{2}\) and \( i <= \frac{n} {2}\) so we can only swap \(j\) with \(1\) and swap \(i\) with \(n\) so we move \(j\) to \(1\) and then from \(1\) to \(n\) and then from \(n\) to \(i\) and we must not to forget to swap \(1\) and \(n\) again and also \( 1\) and \(j\) so we make sure that we didn't change the positions of elements from the previous operations and then we print our answer.





#include<bits/stdc++.h>

using namespace std;

const int N = 300005;

int n;
int a[N], pos[N];

vector<pair<int, int>> ans;

void doSwap(int i, int j) {

    ans.push_back({i, j});
    swap(pos[a[i]], pos[a[j]]);
    swap(a[i], a[j]);

}

void swap_operation(int i, int j) {
    if (i > j)
        swap(i, j);
    if (j - i >= n / 2) {
        doSwap(i, j);
    } else if (j <= n / 2) {
        doSwap(i, n);
        doSwap(j, n);
        doSwap(i, n);
    } else if (i > n / 2) {
        doSwap(i, 1);
        doSwap(j, 1);
        doSwap(i, 1);
    } else {
        doSwap(1, j);
        doSwap(1, n);
        doSwap(i, n);
        doSwap(1, n);
        doSwap(1, j);
    }
}

int main() {

    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        pos[a[i]] = i;
    }
    

    for (int i = 1; i <= n; ++i) {
        if (a[i] != i) {
            swap_operation(i, pos[i]);
        }
    }

    cout << ans.size() << endl;


    for (auto i: ans) {

        cout << i.first << ' ' << i.second << endl;
    }

    return 0;
}





the answer to this sample case is different from the statement but it is still correct because after the first operation the array becomes [1,4,3,2] and after the second operation the array becomes [1,2,3,4] which is sorted and the number of operations is equal to 2 which is less than \(5\times 4 = 20\) .





the answer to the output is different from the statement but it is still valid because the array after the first operation becomes [1,5,3,2,4,6] and after the second operation [2,5,3,1,4,6] and after the third operation [6,5,3,1,4,2] and after the fourth operation [6,2,3,1,4,5] and after the fifth operation [5,2,3,1,4,6] and after the sixth operation [1,2,3,5,4,6] and after the seventh operation [5,2,3,1,4,6] and after the eighth operation [4,2,3,1,5,6] and after the last operation [1,2,3,4,5,6] which is sorted and the number of operations is equal to 9 which is less than to \(5\times 6 = 30\).





Lets try another case where we only have one element

<code>
1
1
</code>

Expected output

<code>
0
</code>

Because we only have one element and it is already sorted so we don't need to do any further operations.





1
1