Beautiful Numbers
time limit per test: 1 second
memory limit per test: 256 megabytes

You are given a permutation \(p=[p_1, p_2, \ldots, p_n]\) of integers from \(1\) to \(n\). Let's call the number \(m\) (\(1 \le m \le n\)) \(\textit{beautiful}\), if there exists two indices \(l, r\) (\(1 \le l \le r \le n\)), such that the numbers \([p_l, p_{l+1}, \ldots, p_r]\) is a permutation of numbers \(1, 2, \ldots, m\).

For example, let \(p = [4, 5, 1, 3, 2, 6]\). In this case, the numbers \(1, 3, 5, 6\) are beautiful and \(2, 4\) are not. It is because:


\(\bullet\) if \(l = 3\) and \(r = 3\) we will have a permutation \([1]\) for \(m = 1\);
\(\bullet\) if \(l = 3\) and \(r = 5\) we will have a permutation \([1, 3, 2]\) for \(m = 3\);
\(\bullet\) if \(l = 1\) and \(r = 5\) we will have a permutation \([4, 5, 1, 3, 2]\) for \(m = 5\);
\(\bullet\) if \(l = 1\) and \(r = 6\) we will have a permutation \([4, 5, 1, 3, 2, 6]\) for \(m = 6\);
\(\bullet\) it is impossible to take some \(l\) and \(r\), such that \([p_l, p_{l+1}, \ldots, p_r]\) is a permutation of numbers \(1, 2, \ldots, m\) for \(m = 2\) and for \(m = 4\).


You are given a permutation \(p=[p_1, p_2, \ldots, p_n]\). For all \(m\) (\(1 \le m \le n\)) determine if it is a beautiful number or not.

<b>Input</b>
The first line contains the only integer \(t\) (\(1 \le t \le 1000\)) \(-\) the number of test cases in the input. The next lines contain the description of test cases.

The first line of a test case contains a number \(n\) (\(1 \le n \le 2 \cdot 10^5)\) \(-\) the length of the given permutation \(p\). The next line contains \(n\) integers \(p_1, p_2, \ldots, p_n\) (\(1 \le p_i \le n\), all \(p_i\) are different) \(-\) the given permutation \(p\).

It is guaranteed, that the sum of \(n\) from all test cases in the input doesn't exceed \(2 \cdot 10^5\).

<b>Output</b>
Print \(t\) line \(-\) the answers to test cases in the order they are given in the input.

The answer to a test case is the string of length \(n\), there the \(i\)-th character is equal to \(1\) if \(i\) is a beautiful number and is equal to \(0\) if \(i\) is not a beautiful number.


<b>Note</b>
The first test case is described in the problem statement.

In the second test case all numbers from \(1\) to \(5\) are beautiful:


\(\bullet\) if \(l = 3\) and \(r = 3\) we will have a permutation \([1]\) for \(m = 1\);
\(\bullet\) if \(l = 3\) and \(r = 4\) we will have a permutation \([1, 2]\) for \(m = 2\);
\(\bullet\) if \(l = 2\) and \(r = 4\) we will have a permutation \([3, 1, 2]\) for \(m = 3\);
\(\bullet\) if \(l = 2\) and \(r = 5\) we will have a permutation \([3, 1, 2, 4]\) for \(m = 4\);
\(\bullet\) if \(l = 1\) and \(r = 5\) we will have a permutation \([5, 3, 1, 2, 4]\) for \(m = 5\).





the naive approach is that for each \(m\) from 1 to \(n\): Iterate through all possible subarrays of length m to check if they contain a permutation of numbers from 1 to \(m\). and for each subarray, we sort it and verify if it matches the list \([1, 2, ..., m]\), but this will be too slow and can not fit the time limit.

we can think differently that we can determine if a number \(m\) is beautiful or not by keeping track of the minimum and maximum indices of the numbers 1 through \(m\) in the permutation. For \(m\) to be beautiful, the difference between these maximum and minimum indices should be exactly \(m\) - 1, indicating that the subarray from the minimum to maximum index contains all numbers from 1 to \(m\) without gaps.
first, lets take the input and make an array of indices (store every index of value \(x\)





#include<bits/stdc++.h>
using namespace std;
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int idx[n];
        for (int i = 0; i < n; i++) {
            int x;
            cin >> x;
            idx[x - 1] = i;
        }
    }
    
    return 0;
}





And now , we need to determine if a number m is beautiful, so we will update the minimum and maximum indices for numbers 1 to \(m\) and check if their difference equals \(m\) - 1 as we discussed above. If the condition is met, we print 1; otherwise, we print 0.





#include<bits/stdc++.h>
using namespace std;
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int idx[n];
        for (int i = 0; i < n; i++) {
            int x;
            cin >> x;
            idx[x - 1] = i;
        }
        int mn = n, mx = 0;
        for (int i = 0; i < n; i++) {
            mn = min(idx[i], mn);
            mx = max(idx[i], mx);
            if (mx - mn == i) cout << 1;
            else cout << 0;
        }
        cout << '\n';
    }
    
    return 0;
}





we now can create a custom test that handles the smallest case ever
<code>
1
1
1
</code>
the answer should be 1 because with only one number, 1 is always beautiful because the subarray [1] contains exactly the number 1 and satisfies the condition of being a permutation of numbers from 1 to 1.





1
1
1