<b>C. Formurosa</b>

memory limit per test: 1 second
time limit per test: 256 megabytes

The Bytelandian Institute for Biological Research (BIBR) is investigating the properties of two species of bacteria, named simply 0 and 1. Even under a microscope, bacteria of those two species are very difficult to distinguish. In fact, the only thing the scientists possess that is able to differentiate between them is a plant called Formurosa.

If the scientists place a sample of colonies of bacteria on each on Formurosa's leaves, it will activate a complicated nutrition process. During that process color of Formurosa changes to reflect the result of a — possibly very complicated — logical formula on the species of bacteria, involving constants and the operators | (OR), & (AND) and ^ (XOR). If it is 0, the plant will turn red, otherwise — it will turn blue.

For example, if the nutrition process of Formurosa is described by the formula: (((?^?)|?)&(1^?)); then Formurosa has four leaves (the "?" signs denote the leaves). If we place 0, 1, 0, 0 on the respective leaves, the result of the nutrition process will be (((0^1)|0)&(1^0)) = 1, therefore the plant will turn blue.

The scientists have \(n\) colonies of bacteria. They do not know their types; the only thing they know for sure is that not all colonies are of the same type. They want to attempt to determine the bacteria's species by repeated evaluations with Formurosa. During each evaluation they must place exactly one sample on every leaf of the plant. However, they may use multiple samples of one colony during a single evaluation; they can even cover the whole plant with bacteria from one colony!

Is it possible for them to always determine the species of each colony, no matter what they are (assuming they are not all the same)?

<b>Input</b>
The first line of input contains a single integer \(n (2 ≤ n ≤ 10^6)\) — the number of colonies of bacteria.

The second line contains the formula describing the nutrition process of Formurosa. This line contains only characters «0», «1», «?», «|», «&», «^», «(», «)» and complies with the following grammar:

( \(s\) → 0|1|?|(\(s\)|\(s\))|(\(s\)&\(s\))|(\(s\)^\(s\))

The formula consists of no more than \(10^6\) characters.

<b>Output</b>
If it is always possible to determine the species of each colony, output "YES" (without quotes). Otherwise, output "NO" (without quotes).






This problem does not have a straightforward naive solution that meets the given constraints. A naive approach might involve simulating all possible configurations of the bacteria species and evaluating the logical formula for each, which would involve checking all \(2^n\) configurations. This approach would result in a time complexity of \(O(2^n \times m)\), where \(m\) is the length of the formula. Given that \(n\) and \(m\) can both be as large as \(10^6\), this approach would be computationally infeasible due to the exponential growth, making it necessary to seek a more optimized approach.





Here, we optimize the evaluation of the logical formula by using a recursive approach to parse and calculate the result for different bacteria species. The key idea is to represent possible outcomes with bitmasks, where each bit corresponds to a potential result of the expression (0, 1, or both). We recursively evaluate sub-expressions by considering all combinations of possible results for the left and right sub-expressions, then apply the corresponding logical operator (&, |, ^) to these combinations.

The complexity of this approach is \(O(m)\), where \(m\) is the length of the formula. This is because each character in the formula is processed once in the recursive evaluation, making the solution efficient even for large inputs up to \(10^6\) characters. This ensures we handle the problem within the given constraints.





Here, we need to determine if it's always possible to identify the species of bacteria (0 or 1) using the logical formula provided. The challenge is to decide this with certainty, even when the formula could involve up to \(10^6\) characters and an arbitrary number of bacteria samples.



We begin by recognizing that the logical formula involves unknowns (?), constants (0, 1), and logical operators (&, |, ^). Our goal is to determine whether, for any configuration of the bacteria species, the outcome can differentiate between the species.





To solve this, we think about each sub-expression's possible outcomes. Since there are two species, each unknown can be either 0 or 1. However, to simplify our approach, we represent each sub-expression's potential outcomes using bitmasks:

- If the expression can result in 0, we set the first bit (1 << 0).
- If the expression can result in 1, we set the third bit (1 << 1).
- If the expression can result in both 0 and 1, we set both bits.





For each ?, it can represent both 0 and 1, so we set both bits, represented as 6 (binary 110). For 0 and 1, we only set the respective bit.

We then recursively evaluate the formula by breaking it down into smaller sub-expressions. For each logical operator (&, |, ^), we combine the possible outcomes of the left and right sub-expressions:

- For (&), a bitwise AND operation ensures that both sub-expressions must be 1 to produce a 1.
- For (|), a bitwise OR operation means at least one sub-expression must be 1 to produce a 1.
- For (^), a bitwise XOR operation toggles the result based on the difference between the sub-expressions.





The recursive function processes each character in the formula and combines the results using these operations. The bitmask of the entire expression is then checked. If it can be both 0 and 1 (6 in binary), we output "YES"; otherwise, we output "NO".



#include <bits/stdc++.h>
using namespace std;
#define int long long

int n, i;
string s;



signed main() {
 cin >> n >> s;
 
}






In this function, we will perform a bitwise operation based on the operator provided. We evaluate the two integer inputs, \( x \) and \( y \), according to the operator \( op \). If the operator is (&), we return the result of \( x \) AND \( y \), which sets bits to 1 only where both \( x \) and \( y \) have bits set to 1.

If the operator is (|), we return the result of \( x \) OR \( y \), which sets bits to 1 where either \( x \) or \( y \) has a bit set to 1.

If the operator is (^), we return the result of \( x \) XOR \( y \), which sets bits to 1 where \( x \) and \( y \) differ. This function forms the core of how we combine the possible outcomes of sub-expressions, allowing us to evaluate logical operations in a formula.





#include <bits/stdc++.h>
using namespace std;
#define int long long

int n, i;
string s;

int performOperation(char op, int x, int y) {
 if(op == '&') return x & y;
 if(op == '|') return x | y;
 if(op == '^') return x ^ y;
 assert(false);
}

signed main() {
 cin >> n >> s;
 
}





In this function, we recursively evaluate the logical formula represented by the string \( s \). Starting with the current character \( s[i] \), we check if it's a known constant (0 or 1) or an unknown (?), and return a bitmask representing its possible outcomes (1 for 0, 8 for 1, and 6 for both).

If \( s[i] \) is a sub-expression, we recursively evaluate the left and right sub-expressions and combine their possible results using the operation between them. We iterate through all combinations of the possible results from the left and right sub-expressions, applying the operation, and accumulating the possible outcomes in the result. This process ensures that we accurately capture all potential outcomes of the expression based on the logical operations.





#include <bits/stdc++.h>
using namespace std;
#define int long long

int n, i;
string s;

int performOperation(char op, int x, int y) {
 if(op == '&') return x & y;
 if(op == '|') return x | y;
 if(op == '^') return x ^ y;
 assert(false);
}

int evaluateExpression() {
 ++i;
 if(s[i] == '0') return 1;
 if(s[i] == '1') return 8;
 if(s[i] == '?') return 6;
 int left = evaluateExpression();
 char operation = s[++i];
 int right = evaluateExpression();
 int result = 0;
 for(int a = 0; a < 4; ++a) {
  for(int b = 0; b < 4; ++b) {
   if((left & (1ll << a)) && (right & (1ll << b))) {
    result |= (1ll << performOperation(operation, a, b));
   }
  }
 }
 ++i;
 return result;
}





We prepend a space to the formula for 1-based indexing and then print "YES" if the expression can result in both 0 and 1, otherwise "NO".






#include <bits/stdc++.h>
using namespace std;
#define int long long

int n, i;
string s;

int performOperation(char op, int x, int y) {
 if(op == '&') return x & y;
 if(op == '|') return x | y;
 if(op == '^') return x ^ y;
 assert(false);
}

int evaluateExpression() {
 ++i;
 if(s[i] == '0') return 1;
 if(s[i] == '1') return 8;
 if(s[i] == '?') return 6;
 int left = evaluateExpression();
 char operation = s[++i];
 int right = evaluateExpression();
 int result = 0;
 for(int a = 0; a < 4; ++a) {
  for(int b = 0; b < 4; ++b) {
   if((left & (1ll << a)) && (right & (1ll << b))) {
    result |= (1ll << performOperation(operation, a, b));
   }
  }
 }
 ++i;
 return result;
}

signed main() {
 cin >> n >> s;
 s = " " + s;
 cout << ((evaluateExpression() & 6) ? "YES" : "NO") << endl;
}






It's all rights. Now we will run a custom testcase to check the overall correctness of the solution.

Input:

2
?
Output:

YES

The output is "YES" because the formula '?' can represent both 0 and 1, allowing us to differentiate between the two bacteria species.





2
?