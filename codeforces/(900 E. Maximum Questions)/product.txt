<b>Maximum Questions</b>

time limit per test: 2 seconds
memory limit per test: 256 megabytes

Vasya wrote down two strings s of length n and t of length m consisting of small English letters 'a' and 'b'. What is more, he knows that string t has a form "abab...", namely there are letters 'a' on odd positions and letters 'b' on even positions.

Suddenly in the morning, Vasya found that somebody spoiled his string. Some letters of the string s were replaced by character '?'.

Let's call a sequence of positions i, i + 1, ..., i + m - 1 as occurrence of string t in s, if 1 ≤ i ≤ n - m + 1 and \(t_1 = s_i, t_2 = s_{i + 1}, ..., t_m = s_{i + m - 1}\).

The boy defines the beauty of the string s as maximum number of disjoint occurrences of string t in s. Vasya can replace some letters '?' with 'a' or 'b' (letters on different positions can be replaced with different letter). Vasya wants to make some replacements in such a way that beauty of string s is maximum possible. From all such options, he wants to choose one with the minimum number of replacements. Find the number of replacements he should make.

<b>Input</b>

The first line contains a single integer n (\(1 ≤ n ≤ 10^5\)) — the length of s.

The second line contains the string s of length n. It contains small English letters 'a', 'b' and characters '?' only.

The third line contains a single integer m (\(1 ≤ m ≤ 10^5\)) — the length of t. The string t contains letters 'a' on odd positions and 'b' on even positions.

<b>Output</b>

Print the only integer — the minimum number of replacements Vasya has to perform to make the beauty of string s the maximum possible.

<b>Note</b>

In the first sample string t has a form 'a'. The only optimal option is to replace all characters '?' by 'a'.

In the second sample using two replacements we can make string equal to "aba?aba??". It is impossible to get more than two occurrences.




To begin with, let's learn how to calculate the maximum number of non-overlapping occurrences of string t in a fixed string s. To do this, we can write a dynamic: dp[i] - the maximum number of non-overlapping occurrences of string t on a prefix of length i of string s. The transitions are quite obvious: dp[i] can be updated through dp[i - 1] (if we don't consider the possible occurrence ending at position i) or through dp[i - m] + 1, if the substring of string s ending at position i is equal to string t. The answer will be stored in dp[n].

Then, there is a naive solution to the problem: we can iterate over all ways to replace some '?' characters with 'a' or 'b', and then for each such way, calculate the maximum number of non-overlapping occurrences of string t. However, such a solution works in exponential time, which is too long for \(n \le 10^5\).

The key idea of the correct solution is as follows: let's use the above dynamic, but modify it slightly. We'll store not one number, but a pair of the form (maximum number of non-overlapping occurrences of string t, minimum number of replacements). Then, it is beneficial for us to first maximize the first number in the pair, and when they are equal, minimize the second number in the pair.




#include <bits/stdc++.h>  

using namespace std;

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    return 0;
}





Let's learn to recalculate such dynamics. First, we can update dp[i] through dp[i - 1], if we don't consider the occurrence ending at position i. Second, we can try to get a substring equal to t, ending at position i. Let's understand when this is possible to do.

For this, we must not have characters 'a' at positions whose parity does not match the parity of the position (i - m + 1), because the first character 'a' will be located at position (i - m + 1), and therefore all characters 'a' must be located only at positions with the same parity.

Similarly, there must not be characters 'b' at positions whose parity does not match the parity of the position (i - m + 2), because the first character 'b' will be located at position (i - m + 2), and therefore all characters 'b' must be located only at positions with the same parity.

It follows that we need to be able to quickly count the number of occurrences of the character 'a' or 'b' on some segment at positions with a certain parity. For this, we will calculate prefix sums, calculated separately for characters 'a' and 'b', and also separately for each parity.




#include <bits/stdc++.h>  

using namespace std;

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    vector<vector<int>> prefa(n + 1, vector<int>(2));
    vector<vector<int>> prefb(n + 1, vector<int>(2));
    for (int i = 1; i <= n; i++) {
        prefa[i] = prefa[i - 1];
        prefb[i] = prefb[i - 1];
        if (s[i - 1] == 'a') prefa[i][i % 2]++;
        if (s[i - 1] == 'b') prefb[i][i % 2]++;
    }
    return 0;
}





Now we'll start writing the dynamics itself. As was said earlier, we can update dp[i] through dp[i - 1]. It's clear that we can start considering the dynamics only from i >= m, because before this moment, there can't be occurrences of the string t of length m on the prefix.

After this, we'll check the conditions described above to understand whether we can get the string t ending at position i. To count the number of characters on the segment [l, r], we need to consider the difference of prefix sums at positions r and (l - 1). In our case, r = i and l = i - m + 1. Also, for characters 'a' and 'b', we need to take the necessary parity.

The characters 'a' should not be located at positions with parity differing from the parity of the number (i - m + 1), i.e., coinciding with the parity of the number (i - m). Similarly, the characters 'b' should not be located at positions with parity differing from the parity of the number (i - m + 2), i.e., coinciding with the parity of the number (i - m + 1).





#include <bits/stdc++.h>  

using namespace std;

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    vector<pair<int, int>> dp(n + 1);
    vector<vector<int>> prefa(n + 1, vector<int>(2));
    vector<vector<int>> prefb(n + 1, vector<int>(2));
    for (int i = 1; i <= n; i++) {
        prefa[i] = prefa[i - 1];
        prefb[i] = prefb[i - 1];
        if (s[i - 1] == 'a') prefa[i][i % 2]++;
        if (s[i - 1] == 'b') prefb[i][i % 2]++;
    }
    for (int i = m; i <= n; i++) {
        dp[i] = dp[i - 1];
        if (prefa[i][(i - m) % 2] - prefa[i - m][(i - m) % 2] != 0) continue;
        if (prefb[i][(i - m + 1) % 2] - prefb[i - m][(i - m + 1) % 2] != 0) continue;
    }
    return 0;
}




Further, we need to calculate the number of necessary replacements of the '?' symbol to get the occurrence of the string t. It is obvious that this number is equal to m minus (the number of symbols 'a' and 'b' that are already in their positions, i.e., on the segment [i - m + 1, i] and have the required parity).

To make it more convenient to update the dynamic value, we will consider the number of replacements with a minus sign. Therefore, since we need to minimize them, after changing the sign, we need to maximize them, so we can use the ordinary max function to update the dynamic.

Also, at the end, we need to output the dynamic value with a minus sign to return the actual value.




#include <bits/stdc++.h>  

using namespace std;

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    vector<pair<int, int>> dp(n + 1);
    vector<vector<int>> prefa(n + 1, vector<int>(2));
    vector<vector<int>> prefb(n + 1, vector<int>(2));
    for (int i = 1; i <= n; i++) {
        prefa[i] = prefa[i - 1];
        prefb[i] = prefb[i - 1];
        if (s[i - 1] == 'a') prefa[i][i % 2]++;
        if (s[i - 1] == 'b') prefb[i][i % 2]++;
    }
    for (int i = m; i <= n; i++) {
        dp[i] = dp[i - 1];
        if (prefa[i][(i - m) % 2] - prefa[i - m][(i - m) % 2] != 0) continue;
        if (prefb[i][(i - m + 1) % 2] - prefb[i - m][(i - m + 1) % 2] != 0) continue;
        int cost = m - (prefa[i][(i - m + 1) % 2] - prefa[i - m][(i - m + 1) % 2] + prefb[i][(i - m + 2) % 2] - prefb[i - m][(i - m + 2) % 2]);
        dp[i] = max(dp[i], make_pair(dp[i - m].first + 1, dp[i - m].second - cost));
    }
    cout << -dp[n].second << "\n";
    return 0;
}




Let's check the solution on a corner test with the minimal possible values n = m = 1. Test:

1
b
1

Here, the single character of the string s is already equal to 'b', so we can definitely not get an occurrence of the string t = "a", and no replacements need to be made. The expected answer is:

0




1
b
1