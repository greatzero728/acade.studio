\(\textbf{Towers}\)
\(\textbf{time limit per test: 2 second}\)
\(\textbf{memory limit per test: 256 megabytes}\)

The city of D consists of \(n\) towers, built consecutively on a straight line. The height of the tower that goes \(i\)-th (from left to right) in the sequence equals \(h_i\). The city mayor decided to rebuild the city to make it beautiful. In a beautiful city, all towers are arranged in non-descending order of their height from left to right.
The rebuilding consists of performing several (perhaps zero) operations. An operation constitutes using a crane to take any tower and put it altogether on the top of some other neighboring tower. In other words, we can take the tower that stands \(i\)-th and put it on the top of either the \((i - 1)\)-th tower (if it exists), or the \((i + 1)\)-th tower (if it exists). The height of the resulting tower equals the sum of the heights of the two towers that were put together. After that, the two towers can't be split by any means, but more similar operations can be performed on the resulting tower. Note that after each operation the total number of towers on the straight line decreases by \(1\).
Help the mayor determine the minimum number of operations required to make the city beautiful.

\(\textbf{Input}\)
The first line contains a single integer \(n\) \((1 \leq n \leq 5000)\) — the number of towers in the city. The next line contains \(n\) space-separated integers: the \(i\)-th number \(h_i\) \((1 \leq h_i \leq 10^5)\) determines the height of the tower that is \(i\)-th (from left to right) in the initial tower sequence.

\(\textbf{Output}\)
Print a single integer — the minimum number of operations needed to make the city beautiful.




The naive solution is to enumerate which edge of two adjacent towers we want to merge. This is obviously infeasible since the number of ways is \(2^{n-1}\). This is a dynamic programming problem intuitively. One approach is to let \(dp[i][j]\) be the minimum operations to merge the first \(i\) towers with the last one height \(j\). This solution won't work either, since the range of the height is too large. Note that if the operation we use to merge the first \(i\) is smaller, the height of the last tower will be shorter or equal to the previous one. So for every \(i\), we only care about the height that we use the minimal operation, since we want the last tower to be shorter as we want the operation to be minimized. We can define \(dp[i]\) as the minimal operation we need to merge the first \(i\) towers. Meanwhile, we use another array \(lst_i\) to represent the minimal height of the last tower when we merge the first \(i\) towers. Let's do the transition. \(dp[i]=min\{dp[j]+(i-j-1)~|~lst_j\le \sum_{k=j+1}^i{h_k}\}\). Also, we want to minimize \(lst_i\). So we will choose the rightmost \(j\) that satisfies the condition to do the transition. Let's write boilerplate code and IO.




Then we perform the dynamic programming transition. We use the prefix sum of the height to help us count the height of the last tower. Note that we want the last transition point since we want to minimize the last tower. So we iterate from right to left, and when the \(dp_i\) can be strictly smaller, we update the \(lst_i\) to be the \(\sum_{k=j+1}^i{h_k}\). We can use prefix sum to implement this.




#include <bits/stdc++.h>
using namespace std;
const int N = 5005;
int h[N], dp[N];
int h[N], pf[N], dp[N], lst[N];

signed main()
{
    cin.tie(0)->sync_with_stdio(0);
    int n;
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> h[i];
    for (int i = 1; i <= n; i++)
    {
        pf[i] = pf[i - 1] + h[i], dp[i] = n;
        for (int j = i - 1; j >= 0; j--)
            if (pf[i] - pf[j] >= lst[j] && dp[j] + i - j - 1 < dp[i])
                dp[i] = dp[j] + i - j - 1, lst[i] = pf[i] - pf[j];
    }
    cout << dp[n] << '\n';
}




The sample is passed. Let's try a custom test to check if there is a trivial problem in the code.
Let's check the edge case where \(n=1\). The answer is \(0\) since one element in an array is non-descending.




1
99999