<b>Maximums</b>
time limit per test: 1 second
memory limit per test: 256 megabytes

Alicia has an array, \(a_1,a_2,\dots,a_n\), of non-negative integers. For each \(1\le i\le n\), she has found a non-negative integer \(x_i = \max(0,a_1,\dots,a_{i-1})\). Note that for \(i=1\), \(x_i=0\).

For example, if Alicia had the array \(a = \{0,1,2,0,3\}\), then \(x = \{0,0,1,2,2\}\).

Then, she calculated an array, \(b_1,b_2,\dots,b_n\): \(b_i = a_i - x_i\).

For example, if Alicia had the array \(a=\{0,1,2,0,3\}\), \(b = \{0-0,1-0,2-1,0-2,3-2\} = \{0,1,1,-2,1\}\).

Alicia gives you the values \(b_1,b_2,\dots,b_n\) and asks you to restore the values \(a_1,a_2,\dots,a_n\). Can you help her solve the problem?

<b>Input</b>
The first line contains one integer \(n\) \((3\le n\le 200000)\) â€“ the number of elements in Alicia's array.

The next line contains \(n\) integers, \(b_1,b_2,\dots,b_n\) \((-10^9 \le b_i \le 10^9)\).

It is guaranteed that for the given array \(b\) there is a solution \(a_1,a_2,\dots,a_n\), for all elements of which the following is true: \(0\le a_i \le 10^9\).

<b>Output</b>
Print \(n\) integers, \(a_1,a_2,\dots,a_n\) \((0\le a_i \le 10^9)\), such that if you calculate \(x\) according to the statement, \(b_1\) will be equal to \(a_1 - x_1\), \(b_2\) will be equal to \(a_2 - x_2\), ..., and \(b_n\) will be equal to \(a_n - x_n\).

It is guaranteed that there exists at least one solution for the given tests. It can be shown that the solution is unique.

<b>Note</b>
The first test was described in the problem statement.

In the second test, if Alicia had an array \(a = \{1000,1000000000,0\}\), then \(x = \{0,1000,1000000000\}\) and \(b = \{1000 - 0, 1000000000 - 1000, 0 - 1000000000\} = \{1000, 999999000, -1000000000\}\).




One can naively go through all possibilities for \(a_1\) and use backtracking to find a suitable array \(a\). However, the range of each \(a_i\) is too large, and it will be too slow to do this.

Instead, we observe from the expression for \(b_i\) that to find \(a_i\), we need to simply find all \(a_j\) with \(j < i\). However, \(b_1 = a_1 - 0 = a_1\), thus we can find \(a_1\). Similarly, we can find \(a_2\), \(a_3\) and so on till \(a_n\) by rearranging the expression as \(a_i = b_i + \max(0, a_1, \ldots, a_{i-1})\). This will run in \(\mathcal{O}(n)\).

Let's set up the boilerplate and read the input.




#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> b(n);
    for (auto &u : b) cin >> u;
    return 0;
}




Now, let's initialize the array \(a\) with the running maximum that will be updated with each value of \(a_i\) computed. We don't need to initialize \(a_1 = b_1\), since the running maximum will take care of it, being initialized to 0. After computing the entire array \(a\), we output it.




#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    vector<int> b(n), a(n);
    for (auto &u : b) cin >> u;
    int mx = 0;
    for (int i = 0; i < n; i++) {
        a[i] = b[i] + mx;
        mx = max(mx, a[i]);
    }
    for (auto u : a) cout << u << ' ';
    return 0;
}