<b>E. Tricky and Clever Password</b>
time limit per test: 2 seconds
memory limit per test: 256 megabytes

In his very young years the hero of our story, king Copa, decided that his private data was hidden not enough securely, what is unacceptable for the king. That's why he invented tricky and clever password (later he learned that his password is a palindrome of odd length), and coded all his data using it.

Copa is afraid to forget his password, so he decided to write it on a piece of paper. He is aware that it is insecure to keep password in such way, so he decided to cipher it the following way: he cut \(x\) characters from the start of his password and from the end of it (\(x\) can be 0, and \(2x\) is strictly less than the password length). He obtained 3 parts of the password. Let's call it \(prefix\), \(middle\) and \(suffix\) correspondingly, both \(prefix\) and \(suffix\) having equal length and \(middle\) always having odd length. From these parts he made a string \(A + prefix + B + middle + C + suffix\), where \(A\), \(B\) and \(C\) are some (possibly empty) strings invented by Copa, and « + » means concatenation.

Many years have passed, and just yesterday the king Copa found the piece of paper where his ciphered password was written. The password, as well as the strings \(A\), \(B\) and \(C\), was completely forgotten by Copa, so he asks you to find a password of maximum possible length, which could be invented, ciphered and written by Copa.

<b>Input</b>
The input contains single string of small Latin letters with length from 1 to \(10^5\) characters.

<b>Output</b>
The first line should contain integer \(k\) — amount of nonempty parts of the password in your answer \((k \in \{1, 3\})\). In each of the following \(k\) lines output two integers \(x_i\) and \(l_i\) — start and length of the corresponding part of the password. Output pairs in order of increasing \(x_i\). Separate the numbers in pairs by a single space.

Starting position \(x_i\) should be an integer from 1 to the length of the input string. All \(l_i\) must be positive, because you should output only non-empty parts. The middle part must have odd length.

If there are several solutions, output any. Note that your goal is to maximize the sum of \(l_i\), but not to maximize \(k\).





\(\bullet\) Let's first consider the naive approach. We can iterate through all possible suffix lengths, which consumes \(O(n)\). Next, we can iterate through the starting positions of the prefix, also consuming \(O(n)\). After determining the lengths of the prefix and suffix, as well as the position of the prefix, we can check if the combination of the prefix and suffix forms a palindrome in \(O(n)\). Finally, for the middle section, we can iterate through both the left and right positions, checking if the middle substring is a palindrome, which consumes \(O(n^3)\). 

In total, this approach results in a time complexity of \(O(n^6)\). However, this is extremely slow for \(n \leq 10^5\), and attempting to solve the problem using this naive method will likely lead to a time limit exceeded error.

\(\bullet\) Using Manacher's Algorithm, we can identify all the longest odd palindromes in \(O(n)\), which allows us to easily determine the middle substring. If the combination of \(prefix + middle + suffix\) forms a palindrome, then upon finding the longest odd palindrome starting at a certain midpoint, we can consider that middle substring as the current longest odd palindrome. This is because if we ignore some parts of the left and right sides of the current longest odd palindrome, the length of \(prefix + middle + suffix\) will decrease accordingly. So we finally reduce the number of candidates for all possible middle substrings to about \(n\), allowing us to iterate through all possible middle substrings in a time complexity of \(O(n)\).

If we fix the length of the suffix string, we can determine all possible positions of the prefix where \(prefix + suffix\) forms a palindrome. However, we only need the leftmost position because choosing the leftmost one maximizes the length of the middle substring. We have already determined the middle substring, so we only need to ensure that the calculated prefix does not intersect with the middle substring. Since \(prefix + suffix\) forms a palindrome, we can iterate through the lengths of the suffix string using binary search, in \(O(log(n))\).

The challenge lies in finding the leftmost position of the prefix after we have determined the middle and suffix strings. This can be solved using the suffix array algorithm. We can append the reversed string to the current string with a special character. Then, we can build a suffix array. While iterating through the length of the suffix string using binary search, we can determine the range of sorted suffix array strings that share the same prefix as the current suffix length we are iterating. This can be achieved using binary search and a range minimum query approach based on the height array. Then also using the range minimum query approach based on the minimum value of original position in the sorted suffix array, we can find out the leftmost position of \(prefix\) string in time complexity \(O(log(n))\).

\(\bullet\) Overall, we can solve this problem in time complexity \(O(n \cdot log^2(n))\), using Manacher's Algorithm, suffix array algorithm, range minimum query algorithm, binary search algorithm.





#include<bits/stdc++.h>

using namespace std;

const int NN = 202020;

char s[NN];

int n;

int main() {
    
	scanf("%s", s), n = strlen(s);
}





First, to determine the middle substring, let's introduce Manacher's Algorithm.





#include<bits/stdc++.h>

using namespace std;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
}





To find the leftmost position of the prefix substring when we fix the length of the suffix, we need to concatenate the reversed string using a special character before building the sorted suffix array.





#include<bits/stdc++.h>

using namespace std;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
}





Let's implement a suffix array algorithm to sort all suffix arrays.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
}





To find the range of common prefix suffix arrays that share the same length of prefix we are currently iterating, we need to implement the height function that calculates \(H_i\). Here, \(H_i\) represents the length of the longest common prefix between the \((i - 1)\)-th and \(i\)-th sorted suffix arrays.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
}





To find the range of common prefix suffix arrays that share the same length of prefix we are currently iterating, we also need to implement the range minimum query approach based on the height array.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
} rmq;

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq.rmq_suf(N);
}





Let's implement the \(calc(L, R)\) function that can calculate the minimum value of any range in \(O(1)\).





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq;

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq.rmq_suf(N);
}





As we have already calculated all possible longest odd palindromes using Manacher's algorithm in \(O(n)\), let's iterate through all possible starting candidates for the \(middle\) substring.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq;

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq.rmq_suf(N);
    
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
	}
}





Now, let's iterate the length of \(suffix\) string, using binary search.
Here, let's declare a \(prefix(len)\) function that calculates the leftmost position of the \(prefix\) that has the same length as the \(suffix\) string and ensures that \(prefix + suffix\) forms a palindrome.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq;

int prefix(int len) {
    
	return -1;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq.rmq_suf(N);
	
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
		int st = 0, ed = n - R;
		while(ed - st > 1) {
			int md = st + ed >> 1;
			if(~prefix(md) && prefix(md) + md <= L) st = md;
			else ed = md;
		}
	}
}





Let's implement the \(prefix(len)\) function. (Here, \(len\) is the length of the current suffix string.)
First, we need to find the range \((L, R)\) that has a common prefix of length \(len\) using binary search in the sorted suffix array.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq;

int prefix(int len) {
	int pos = n + 1;
	int k = Rank[pos];
	int st = 0, ed = k;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(md == k || rmq[0].calc_min(md + 1, k) >= len) ed = md;
		else st = md;
	}
	int L = ed;
	
	st = k, ed = n + n + 2;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(k == md || rmq[0].calc_min(k + 1, md) >= len) st = md;
		else ed = md;
	}
	int R = st;
	
	return -1;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq.rmq_suf(N);
	
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
		int st = 0, ed = n - R;
		while(ed - st > 1) {
			int md = st + ed >> 1;
			if(~prefix(md) && prefix(md) + md <= L) st = md;
			else ed = md;
		}
	}
}





We have already found the range \((L, R)\).
Now, we need to determine the leftmost position of the prefix among all possible candidates in this range. This can be accomplished using a range minimum query approach, based on the minimum value of the original positions in the sorted suffix array.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	void rmq_min(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = sa[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq[2];

int prefix(int len) {
	int pos = n + 1;
	int k = Rank[pos];
	int st = 0, ed = k;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(md == k || rmq[0].calc_min(md + 1, k) >= len) ed = md;
		else st = md;
	}
	int L = ed;
	
	st = k, ed = n + n + 2;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(k == md || rmq[0].calc_min(k + 1, md) >= len) st = md;
		else ed = md;
	}
	int R = st;
	
	int left = rmq[1].calc_min(L, R);
	if(left < n) return left;
	return -1;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq[0].rmq_suf(N);
	rmq[1].rmq_min(N);
	
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
		int st = 0, ed = n - R;
		while(ed - st > 1) {
			int md = st + ed >> 1;
			if(~prefix(md) && prefix(md) + md <= L) st = md;
			else ed = md;
		}
	}
}





Now, we need to find the maximum length of \(prefix + middle + suffix\) among all \(n\) candidates we have identified. If the current length exceeds the maximum value found so far, we will update the maximum value and store the \(prefix\), \(middle\), and \(suffix\).





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	void rmq_min(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = sa[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq[2];

int prefix(int len) {
	int pos = n + 1;
	int k = Rank[pos];
	int st = 0, ed = k;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(md == k || rmq[0].calc_min(md + 1, k) >= len) ed = md;
		else st = md;
	}
	int L = ed;
	
	st = k, ed = n + n + 2;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(k == md || rmq[0].calc_min(k + 1, md) >= len) st = md;
		else ed = md;
	}
	int R = st;
	
	int left = rmq[1].calc_min(L, R);
	if(left < n) return left;
	return -1;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq[0].rmq_suf(N);
	rmq[1].rmq_min(N);
	
	int mx = 0;
	vector<pii> ans;
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
		int st = 0, ed = n - R;
		while(ed - st > 1) {
			int md = st + ed >> 1;
			if(~prefix(md) && prefix(md) + md <= L) st = md;
			else ed = md;
		}
		if(!st) {
			if(mx < R - L + 1) {
				ans.clear();
				ans.push_back({L + 1, mx = R - L + 1});
			}
		}
		else if(~prefix(st) && prefix(st) + st <= L && mx < st + (R - L + 1) + st) {
			mx = st + (R - L + 1) + st;
			ans.clear();
			ans.push_back({prefix(st) + 1, st});
			ans.push_back({L + 1, R - L + 1});
			ans.push_back({n - st + 1, st});
		}
	}
}





Finally, let's print the answer.





#include<bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;
using ppi = pair<pii, int>;

const int NN = 202020;

char s[NN];

int n;

//Only odd palindrome length is considered.
//z[i] means that the longest odd palindrome centered at i is [i - z[i] ... i + z[i]]
int z[NN];

void zpal(char *s, int n) {
	int i = 0, b = z[0] = 0;
	while(++i < n) {
		z[i] = b + z[b] < i ? 0 : min(z[b + b - i], b + z[b] - i);
		while(i + z[i] + 1 < n && i > z[i] && s[i + z[i] + 1] == s[i - z[i] - 1]) z[i]++;
		if(z[i] + i > z[b] + b) b = i;
	}
}

// 0-based
const int _mx = 18; // 1 << _mx > n

ppi pos[NN];
int H[NN], Rank[NN], sa[NN];

void build_suf(char *s, int n) {
	int i, j = n, cnt, u;
	while(j--) Rank[j] = s[j]; pos[n] = {{-1, -1}, -1};
	Rank[n] = 0;
	while(++j < _mx) {
		i = n, cnt = 0;
		while(i--) pos[i] = {{Rank[i], Rank[min(n, i + (1 << j))]}, i};
		sort(pos, pos + n);
		while(++i < n) {
			Rank[pos[i].y] = cnt + 1;
			if(pos[i].x != pos[i + 1].x) cnt++;
		}
		if(cnt == n) break;
	}
	while(i--) sa[Rank[i]] = i;
}
void Height(char *s, int n) {
	for(int i = 0, j, h = 0; i < n; i++) if(Rank[i] > 1) {
		h = max(0, h - 1), j = sa[Rank[i] - 1];
		while(i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
		H[Rank[i]] = h;
	}
}

struct RMQ {
	int mn[NN][_mx];
	void rmq_suf(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = H[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	void rmq_min(int n) {
		int i = 0, j = 0;
		while(i++ < n) mn[i][0] = sa[i];
		while(++j < _mx) for(i = 0; i++ < n; ) {
			mn[i][j] = min(mn[i][j - 1], mn[min(n, i + (1 << j - 1))][j - 1]);
		}
	}
	int calc_min(int L, int R) {
		int k = 31 - __builtin_clz(R - L + 1);
		return min(mn[L][k], mn[R - (1 << k) + 1][k]);
	}
} rmq[2];

int prefix(int len) {
	int pos = n + 1;
	int k = Rank[pos];
	int st = 0, ed = k;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(md == k || rmq[0].calc_min(md + 1, k) >= len) ed = md;
		else st = md;
	}
	int L = ed;
	
	st = k, ed = n + n + 2;
	while(ed - st > 1) {
		int md = st + ed >> 1;
		if(k == md || rmq[0].calc_min(k + 1, md) >= len) st = md;
		else ed = md;
	}
	int R = st;
	
	int left = rmq[1].calc_min(L, R);
	if(left < n) return left;
	return -1;
}

int main() {
    
	scanf("%s", s), n = strlen(s);
	
	zpal(s, n);
	
	int N = n;
	s[N++] = '$';
	
	for(int i = n, nn = n; i--; ) s[N++] = s[--nn];
	
	build_suf(s, N);
	Height(s, N);
	rmq[0].rmq_suf(N);
	rmq[1].rmq_min(N);
	
	int mx = 0;
	vector<pii> ans;
	for(int i = 0; i < n; i++) {
		int L = i - z[i], R = i + z[i];
		int st = 0, ed = n - R;
		while(ed - st > 1) {
			int md = st + ed >> 1;
			if(~prefix(md) && prefix(md) + md <= L) st = md;
			else ed = md;
		}
		if(!st) {
			if(mx < R - L + 1) {
				ans.clear();
				ans.push_back({L + 1, mx = R - L + 1});
			}
		}
		else if(~prefix(st) && prefix(st) + st <= L && mx < st + (R - L + 1) + st) {
			mx = st + (R - L + 1) + st;
			ans.clear();
			ans.push_back({prefix(st) + 1, st});
			ans.push_back({L + 1, R - L + 1});
			ans.push_back({n - st + 1, st});
		}
	}
	if(mx == n) {
		puts("1");
		printf("1 %d\n", n);
	}
	else {
		printf("%d\n", ans.size());
		for(pii p : ans) printf("%d %d\n", p.x, p.y);
	}
}





Let's add a custom corner case, where \(n\) is its minimum possible value: \(n = 1\).
<b>Input</b>
<code>
a
</code>
In this case, we can pick \(prefix\) and \(suffix\) as empty string, and \(middle\) as "a", then \(prefix + middle + suffix = "a"\), and this meets the requirement of the given problem, so in this case the answer will be as the follows:
<b>Output</b>
<code>
1
1 1
</code>





a