<b>Set of Points</b>

time limit per test: 2 seconds
memory limit per test: 256 megabytes

Convexity of a set of points on the plane is the size of the largest subset of points that form a convex polygon. Your task is to build a set of n points with the convexity of exactly m. Your set of points should not contain three points that lie on a straight line.

<b>Input</b>
The single line contains two integers n and m \((3 ≤ m ≤ 100, m ≤ n ≤ 2m).\)

<b>Output</b>
If there is no solution, print "-1". Otherwise, print n pairs of integers — the coordinates of points of any set with the convexity of m. The coordinates shouldn't exceed \(10^8\) in their absolute value.






A naive solution could involve randomly generating \( n \) points and then checking subsets of these points to determine if the largest convex polygon has a convexity of exactly \( m \). However, I will not pursue this approach because it is computationally inefficient. Checking all subsets of points to determine the largest convex polygon would require significant time, especially as \( n \) increases, due to the combinatorial explosion in the number of subsets. This approach also does not guarantee that I can construct a set with exactly \( m \) convexity, as random placement of points may either produce a larger convex set or fail to meet the convexity requirement, making the naive method unreliable and impractical for the problem's constraints.


To solve this problem efficiently and correctly, I will start by generating the first \( m \) points in such a way that they are guaranteed to form a convex polygon, ensuring none of these points are collinear. To do this, I will place the points in positions where they cannot all lie on a single straight line, which is a necessary condition for forming a convex shape. After establishing the first \( m \) points, I will position the remaining \( n - m \) points in a way that they do not increase the convexity beyond \( m \). This can be done by placing them inside the convex polygon formed by the first \( m \) points or by ensuring that adding these points would result in collinear arrangements with existing points, thus preventing any larger convex polygon from forming. This careful placement will ensure that the largest convex subset of points is exactly \( m \), achieving the desired convexity while satisfying the problem constraints.





#include <bits/stdc++.h>
using namespace std;
int main() 
{
    int n, m;
    cin >> n >> m;
}





I will first handle the special case where \( m = 3 \) and \( n \geq 5 \), as it is impossible to have exactly 3 points in a convex polygon without risking additional collinear points or larger convex sets, so I will output \(-1\) to indicate that no valid configuration exists. For other cases, I will generate \( n \) points by setting their \( x \)-coordinates to the index \( i \) and calculating their \( y \)-coordinates using the formula \( 10000000 + i^2 \). This large constant \( 10000000 \) will be used to ensure that the \( y \)-coordinates are sufficiently separated to avoid collinear points and maintain the non-collinearity of the points. The alternating sign of the \( y \)-coordinates, determined by whether \( i \) is greater than or equal to \( m \), helps in preventing the formation of additional convex polygons larger than \( m \) by ensuring the additional points do not affect the established convexity.





#include <bits/stdc++.h>
using namespace std;
int main() 
{
    int n, m;
    cin >> n >> m;
    if (m == 3 && n >= 5)
    {
        cout << -1;
    }
    else
    {
        for (int i = 0; i < n; i++)
        {
            int x = i;
            int y = 10000000 + i * i;
            if (i >= m)
                y *= -1;
            cout << x << " " << y << endl;
        }
    }
    return 0;
}





My outputs are also correct because it satisfies the problem's requirement to produce a set of \( n \) points with exactly \( m \) convexity. The key requirement is to ensure that exactly \( m \) points form the largest possible convex polygon while preventing additional points from contributing to a larger convex set. The points in my solution are placed in such a way that the first \( m \) points are non-collinear and can form a convex polygon, while the remaining points are positioned to avoid increasing the convexity. Although the specific coordinates in my output differ from the provided examples, they still fulfill the condition of having exactly \( m \) points in the convex hull, and no three points are collinear. Therefore, my output adheres to the constraints and achieves the correct convexity, making it a valid solution to the problem. Now, I will create a custom test case to check against random test cases.





I will create a custom test case where m = 5 and n = 10. In the output, the first 5 points should form a convex polygon, and the remaining 5 points should be placed inside the polygon or in a way that doesn't increase the convexity beyond 5. The output should be a set of 10 points that fulfill the conditions of the problem. After explaining the output I will test this custom test case and after that I will submit my solution.





10 5