<b>D. Painting Square</b>

<b>Time limit per test:</b> 3 seconds
<b>Memory limit per test:</b> 256 megabytes

Vasily the bear has got a large square white table of \(n\) rows and \(n\) columns. The table has got a black border around this table.

<img i1>
The example of the initial table at \(n = 5\).

Vasily the bear wants to paint his square table in exactly \(k\) moves. Each move is sequence of actions:

1. The bear chooses some square inside his table. At that the square must have a black border painted around it. Also, the square shouldn't contain a black cell. The number of cells in the square shouldn't be less than 2.

2. The bear chooses some row and some column inside the chosen square. Then he paints each cell of this row and this column inside the chosen square. After that the rectangles, formed by the square's border and the newly painted cells, must be squares of a non-zero area.
<img i2>
An example of correct painting at \(n = 7\) and \(k = 2\).

The bear already knows numbers \(n\) and \(k\). Help him — find the number of ways to paint the square in exactly \(k\) moves. Two ways to paint are called distinct if the resulting tables will differ in at least one cell. As the answer can be rather large, print the remainder after dividing it by 7340033.

<b>Input</b>

The first line contains integer \(q\) \((1 \leq q \leq 10^5)\) — the number of test data.

Each of the following \(q\) lines contains two integers \(n\) and \(k\) \((1 \leq n \leq 10^9, 0 \leq k \leq 1000)\) — the size of the initial table and the number of moves for the corresponding test.

<b>Output</b>

For each test from the input print the answer to the problem modulo 7340033. Print the answers to the tests in the order in which the tests are given in the input.

<b>Note</b>

All possible painting ways for the test \(n = 7\) and \(k = 2\) are:
<img i3>





Trying to recursively do every possible combination of operations will easily time limit, since it grows exponentially.

But we can notice a few things about the operation:

Let the "length of the square" denote its side length.

1-The first operation must always choose the whole square (because no other square of cells is bounded), which must be of odd length, and will color the column and row right through the middle, a square of odd length only has an answer is \(k = 0\).

Let us prove this claim:
Assume the column splits the initial square of length \(n\) into two rectangles, of widths \(w_1\) and \(w_2\), at this point both of them have length \(n\). now let us color any row that splits them into lengths \(l_1, l_2\). Now the problem requires this cut to result in only squares. the four rectangles we get are of dimensions \((l_1, w_1), (l_2, w_1), (l_1, w_2), (l_2, w_2)\). Notice that every pair of dimensions form a square, this must mean that \(w_1 = w_2 = l_1 = l_2\), which means that if the square is of odd length we can only split in the middle, and if it is even length we cannot do any splits, because if we color any column an odd number of columns remain, which cannot be evenly divided.

This means that the first operation is decided, furthermore, it produces 4 more squares. Now since these squares are divided by black cells, we have to use our next operations completely inside one of them. Notice that we are solving the same problem on a smaller input size, this suggests a dynamic programming approach.

Furthermore note that it reduces logarithmically since the operation divides the square in half.

let \(dp_{i, j}\) be the number of ways we can perform \(j\) operations on an initial square of size \(i\).

We previously described the even case, \(dp_{i, j} = [j = 0], where\ i \equiv 0 \mod 2\), where \([p]\) is the Iverson notation, \([p] = 1 \text{if } p, \text{else } 0.\)

Otherwise, for odd \(i\).
\(dp_{i, 0} = 1\).
\(dp_{i, j} = \sum\limits_{x, y, z, l, x + y + z + l = j - 1}dp_{\lfloor \frac{i}{2} \rfloor, x} \cdot dp_{\lfloor \frac{i}{2} \rfloor, y} \cdot dp_{\lfloor \frac{i}{2} \rfloor, z} \cdot dp_{\lfloor \frac{i}{2} \rfloor, l}\)

In other words, we loop over all possible combinations of \(j - 1\) operations, the first operation being applied on the big square.

Now this clearly runs in quartic time, we can \(l\) from the first \(3\) but this is still cubic time per query, we need to find a faster solution.

We will try to find a representation for the same answer as a polynomial that we can then compute quickly using a convolution, as is usually the case in combinatorial problems.




#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
int main(){
    int q;
    cin >> q;
    while(q--){
        int n, k;
        cin >> n >> k;
    }
}




Assume we keep doing the operation on the top left square, it will keep getting smaller until we get to an even square.

Consider the binary representation of the number. its parity is the least significant bit, and the operation we do is a right shift by \(1\).

This means that if the number has \(\nu\) trailing ones in its binary representation, we will be able to do the operation \(\nu\) times, this means that the number itself doesn't matter, each \(n\) with the same number of trailing ones will produce the same result.

This means that we need to calculate the answer for at most \(\log_2n\) distinct values of \(n\), because numbers matching in trailing ones are the same.





Now we can change the state to \(dp_{\nu, j}\), the transitions stay almost the same, but instead of moving to \(dp_{\lfloor\frac{n}{2}\rfloor}\) we just go to \(dp_{\nu-1}\). (since, as we explained, they represent the same thing)

But this still doesn't solve our problem of having a slow recurrence, for this we can look at \(dp_\nu\) as a polynomial, where \(dp_{\nu, j}\) is the coefficient of \(x^j\).

Consider a polynomial \(P\), where \(P_i\) is the coefficient of \(x^i\). the coefficient of \(x^i\) in \(P^4\) is the sum of products of all combinations of terms whose powers of \(x\) add up to \(i\).

Now the definition of \(dp_{\nu, j}\) as the sum of all combinations of sums of \(j - 1\) divided over 4 elements is <b>almost</b> the same as saying that \(dp_\nu = (dp_{\nu - 1}) ^ 4\) , this would have been exactly true of \(dp_{\nu, j} = \sum\limits_{x, y, z, l, x + y + z + l \bf{= j}} dp_{\nu-1, x} \cdot dp_{\nu-1, y} \cdot dp_{\nu-1, z} + dp_{\nu-1, l}\). rather than \(\bf{j - 1}\). That is, the coefficient of \(x^j\) in the new polynomial would be the sum of all combinations of coefficients that add up to \(j\). we can just multiply the final polynomial by \(x\) to "right-shift" the coefficients.

The reason we do this is that now polynomial multiplication can be done quickly under modulo using number theoretic transform. using this we can just calculate \(dp_{\nu, j}, \nu \leq 30, j \leq 1000\). and then answer each query in \(O(1)\), which should easily pass.

But notice that we do not even need to use NTT, \(P^4 = {P^2}^2\), and we can square a polynomial naively in quadratic time, this needs we need to square the polynomial in total \(60\) times, which should pass under \(k \leq 1000\).

Let us first build a function to square a polynomial naively, notice that we will limit the coefficients at around \(x^{1000}\), the maximal \(k\), we will use a size a little bit higher to avoid runtime and off-by-one errors.





#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
void square(vector<long long> &poly) {
    vector<long long> ans(1010);
    for(int i = 0 ; i < ans.size(); i++){
        for(int j = 0; j <= i; j++){
            int k = i - j;
            if(k < poly.size()){
                ans[i] += poly[j] * poly[k] % mod;
                ans[i] %= mod;
            }
        }
    }
    poly = ans;
}
int main(){
    int q;
    cin >> q;
    while(q--){
        int n, k;
        cin >> n >> k;
    }
}




Let us test this function, we will try it on polynomial \(f(x) = 1 + x + 3x^2\), whose square should be \(1 + 2x + 7x^2 + 6x^3 + 9x^4\).





#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
void square(vector<long long> &poly) {
    vector<long long> ans(1010);
    for(int i = 0 ; i < ans.size(); i++){
        for(int j = 0; j <= i; j++){
            int k = i - j;
            if(k < poly.size()){
                ans[i] += poly[j] * poly[k] % mod;
                ans[i] %= mod;
            }
        }
    }
    poly = ans;
}
int main(){
    vector<long long> poly = {1, 1, 3};
    poly.resize(1010);
    square(poly);
    for(int i = 0; i < 6; i++)
        cout << poly[i] << " ";
    cout << endl;
    int q;
    cin >> q;
    while(q--){
        int n, k;
        cin >> n >> k;
    }
}




0




Let us remove the debug statements.




#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
void square(vector<long long> &poly) {
    vector<long long> ans(1010);
    for(int i = 0 ; i < ans.size(); i++){
        for(int j = 0; j <= i; j++){
            int k = i - j;
            if(k < poly.size()){
                ans[i] += poly[j] * poly[k] % mod;
                ans[i] %= mod;
            }
        }
    }
    poly = ans;
}
int main(){
    int q;
    cin >> q;
    while(q--){
        int n, k;
        cin >> n >> k;
    }
}




It is working, let us return to the polynomial view of \(dp_i\).

Base case:
\(dp_0 = 1\) (Even case, = \(x^0\)).
\(dp_1 = 1 + x\) (either 1 or 0 divisions).

Notice the special case when \(n = 1\), we cannot do any operations because the requirement is that squares have non-zero area.

Otherwise, \(dp_i = dp_{i-1}^4\), right shifted, as we have previously shown.




#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
void square(vector<long long> &poly) {
    vector<long long> ans(1010);
    for(int i = 0 ; i < ans.size(); i++){
        for(int j = 0; j <= i; j++){
            int k = i - j;
            if(k < poly.size()){
                ans[i] += poly[j] * poly[k] % mod;
                ans[i] %= mod;
            }
        }
    }
    poly = ans;
}

int main(){
    int q;
    cin >> q;
    vector<vector<long long>> dp(31, vector<long long>(1010));
    dp[0] = {1};
    dp[1] = {1, 1};
    for(int i = 2; i < 31; i++){
        dp[i] = dp[i-1];
        square(dp[i]);
        square(dp[i]);
        for(int j = 1009; j >= 1; j--){
            dp[i][j] = dp[i][j - 1];
        }
        dp[i][0] = 1;
    }
    while(q--){
        int n, k;
        cin >> n >> k;
    }
}




Finally, count the number of leftmost ones, again notice that we cannot do any operations on \(1\), then answer the question from the precomputed array.




#include<bits/stdc++.h>
using namespace std;
const int mod = 7340033;
void square(vector<long long> &poly) {
    vector<long long> ans(1010);
    for(int i = 0 ; i < ans.size(); i++){
        for(int j = 0; j <= i; j++){
            int k = i - j;
            if(k < poly.size()){
                ans[i] += poly[j] * poly[k] % mod;
                ans[i] %= mod;
            }
        }
    }
    poly = ans;
}

int main(){
    int q;
    cin >> q;
    vector<vector<long long>> dp(31, vector<long long>(1010));
    dp[0] = {1};
    dp[1] = {1, 1};
    for(int i = 2; i < 31; i++){
        dp[i] = dp[i-1];
        square(dp[i]);
        square(dp[i]);
        for(int j = 1009; j >= 1; j--){
            dp[i][j] = dp[i][j - 1];
        }
        dp[i][0] = 1;
    }
    while(q--){
        int n, k;
        cin >> n >> k;
        int v = 0;
        while(n > 1 && (n & 1)){
            n >>= 1;
            v++;
        }
        cout << dp[v][k] << endl;
    }
}




8
1 0
1 1
3 0
3 1
2 0
2 1
3 2
7 2




Let us test the maximal odd case to avoid runtime errors and segfaults. Even though the answer is hard to calculate manually, we just want to make sure we do not access memory out of bounds, or cause overflows.

The input would then be:
<tt>
1
999999999 1000
</tt>

Notice that we do not test \(10^9\) because the answer is trivially 0, as we have shown.

We expect a non-negative integer without runtime errors.




1
999999999 1000