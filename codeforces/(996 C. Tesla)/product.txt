<b>C. Tesla</b>
time limit per test: 3 seconds
memory limit per test: 256 megabytes

Allen dreams of one day owning a enormous fleet of electric cars, the car of the future! He knows that this will give him a big status boost. As Allen is planning out all of the different types of cars he will own and how he will arrange them, he realizes that he has a problem.

Allen's future parking lot can be represented as a rectangle with 4 rows and \(n (n≤50)\) columns of rectangular spaces, each of which can contain at most one car at any time. He imagines having \(k (k ≤2n)\) cars in the grid, and all the cars are initially in the second and third rows. Each of the cars also has a different designated parking space in the first or fourth row. Allen has to put the cars into corresponding parking places.

<img 1>
Illustration to the first example.
However, since Allen would never entrust his cars to anyone else, only one car can be moved at a time. He can drive a car from a space in any of the four cardinal directions to a neighboring empty space. Furthermore, Allen can only move one of his cars into a space on the first or fourth rows if it is the car's designated parking space.

Allen knows he will be a very busy man, and will only have time to move cars at most 20000 times before he realizes that moving cars is not worth his time. Help Allen determine if he should bother parking his cars or leave it to someone less important.

<b>Input</b>
The first line of the input contains two space-separated integers \(n\) and \(k (1≤n≤50, 1≤k≤2n)\), representing the number of columns and the number of cars, respectively.

The next four lines will contain \(n\) integers each between 0 and \(k\) inclusive, representing the initial state of the parking lot. The rows are numbered 1 to 4 from top to bottom and the columns are numbered 1 to \(n\) from left to right.

In the first and last line, an integer \(1≤x≤k\) represents a parking spot assigned to car \(x\) (you can only move this car to this place), while the integer 0 represents a empty space (you can't move any car to this place).

In the second and third line, an integer \(1≤x≤k\) represents initial position of car \(x\), while the integer 0 represents an empty space (you can move any car to this place).

Each \(x\) between 1 and \(k\) appears exactly once in the second and third line, and exactly once in the first and fourth line.

<b>Output</b>
If there is a sequence of moves that brings all of the cars to their parking spaces, with at most 20000
 car moves, then print \(m\), the number of moves, on the first line. On the following \(m\) lines, print the moves (one move per line) in the format \(i\) \(r\) \(c\), which corresponds to Allen moving car \(i\) to the neighboring space at row \(r\) and column \(c\).

If it is not possible for Allen to move all the cars to the correct spaces with at most 20000 car moves, print a single line with the integer −1.

<b>Note</b>
In the first sample test case, all cars are in front of their spots except car 5, which is in front of the parking spot adjacent. The example shows the shortest possible sequence of moves, but any sequence of length at most 20000 will be accepted.

In the second sample test case, there is only one column, and the cars are in the wrong order, so no cars can move and the task is impossible.







This problem can be solved using a naive algorithm.
If all elements in rows 2 and 3 are filled with cars, then no car can move to rows 1 or 4. Therefore, it is clear that we cannot make any valid moves. In this case, the answer is -1.
Otherwise, we can cycle all cars located in rows 2 and 3 in \(k\) moves. By implementing these cycling operations \(2 \cdot n\) times, if a car can move to its parking spot, we should move it to the destination immediately. Overall, with this approach, we can arrange all cars in their parking spots within \(2nk + k\) operations, which is a valid answer because \(2nk + k \leq 10100 \leq 20000\).





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    return 0;
}






Let's count the number of elements that is not 0. If this value is not \(2 \cdot k\), then answer is -1.





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    int cars = k;

    for (int i = 0; i < n; ++i) {
        if (grid[0][i]) cars++;
        if (grid[3][i]) cars++;
    }
    
    if(cars != 2 * k) puts("-1"), exit(0);

    
    return 0;
}






While cycling the cars in rows 2, and 3, let's check that if there is a car that can be moved to its destination.





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    int cars = k;
    vector<vector<int>> ans;

    for (int i = 0; i < n; ++i) {
        if (grid[0][i]) cars++;
        if (grid[3][i]) cars++;
    }
    
    if(cars != 2 * k) puts("-1"), exit(0);

    while (cars) {
        for (int i = 0; i < n; ++i) {
            if (grid[0][i] == grid[1][i] && grid[0][i]) {
                ans.push_back({grid[1][i], 1, i + 1});
                grid[1][i] = 0;
                cars--;
            }
            if (grid[2][i] == grid[3][i] && grid[2][i]) {
                ans.push_back({grid[2][i], 4, i + 1});
                grid[2][i] = 0;
                cars--;
            }
        }

        
    }
    cout << ans.size() << endl;
    for (auto &a : ans) {
        cout << a[0] << " " << a[1] << " " << a[2] << endl;
    }
    return 0;
}






After implementing the move for cars that can move in one action, if all elements in rows 2 and 3 are already filled with cars, then we cannot move the cars. In this case, the answer is -1.





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    int cars = k;
    vector<vector<int>> ans;

    for (int i = 0; i < n; ++i) {
        if (grid[0][i]) cars++;
        if (grid[3][i]) cars++;
    }
    
    if(cars != 2 * k) puts("-1"), exit(0);

    while (cars) {
        for (int i = 0; i < n; ++i) {
            if (grid[0][i] == grid[1][i] && grid[0][i]) {
                ans.push_back({grid[1][i], 1, i + 1});
                grid[1][i] = 0;
                cars--;
            }
            if (grid[2][i] == grid[3][i] && grid[2][i]) {
                ans.push_back({grid[2][i], 4, i + 1});
                grid[2][i] = 0;
                cars--;
            }
        }

        vector<int> temp = grid[1];
        vector<int> temp2 = grid[2];

        if (find(temp.begin(), temp.end(), 0) == temp.end() && 
            find(temp2.begin(), temp2.end(), 0) == temp2.end()) {
            puts("-1"), exit(0);
        }
    }

    cout << ans.size() << endl;
    for (auto &a : ans) {
        cout << a[0] << " " << a[1] << " " << a[2] << endl;
    }
    return 0;
}






We can erase 1 from \(cars\), after make one movement. If \(cars = 0\), it means that we already moved all cars to their destination.





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    int cars = k;
    vector<vector<int>> ans;

    for (int i = 0; i < n; ++i) {
        if (grid[0][i]) cars++;
        if (grid[3][i]) cars++;
    }
    
    if(cars != 2 * k) puts("-1"), exit(0);

    while (cars) {
        for (int i = 0; i < n; ++i) {
            if (grid[0][i] == grid[1][i] && grid[0][i]) {
                ans.push_back({grid[1][i], 1, i + 1});
                grid[1][i] = 0;
                cars--;
            }
            if (grid[2][i] == grid[3][i] && grid[2][i]) {
                ans.push_back({grid[2][i], 4, i + 1});
                grid[2][i] = 0;
                cars--;
            }
        }

        vector<int> temp = grid[1];
        vector<int> temp2 = grid[2];

        if (find(temp.begin(), temp.end(), 0) == temp.end() && 
            find(temp2.begin(), temp2.end(), 0) == temp2.end()) {
            puts("-1"), exit(0);
        }
        
        if (accumulate(temp.begin(), temp.end(), 0) + 
                   accumulate(temp2.begin(), temp2.end(), 0) == 0 || !cars) {
            cars = 0;
            break;
        }
    }

    cout << ans.size() << endl;
    for (auto &a : ans) {
        cout << a[0] << " " << a[1] << " " << a[2] << endl;
    }
    return 0;
}






Now, we only need to implement the cycle operation for rows 2 and 3. Let's implement the cycle operation by updating \(ans\) and \(grid\).





#include<bits/stdc++.h>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<vector<int>> grid(4, vector<int>(n));
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < n; ++j)
            cin >> grid[i][j];

    int cars = k;
    vector<vector<int>> ans;

    for (int i = 0; i < n; ++i) {
        if (grid[0][i]) cars++;
        if (grid[3][i]) cars++;
    }
    
    if(cars != 2 * k) puts("-1"), exit(0);

    while (cars) {
        for (int i = 0; i < n; ++i) {
            if (grid[0][i] == grid[1][i] && grid[0][i]) {
                ans.push_back({grid[1][i], 1, i + 1});
                grid[1][i] = 0;
                cars--;
            }
            if (grid[2][i] == grid[3][i] && grid[2][i]) {
                ans.push_back({grid[2][i], 4, i + 1});
                grid[2][i] = 0;
                cars--;
            }
        }

        vector<int> temp = grid[1];
        vector<int> temp2 = grid[2];

        if (find(temp.begin(), temp.end(), 0) == temp.end() && 
            find(temp2.begin(), temp2.end(), 0) == temp2.end()) {
            puts("-1"), exit(0);
        }
        
        if (accumulate(temp.begin(), temp.end(), 0) + 
                   accumulate(temp2.begin(), temp2.end(), 0) == 0 || !cars) {
            cars = 0;
            break;
        }

        for (int i = 1; i < n; ++i) {
            if (temp[i - 1] && !grid[1][i]) {
                grid[1][i] = temp[i - 1];
                grid[1][i - 1] = 0;
                ans.push_back({temp[i - 1], 2, i + 1});
            }
        }

        for (int i = n - 2; i >= 0; --i) {
            if (temp2[i + 1] && !grid[2][i]) {
                ans.push_back({temp2[i + 1], 3, i + 1});
                grid[2][i] = temp2[i + 1];
                grid[2][i + 1] = 0;
            }
        }

        if (temp2[0] && !grid[1][0]) {
            ans.push_back({temp2[0], 2, 1});
            grid[1][0] = temp2[0];
            grid[2][0] = 0;
        }

        if (temp[n - 1] && !grid[2][n - 1]) {
            ans.push_back({temp[n - 1], 3, n});
            grid[2][n - 1] = temp[n - 1];
            grid[1][n - 1] = 0;
        }
    }

    cout << ans.size() << endl;
    for (auto &a : ans) {
        cout << a[0] << " " << a[1] << " " << a[2] << endl;
    }
    return 0;
}






4 5
1 2 0 4
1 2 0 4
5 0 0 3
0 5 0 3






This different from sample output. Let's check if I have got the correct result:
Initial situation:
<code>
1 2 0 4
1 2 0 4
5 0 0 3
0 5 0 3
</code>
1 1 1
<code>
# 2 0 4
0 2 0 4
5 0 0 3
0 5 0 3
</code>
2 1 2
<code>
# # 0 4
0 0 0 4
5 0 0 3
0 5 0 3
</code>
4 1 4
<code>
# # 0 #
0 0 0 0
5 0 0 3
0 5 0 3
</code>
3 4 4
<code>
# # 0 #
0 0 0 0
5 0 0 0
0 5 0 #
</code>
5 2 1
<code>
# # 0 #
5 0 0 0
0 0 0 0
0 5 0 #
</code>
5 2 2
<code>
# # 0 #
0 5 0 0
0 0 0 0
0 5 0 #
</code>
5 2 3
<code>
# # 0 #
0 0 5 0
0 0 0 0
0 5 0 #
</code>
5 2 4
<code>
# # 0 #
0 0 0 5
0 0 0 0
0 5 0 #
</code>
5 3 4
<code>
# # 0 #
0 0 0 0
0 0 0 5
0 5 0 #
</code>
5 3 3
<code>
# # 0 #
0 0 0 0
0 0 5 0
0 5 0 #
</code>
5 3 2
<code>
# # 0 #
0 0 0 0
0 5 0 0
0 5 0 #
</code>
5 4 2
<code>
# # 0 #
0 0 0 0
0 0 0 0
0 # 0 #
</code>
As you can see the steps, I moved all cars to their destinations in 12 moves.
12 < 20000, so this answer is a valid answer.





Let's check the custom corner case, where \(n\) is its maximum value (\(n = 50\)), and \(k\) is its minimum value (\(k = 1\)).
<b>Input</b>
<code>
50 1
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</code>
Here, the first car is located at \((3, 3)\) and its destination is \((1, 1)\). The movement of the first car will be as follows:  
\((3, 3) \rightarrow (3, 2) \rightarrow (3, 1) \rightarrow (2, 1) \rightarrow (1, 1)\)
So the answer will be as follows:
<b>Output</b>
<code>
4
1 3 2
1 3 1
1 2 1
1 1 1
</code>