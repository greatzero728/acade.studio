<b>C. Exams</b>
time limit per test: 1 second
memory limit per test: 256 megabytes

Student Valera is an undergraduate student at the University. His end of term exams are approaching and he is to pass exactly \(n\) exams. Valera is a smart guy, so he will be able to pass any exam he takes on his first try. Besides, he can take several exams on one day, and in any order.

According to the schedule, a student can take the exam for the \(i\)-th subject on the day number \(a_i\). However, Valera has made an arrangement with each teacher and the teacher of the \(i\)-th subject allowed him to take an exam before the schedule time on day \(b_i (b_i < a_i)\). Thus, Valera can take an exam for the \(i\)-th subject either on day \(a_i\), or on day \(b_i\). All the teachers put the record of the exam in the student's record book on the day of the actual exam and write down the date of the mark as number \(a_i\).

Valera believes that it would be rather strange if the entries in the record book did not go in the order of non-decreasing date. Therefore Valera asks you to help him. Find the minimum possible value of the day when Valera can take the final exam if he takes exams so that all the records in his record book go in the order of non-decreasing date.

<b>Input</b>
The first line contains a single positive integer \(n (1 ≤ n ≤ 5000)\) — the number of exams Valera will take.

Each of the next n lines contains two positive space-separated integers \(a_i\) and \(b_i (1 ≤ b_i < a_i ≤ 10^9)\) — the date of the exam in the schedule and the early date of passing the \(i\)-th exam, correspondingly.

<b>Output</b>
Print a single integer — the minimum possible number of the day when Valera can take the last exam if he takes all the exams so that all the records in his record book go in the order of non-decreasing date.

<b>Note</b>
In the first sample Valera first takes an exam in the second subject on the first day (the teacher writes down the schedule date that is 3). On the next day he takes an exam in the third subject (the teacher writes down the schedule date, 4), then he takes an exam in the first subject (the teacher writes down the mark with date 5). Thus, Valera takes the last exam on the second day and the dates will go in the non-decreasing order: 3, 4, 5.

In the second sample Valera first takes an exam in the third subject on the fourth day. Then he takes an exam in the second subject on the fifth day. After that on the sixth day Valera takes an exam in the first subject.





The problem requires us to find the minimum possible day when Valera can take the final exam if he takes exams so that all the records in his record book go in the order of non-decreasing date. We are given the number of exams, n, and for each exam, we have two dates, a and b, where a is the scheduled date and b is the early date.

With a naive algorithm, we must iterate through all possible orders of exams, resulting in a time complexity of \(O(n!)\). For each order, we need to verify that, after taking the exams, all records are arranged in non-decreasing order.
Howeber \(n \leq 5000\), so we can't solve this problem with this naive approach. We will get time limit exceed error if we use this naive approach.

To solve this problem, we need to find the optimal order of taking exams such that the dates in the record book are in non-decreasing order. We can start by sorting the exams based on their scheduled dates. Then, we can iterate through the sorted exams and for each exam, we check if we can take it on the early date or not.

If we can take it on the early date, we update the current date to the early date. Otherwise, we update the current date to the scheduled date. The final answer will be the current date after iterating through all exams.

The time complexity of this solution is \(O(n \cdot log(n))\) due to sorting and iterating through the exams.





#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;

int main() {
    int n;
    cin >> n;

    vector<pii> exams(n);
    for (int i = 0; i < n; i++) {
        cin >> exams[i].first >> exams[i].second;
    }

    sort(exams.begin(), exams.end());

    return 0;
}





Now that we have the sorted exams, we can iterate through them and check if we can take each exam on the early date or not. We can use a variable, \(current\_date\), to keep track of the current date. If we can take an exam on the early date, we update \(current\_date\) to the early date. Otherwise, we update \(current\_date\) to the scheduled date. The final answer will be the \(current\_date\) after iterating through all exams.

We also need to handle the case where we can take multiple exams on the same early date. In this case, we should take the exam with the earliest scheduled date first.





#include <bits/stdc++.h>

using namespace std;

typedef pair<int, int> pii;

int main() {
    int n;
    cin >> n;

    vector<pii> exams(n);
    for (int i = 0; i < n; i++) {
        cin >> exams[i].first >> exams[i].second;
    }

    sort(exams.begin(), exams.end());

    int current_date = 0;
    int max_scheduled_date = 0;

    for (int i = 0; i < n; i++) {
        max_scheduled_date = max(max_scheduled_date, exams[i].first);
        if (exams[i].second >= current_date) {
            current_date = exams[i].second;
        } else {
            current_date = max_scheduled_date;
        }
    }

    cout << current_date << endl;

    return 0;
}





Let's add a custom corner case, where \(n\) is its minimum value: \(n = 1\).
In this case, Valera can simply finish his exam in day \(b_1\), so the answer will be \(b_1\).
<b>Input</b>
<code>
1
5 2
</code>
So, in this custom case, the answer will be \(b_1 = 2\).






1
5 2