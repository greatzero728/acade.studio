D. Maximum Value
time limit per test: 1 second
memory limit per test: 256 megabytes

You are given a sequence a consisting of n integers. Find the maximum possible value of \((a_i\ mod\ a_j)\) (integer remainder of \(a_i\) divided by \(a_j\)), where 1 ≤ i, j ≤ n and \(a_i ≥ a_j\).

Input
The first line contains integer n — the length of the sequence (\(1 ≤ n ≤ 2·10^5\)).

The second line contains n space-separated integers \(a_i (1 ≤ a_i ≤ 10^6)\).

Output
Print the answer to the problem.




\(\bullet\) The naive algorithm is that iterate all possible (i, j) pairs (where, 1 ≤ i, j ≤ n and \(a_i \geq a_j\)), and maximize answer with \(a_i \% a_j\). The time complexity of this naive algorithm is \(O(n ^ 2)\), so this algorithm will get time limit exceed error result for \(n \leq 2 \cdot 10 ^ 5\).


\(\bullet\) We have to maximize \(a_i \% a_j\). (where, 1 ≤ i, j ≤ n and \(a_i \geq a_j\))
Let's sort the array \(a\) in time complexity \(O(n \log(n))\), to make the problem more easier.

\(a_i \% a_j = a_i - \left\lfloor \frac{a_i}{a_j} \right\rfloor \cdot a_j\) is hold.
Here \(\left\lfloor \frac{a_i}{a_j} \right\rfloor \cdot a_j \leq a_i < \left( \left\lfloor \frac{a_i}{a_j} \right\rfloor + 1 \right) \cdot a_j\).

Here, we can iterate distinct \(a_j\) and for \(a_j\), we can iterate \(2 \cdot a_j, 3 \cdot a_j, 4 \cdot a_j, ...\) for the candidate of \(\left( \left\lfloor \frac{a_i}{a_j} \right\rfloor + 1 \right) \cdot a_j\).

\(\cdot\) For each distinct \(a_j\), we need to find the maximum \(a_i\) where \(a_i < 2 \cdot a_j\), and update the answer with \(a_i - a_j\).
\(\cdot\) For each distinct \(a_j\), we need to find the maximum \(a_i\) where \(a_i < 3 \cdot a_j\), and update the answer with \(a_i - 2 \cdot a_j\).
\(\cdot\) Similarly, we need to check for all the multiples of \(a_j\), so that we can maximize the answer.

\(\cdot\) Since the value of \(a_j\) can be at most \(10^6\), so for each distinct \(a_j\), we need to check at most \(\frac{10^6}{a_j}\) multiples of \(a_j\).

In the worst case, the number of operations can be expressed as \(N \cdot \left(1 + \frac{1}{2} + \frac{1}{3} + \ldots + \frac{1}{N}\right)\), which approximates to \(N \cdot \log(N)\) due to the properties of the harmonic series. Therefore, the total number of operations is about \(O(N \log(N))\). (Here, \(N\) is \(10^6\))

\(\bullet\) Now, we need to find the maximum value of \(a_i\) that is less than each possible candidate of \(\left( \left\lfloor \frac{a_i}{a_j} \right\rfloor + 1 \right) \cdot a_j\).
To find the maximum value of \(a_i\) that is less than each possible candidate of \(\left( \left\lfloor \frac{a_i}{a_j} \right\rfloor + 1 \right) \cdot a_j\), we can use a dynamic programming table \(dp\) where \(dp[k]\) stores the maximum value of \(a_i\) that is less than or equal to \(k\) in time complexity O(N).
The initial state of \(dp\) is that all elements are equal to 0.
To calculate \(dp[k]\), we need to iterate over the array \(a\) and for each \(a_i\) update the value of \(dp[a_i]\) to be \(a_i\). After that, we need to iterate over the array \(dp\) and for each \(dp[i]\) update the value of \(dp[i]\) to be \(\max(dp[i], dp[i - 1])\).

So the time complexity of my algorithm is \(O(n \log(n) + N \log(N))\).







#include<bits/stdc++.h>
#define ll long long
using namespace std;
const int maxn = 2e5 + 5;
int n;
int a[maxn];
int main()
{
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
        scanf("%d", &a[i]);
    sort(a + 1, a + n + 1);
    int m = unique(a + 1, a + n + 1) - a - 1;
    int ans = 0;
    int dp[1000005];
    for (int i = 0; i < 1000005; i++)
        dp[i] = 0;
    for (int i = 1; i <= m; i++)
        dp[a[i]] = a[i];
    for (int i = 1; i <= 1000000; i++)
        dp[i] = max(dp[i], dp[i - 1]);
    for (int i = 1; i <= m; i++) {
        int j = 1;
        while (a[i] * j <= 1000000) {
            ans = max(ans, dp[min(1000000, a[i] * j + a[i] - 1)] - a[i] * j);
            j++;
        }
    }
    printf("%d\n", ans);
}




Let's check a custom corner case, where n and \(a_i\) are their minimum value: \(n = 1, a_i = 1\).
1
1
In this case, all possible (i, j) pairs are only (1, 1), so the answer for this test case will be \(a_1 \% a_1 = 1 \% 1 = 0\).




1
1