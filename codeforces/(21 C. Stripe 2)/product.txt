Problem Statement:
<b>Stripe 2</b>
time limit per test: 1 second
memory limit per test: 64 megabytes
Once Bob took a paper stripe of \(n\) squares (the height of the stripe is \(1\) square). In each square he wrote an integer number, possibly negative. He became interested in how many ways exist to cut this stripe into three pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece, and each piece contains positive integer amount of squares. Would you help Bob solve this problem?

<b>Input</b>
The first input line contains integer \(n\) \((1 ≤ n ≤ 10^5)\) — amount of squares in the stripe. The second line contains \(n\) space-separated numbers — they are the numbers written in the squares of the stripe. These numbers are integer and do not exceed \(10000\) in absolute value.

<b>Output</b>
Output the amount of ways to cut the stripe into three non-empty pieces so that the sum of numbers from each piece is equal to the sum of numbers from any other piece. Don't forget that it's allowed to cut the stripe along the squares' borders only.





The naive solution is to compare the sum of numbers in each piece for every way of cutting the origin paper. But this takes too long time.
Let's denote the sum of first \(i\) numbers by \(sum_i\).
Let's assume that we can cut the paper between \(i\)-th and \((i+1)\)-th squares and between \(j\)-th and \((j+1)\)-th squares such that the sum of numbers of each piece is the same.
The sum of numbers in the first piece is \(sum_i\). And the sum is \(sum_j-sum_i\) for the second piece, \(sum_n-sum_j\) for third piece.
\(sum_i=sum_j-sum_i=sum_n-sum_j\).
So \(sum_j=2\cdot sum_i, sum_n = 3\cdot sum_i\).
If \(sum_n\) is not divided by \(3\), the answer is \(0\).
Otherwise, \(sum_i=\frac{sum_n}{3}\). Let's denote \(\frac{sum_n}{3}\) by \(s\).
Then we have to count pair \((i, j)\) such that \(1\leq i < j < n\) and \(sum_i=s, sum_j=2s\).
Let's count the number of index \(i\) which \(sum_i=s\).
When we find \(j\) which \(sum_j=2s\), we can increase the answer by the number of \(i\) which \(sum_i=s\) and \(1\leq i<j\). For every iteration, if \(sum_i=s\), we have to increase the count by 1.
Let's take the input.





#include <bits/stdc++.h>
using namespace std;
#define N 100010

int n;
int a[N];

int main(){
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> a[i];
}






Calculate \(sum_i\).
If \(sum_n\) is not divided by 3, print \(0\).





#include <bits/stdc++.h>
using namespace std;
#define N 100010

int n;
int a[N];
int sum[N];

int main(){
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> a[i];
	for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i];
	if (sum[n] % 3 != 0) {
		puts("0");
		return 0;
	}	
}





Calculate \(s=\frac{sum_n}{3}\).
Initiate \(ans\) which denotes the total number of pair \((i, j)\) that satisfies with the condition. It may be larger than \(int\) size, so use a \(long\) \(long\) variable.
Initiate \(cnt\) which denotes the number of \(i\) such that \(sum_i=s\).
For every iterator, if \(sum_i=2s\), increase \(ans\) by \(cnt\). If \(sum_i=s\), increase \(cnt\) by 1.
Print the answer.





#include <bits/stdc++.h>
using namespace std;
#define N 100010

int n;
int a[N];
int sum[N];

int main(){
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> a[i];
	for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + a[i];
	if (sum[n] % 3 != 0) {
		puts("0");
		return 0;
	}	
	int s = sum[n] / 3;
	long long ans = 0;
	int cnt = 0;
	if (sum[1] == s) cnt++;
	for (int i = 2; i <= n - 1; i++) {
		if (sum[i] == 2 * s) {
			ans += cnt;
		}
		if (sum[i] == s) cnt++;
	} 
	cout << ans << endl;
}





Let's test with custom input for the smallest \(n\).

Input
1
3

There is only 1 square, so we can't cut the paper into 3 pieces which have at least one square each. The answer is 0.

Expected answer
0





1
3