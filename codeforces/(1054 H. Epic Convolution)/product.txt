H. Epic Convolution
time limit per test4 seconds
memory limit per test256 megabytes

You are given two arrays \(a_0,a_1,…,a_{n−1}\) and \(b_0,b_1,…,b_{m−1}\), and an integer c.

Compute the following sum:

\(\sum_{i=0}^{n-1} \sum_{j=0}^{m-1} a_i b_j c i^2 j^3\)

Since it's value can be really large, print it modulo 490019.

Input
First line contains three integers n, m and c (1≤n,m≤100000, 1≤c<490019).

Next line contains exactly n integers ai and defines the array a (0≤ai≤1000).

Last line contains exactly m integers bi and defines the array b (0≤bi≤1000).

Output
Print one integer — value of the sum modulo 490019.

Note
In the first example, the only non-zero summand corresponds to i=1, j=1 and is equal to 1⋅1⋅31=3.

In the second example, all summands are equal to 1.




This is a tutorial about this problem:
The given modulo 490019 is a prime one.

Note, that value of c(i2j3), according to the Fermat's theorem, depends only on the \((i^2j^3)\)mod(490019−1).

The main idea is that we want to end up with something like polynomial \(∑c_tx^t\), where t would be \((i^2j^3)\)mod(490019−1) and \(c_t\) is sum of corresponding \(a_ib_j\).

If we have such a polynomial, we can easily compute the final answer.

Now time to notice, that the given modulo was... a bit non standard.

Notice, that phi=490019−1=490018=2⋅491⋅499.

As chinese remainder theorem suggests, x mod phi is equivalent to (x mod 2,x mod 491,x mod 499) (for all x)

And instead of multiplying resiudes modulo phi we can multiply (and computing squares and cubes) the elements of this tuple pairwise.

Let's ignore the first component for a while(suppose x mod 2 =0).

Since the numbers 491 and 499 are prime, they have a primitive roots.

Let's compute discrete logarithms of the residues of \(i^2\)'s and \(j^3\)'s modulo 491 and 499.

(There is some trouble if the residue is zero, but let's skip for now).

And now we left only with multiplication.

But since we have taken log's multiplication becomes summation. So we can apply a polynomial multiplication to solve the problem.

Basically, we have two polynomials of form \(∑_{i,j}c_{i,j}x^iy^j\) (from array a and array b), where i is logarithm of residue modulo 491 and j is logarithm of residue modulo 499.

We can multiply these polynomials with fft! A 2d polynomial is matrix of it's coefficients. A 2d fft is matrix of it's values in \((w_n^i,w_m^j)\).

One can prove, that to have 2d fft we can just apply fft on all lines and then on all columns (or vice versa).

The rest is as usual, multiply fft's values pointwise, then inverse fft and examine the result as we stated in the begining of editorial.

We need to deal with cases when residue is equal to zero modulo 2, 491 or 499.

Since the timelimit was really generous we can deal with latter two just by handling all pairs (i,j) where either i is zero modulo 491 or 499 or j is zero modulo 491 or 499 in a naive way.

This is roughly nm/sqrt(mod) pairs which takes roughly a second with the given constraints.

Residues modulo 2 must be handled specifically (because there are too much pairs), but it is easy since there are only two of them. Basically the end residue is 1 only if original residues are 1 as well.


This is the accepted code:
// 2018, Sayutin Dmitry.

#include <bits/stdc++.h>

using std::cin;
using std::cout;
using std::cerr;

using std::vector;
using std::map;
using std::array;
using std::set;
using std::string;

using std::pair;
using std::make_pair;

using std::tuple;
using std::make_tuple;
using std::get;

using std::min;
using std::abs;
using std::max;

using std::unique;
using std::sort;
using std::generate;
using std::reverse;
using std::min_element;
using std::max_element;

#ifdef LOCAL
#define LASSERT(X) assert(X)
#else
#define LASSERT(X) {}
#endif

template <typename T>
T input() {
    T res;
    cin >> res;
    LASSERT(cin);
    return res;
}

template <typename IT>
void input_seq(IT b, IT e) {
    std::generate(b, e, input<typename std::remove_reference<decltype(*b)>::type>);
}

#define SZ(vec)         int((vec).size())
#define ALL(data)       data.begin(),data.end()
#define RALL(data)      data.rbegin(),data.rend()
#define TYPEMAX(type)   std::numeric_limits<type>::max()
#define TYPEMIN(type)   std::numeric_limits<type>::min()

#define pb push_back
#define eb emplace_back

const int mod = 490019;
const int phi = mod - 1; // = 2 * 491 * 499

int add(int a, int b) {
    return (a + b >= mod ? a + b - mod : a + b);
}

int sub(int a, int b) {
    return (a >= b ? a - b : mod + a - b);
}

int mult(int a, int b) {
    return (int64_t(a) * b) % mod;
}

int fastpow(int a, int n, int md, int r = 1) {
    while (n) {
        if (n % 2)
            r = (int64_t(r) * a) % md;
        
        a = (int64_t(a) * a) % md;
        n /= 2;
    }

    return r;
}

const int LOG_N = 10;
const int FFT_N = (1 << LOG_N);

struct complex {
    complex(): x(0), y(0) {}
    complex(double x, double y = 0): x(x), y(y) {}

    complex operator+(complex other) {return complex(x + other.x, y + other.y);}
    complex operator+=(complex other) {x += other.x; y += other.y; return *this;}
    complex operator-(complex other) {return complex(x - other.x, y - other.y);}

    complex operator*(complex other) {return complex(x * other.x - y * other.y, x * other.y + y * other.x);}

    complex operator/=(int val) {x /= val; y /= val; return *this;}
    
    inline double real() {return x;}
    inline double imag() {return y;}
    
    double x;
    double y;
};

complex w[FFT_N];
int rev[FFT_N];

#if 1

void precalc() {
    // /2 [0;1) -> [1;1]
    // /4 [0;2) -> [2;3]
    // /8 [0;4) -> [4;7]
    // ..
    // /FFT_N [0;FFT_N / 2) -> [FFT_N / 2; FFT_N - 1]
    
    double pi = acos(-1);

    for (int i = 0; i != FFT_N / 2; ++i)
        w[FFT_N / 2 + i] = complex(cos(2.0 * pi * double(i) / FFT_N), sin(2.0 * pi * double(i) / FFT_N));

    for (int n = FFT_N / 2; n >= 2; n /= 2)
        for (int i = 0; i != n / 2; ++i)
            w[n / 2 + i] = w[n + 2 * i];

    rev[0] = 0;
    int last = 0;
    for (int i = 1; i != FFT_N; ++i) {
        if (i == (2 << last))
            ++last;

        rev[i] = rev[i ^ (1 << last)] | (1 << (LOG_N - 1 - last));
    }
}

void fft(complex* a) {
    for (int i = 0; i < FFT_N; ++i)
        if (i < rev[i])
            std::swap(a[i], a[rev[i]]);

    for (int n = 1; n < FFT_N; n = n << 1)
        for (int start = 0; start < FFT_N; start += (n << 1))
            for (int off = 0; off < n; ++off) {
                complex x = a[start + off];
                complex y = a[start + off + n] * w[n + off];

                a[start + off]     = x + y;
                a[start + off + n] = x - y;
            }
}

#else

void precalc() {
    double pi = acos(-1);
    for (int i = 0; i != FFT_N; ++i)
        w[i] = complex(cos(2.0 * pi * double(i) / FFT_N), sin(2.0 * pi * double(i) / FFT_N));

    rev[0] = 0;
    int last = 0;
    for (int i = 1; i != FFT_N; ++i) {
        if (i == (2 << last))
            ++last;

        rev[i] = rev[i ^ (1 << last)] | (1 << (LOG_N - 1 - last));
    }
}


void fft(complex* a) {
    for (int i = 0; i < FFT_N; ++i)
        if (i < rev[i])
            std::swap(a[i], a[rev[i]]);

    for (int lvl = 0; lvl < LOG_N; ++lvl)
        for (int start = 0; start < FFT_N; start += (2 << lvl))
            for (int off = 0; off < (1 << lvl); ++off) {
                complex x = a[start + off];
                complex y = a[start + off + (1 << lvl)] * w[off << (LOG_N - 1 - lvl)];

                a[start + off + (0 << lvl)] = x + y;
                a[start + off + (1 << lvl)] = x - y;
            }
}

#endif 


void inv_fft(complex* a) {
    fft(a);
    std::reverse(a + 1, a + FFT_N);
    for (int i = 0; i != FFT_N; ++i)
        a[i] /= FFT_N;
}

int inverse(int a, int md) {
    return fastpow(a % md, md - 2, md);
}

// [0; phi) -> [0; 2) x [0; 491) x [0; 499)
tuple<int, int, int> chinese_it(int num) {
    return make_tuple(num % 2, num % 491, num % 499);
}

void chinese_it(int num, int& a, int& b, int& c) {
    a = num % 2;
    b = num % 491;
    c = num % 499;
}

// [0; 2) x [0; 491) x [0; 499) -> [0; phi)
int un_chinese_it(int a, int b, int c) {
    static int X = (int64_t(491 * 499) * inverse(491 * 499, 2)) % phi;
    static int Y = (int64_t(2 * 499) * inverse(2 * 499, 491)) % phi;
    static int Z = (int64_t(2 * 491) * inverse(2 * 491, 499)) % phi;

    return (a * X + b * Y + c * Z) % phi;
}

int primitive491 = 7;
int primitive499 = 7;

int pr_pows491[491];
int pr_pows499[499];

int log491[491];
int log499[499];

#ifndef LOCAL
#define STAMP(msg) {fprintf(stderr, "%0.2lf: %s\n", clock() / double(CLOCKS_PER_SEC), msg);}
#else
#define STAMP(msg)
#endif

int main() {
    STAMP("start");
    
    // code here
    int n, m, c;
    scanf("%d%d%d", &n, &m, &c);

    vector<int> a(n);
    vector<int> b(m);

    for (int& elem: a)
        scanf("%d", &elem);
    for (int& elem: b)
        scanf("%d", &elem);
    
    vector<int> pows(phi);
    pows[0] = 1;
    for (int i = 1; i != phi; ++i)
        pows[i] = mult(pows[i - 1], c);

    // handle all "% 491 == 0" and "% 499 == 0"

    vector<int> spec;
    for (int i = 0; i < max(n, m); i += 491)
        spec.push_back(i);
    for (int i = 0; i < max(n, m); i += 499)
        spec.push_back(i);

    std::sort(ALL(spec));
    spec.resize(std::unique(ALL(spec)) - spec.begin());
    
    int res = 0;

    STAMP("before");

    fprintf(stderr, "spec: %d\n", SZ(spec));

    for (int j = 0; j != m; ++j) {
        int j3 = (j * int64_t(j) * j) % phi;

        int64_t sum = 0;
        
        for (int i: spec) {
            if (i > n)
                break;

            int i2 = (i * int64_t(i)) % phi;
            
            int k = a[i] * b[j];
    
            sum += int64_t(k) * pows[(i2 * int64_t(j3)) % phi];
        }

        res = (res + sum) % mod;
    }

    STAMP("stage1 done");

    for (int j: spec) {
        int j3 = (j * int64_t(j) * j) % phi;

        int64_t sum = 0;
        for (int i = 0; i != n; ++i) {
            int i2 = (i * int64_t(i)) % phi;
            if (j > m)
                break;
            
            int k = (a[i] * b[j]);
            
            sum += int64_t(k) * pows[(i2 * int64_t(j3)) % phi];
        }

        res = (res + sum) % mod;
    }

    STAMP("stage2 done");
    
    for (int i: spec)
        for (int j: spec) {
            if (i > n or j > m)
                break;

            int k = (a[i] * b[j]);
            
            int i2 = (i * int64_t(i)) % phi;

            int j3 = (j * int64_t(j) * j) % phi;
            
            res = (res - int64_t(k) * pows[(i2 * int64_t(j3)) % phi]) % mod;

            if (res < 0)
                res += mod;
        }

    STAMP("stage3 done");
    
    pr_pows491[0] = 1;
    for (int i = 1; i < 491; ++i)
        pr_pows491[i] = (pr_pows491[i - 1] * primitive491) % 491;

    for (int i = 0; i < 490; ++i)
        log491[pr_pows491[i]] = i;
    
    pr_pows499[0] = 1;
    for (int i = 1; i < 499; ++i)
        pr_pows499[i] = (pr_pows499[i - 1] * primitive499) % 499;

    for (int i = 0; i < 498; ++i)
        log499[pr_pows499[i]] = i;
    
    STAMP("before ffts");

    complex arr[2][1024][1024];

    for (int i = 0; i != 2; ++i)
        for (int j = 0; j != 1024; ++j)
            for (int k = 0; k != 1024; ++k)
                arr[i][j][k] = 0.0;

    for (int i = 0; i != n; ++i) {
        int x, y, z;
        chinese_it(i, x, y, z);

        if (y == 0 or z == 0)
            continue;

        y = (2 * log491[y]) % 490;
        z = (2 * log499[z]) % 498;

        arr[x][y][z] += complex(a[i], 0);
        if (x == 1)
            arr[0][y][z] += complex(a[i], 0);
    }

    for (int i = 0; i != m; ++i) {
        int x, y, z;
        chinese_it(i, x, y, z);

        if (y == 0 or z == 0)
            continue;

        y = (3 * log491[y]) % 490;
        z = (3 * log499[z]) % 498;

        arr[x][y][z] += complex(0, b[i]);
        if (x == 1)
            arr[0][y][z] += complex(0, b[i]);
    }

    STAMP("prepare done");
    
    precalc();

    STAMP("precalc done");

    for (int i = 0; i != 2; ++i) {
        for (int j = 0; j != 1024; ++j)
            fft(arr[i][j]);

        complex tmp[1024];
        for (int k = 0; k != 1024; ++k) {
            for (int j = 0; j != 1024; ++j)
                tmp[j] = arr[i][j][k];

            fft(tmp);

            for (int j = 0; j != 1024; ++j)
                arr[i][j][k] = tmp[j];
        }
    }

    STAMP("fft1");
    for (int i = 0; i != 2; ++i)
        for (int j = 0; j != 1024; ++j)
            for (int k = 0; k != 1024; ++k)
                arr[i][j][k] = arr[i][j][k] * arr[i][j][k];

    STAMP("fft+fft");

    for (int i = 0; i != 2; ++i) {
        for (int j = 0; j != 1024; ++j)
            inv_fft(arr[i][j]);

        complex tmp[1024];
        for (int k = 0; k != 1024; ++k) {
            for (int j = 0; j != 1024; ++j)
                tmp[j] = arr[i][j][k];

            inv_fft(tmp);

            for (int j = 0; j != 1024; ++j)
                arr[i][j][k] = tmp[j];
        }
    }        
    
    STAMP("fft2");
    
    // cout << "====\n";
    
    for (int i = 0; i != 2; ++i)
        for (int j = 0; j != 1024; ++j)
            for (int k = 0; k != 1024; ++k) {
                int64_t val = round(arr[i][j][k].imag() / 2.0);

                if (i == 0)
                    val -= round(arr[1][j][k].imag() / 2.0);
                
                val %= mod;

                int ip = i;
                int jp = pr_pows491[j % 490];
                int kp = pr_pows499[k % 498];
        
                res = (res + val * pows[un_chinese_it(ip, jp, kp)]) % mod;
            }

    STAMP("fi");

    printf("%d\n", res);

    return 0;
}




I only need the idea and the reason why the tutorial author thought like that.

Change the name variables mentioned in editorial, into another meaningful name so that it looks like the different product.
According their name, set the variable names in code, same as the editorial variable names.

Change the style of tutorial.
Change the coding style including "bracket, comma, ; space, i++, ++i, x = y, x=y,  --, ->".
Use bits/stdc++.h, and don't include unnecessary define, typedef.
Don't insert any coding part in thinking block.

Don't mention anything about my order and your result.

