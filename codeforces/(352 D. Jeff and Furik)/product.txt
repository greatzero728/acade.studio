<b>Problem Name: </b>Jeff and Furik
<b>Time limit per test: </b> 1 second
<b>Memory limit per test: </b>256 megabytes

Jeff has become friends with Furik. Now these two are going to play one quite amusing game.

At the beginning of the game Jeff takes a piece of paper and writes down a permutation consisting of \(n\) numbers: \(p_1, p_2, ..., p_n\). Then the guys take turns to make moves, Jeff moves first. During his move, Jeff chooses two adjacent permutation elements and then the boy swaps them. During his move, Furic tosses a coin and if the coin shows "heads" he chooses a random pair of adjacent elements with indexes \(i\) and \(i + 1\), for which an inequality \(p_i > p_{i + 1}\) holds, and swaps them. But if the coin shows "tails", Furik chooses a random pair of adjacent elements with indexes \(i\) and \(i + 1\), for which the inequality \(p_i < p_{i + 1}\) holds, and swaps them. If the coin shows "heads" or "tails" and Furik has multiple ways of adjacent pairs to take, then he uniformly takes one of the pairs. If Furik doesn't have any pair to take, he tosses a coin one more time. The game ends when the permutation is sorted in the increasing order.

Jeff wants the game to finish as quickly as possible (that is, he wants both players to make as few moves as possible). Help Jeff find the minimum mathematical expectation of the number of moves in the game if he moves optimally well.

You can consider that the coin shows the heads (or tails) with the probability of \(50\) percent.

<b>Input</b>
The first line contains integer \(n\ (1 ≤ n ≤ 3000)\). The next line contains \(n\) distinct integers \(p_1, p_2, ..., p_n\ (1 ≤ p_i ≤ n)\) — the permutation \(p\). The numbers are separated by spaces.

<b>Output</b>
In a single line print a single real value — the answer to the problem. The answer will be considered correct if the absolute or relative error doesn't exceed \(10^{ - 6}\).

<b>Note</b>
In the first test the sequence is already sorted, so the answer is \(0\).





A <b>naive or brute force approach</b> would involve simulating the game turn by turn. On Jeff's turn, he would optimally swap any adjacent pair of elements that are out of order, progressively sorting the permutation. On Furik's turn, we simulate the coin toss and either swap a random adjacent pair where \( p_i > p_{i+1} \) if heads, or \( p_i < p_{i+1} \) if tails. After the game concludes, we compute the expected number of moves.

In this approach, Furik's random behavior introduces two possible paths at each turn: one where adjacent elements \( p_i > p_{i+1} \) are swapped if the coin shows heads, and another where \( p_i < p_{i+1} \) are swapped if tails. This branching results in an exponential number of possibilities, leading to a potential time complexity of \( O(2^{\text{number of moves}}) \). Since the number of moves depends on the disorder of the permutation, this approach becomes highly inefficient, particularly for larger \( n \). The exponential growth in the number of possible moves makes brute force impractical, emphasizing the need for a more optimized solution to solve the problem within the given time constraints.




Let's analyze the problem first. The goal is to find the minimum mathematical expectation of the number of moves in the game if Jeff moves optimally well. The game ends when the permutation is sorted in the increasing order. We can consider that the coin shows the heads (or tails) with the probability of 50 percent.

We need to find a way to measure the "sortedness" of the permutation. One way to do this is to count the number of inversions in the permutation, which is a pair of elements that are in the wrong order. We can then use this count to estimate the number of moves needed to sort the permutation.

The next step would be to write a code to read the input and calculate the number of inversions in the permutation.

Let's start with that.




#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> p(n);
    for (int i = 0; i < n; i++) {
        cin >> p[i];
    }

    int inversions = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i] > p[j]) {
                inversions++;
            }
        }
    }

    cout << inversions << endl;
    return 0;
}





Now that we have a code to calculate the number of inversions in the permutation, let's think about how to use this information to estimate the number of moves needed to sort the permutation.

Since the coin shows the heads (or tails) with the probability of 50 percent, the expected number of moves needed to sort the permutation is twice the number of inversions in the permutation. This is because each inversion requires two moves to fix: one move to swap the two elements, and another move to swap them back if the coin shows the opposite side.

So, we can simply multiply the number of inversions by 2 to get the expected number of moves needed to sort the permutation.

Let's modify the code to do this.




#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> p(n);
    for (int i = 0; i < n; i++) {
        cin >> p[i];
    }

    int inversions = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i] > p[j]) {
                inversions++;
            }
        }
    }

    double expected_moves = 2 * inversions;
    cout << fixed << expected_moves << endl;
    return 0;
}




However, this is not the final answer yet.

We need to consider that Jeff moves first, and he will try to minimize the number of moves. Therefore, we need to subtract 1 from the total number of moves if the number of inversions is odd because Jeff can swap in the correct order on his first move.





#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    int n;
    cin >> n;

    vector<int> p(n);
    for (int i = 0; i < n; i++) {
        cin >> p[i];
    }

    int inversions = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i] > p[j]) {
                inversions++;
            }
        }
    }

    double expected_moves = 2 * inversions;
    if (inversions % 2 != 0) {
        expected_moves--;
    }
    cout << fixed << expected_moves << endl;
    return 0;
}




2
1 2




5
3 5 2 4 1




Let's try a corner test case where \(n\) is the smallest possible value
<code>
1
1
</code>

In this case, the permutation is already sorted, so the game ends immediately, and the answer will be 0.

Therefore, the expected output is:
<code>0.000000</code>




1
1
