Problem Statement:
Marbles
<b>time limit per test</b>: 2 seconds
<b>memory limit per test</b>: 256 megabytes

In the spirit of the holidays, Saitama has given Genos two grid paths of length \(n\) (a weird gift even by Saitama's standards). A grid path is an ordered sequence of neighbouring squares in an infinite grid. Two squares are neighbouring if they share a side.

One example of a grid path is \((0, 0) → (0, 1) → (0, 2) → (1, 2) → (1, 1) → (0, 1) → (- 1, 1)\). Note that squares in this sequence might be repeated, i.e. path has self intersections.

Movement within a grid path is restricted to adjacent squares within the sequence. That is, from the \(i\)-th square, one can only move to the \((i - 1)\)-th or \((i + 1)\)-th squares of this path. Note that there is only a single valid move from the first and last squares of a grid path. Also note, that even if there is some j-th square of the path that coincides with the \(i\)-th square, only moves to \((i - 1)\)-th and \((i + 1)\)-th squares are available. For example, from the second square in the above sequence, one can only move to either the first or third squares.

To ensure that movement is not ambiguous, the two grid paths will not have an alternating sequence of three squares. For example, a contiguous subsequence \((0, 0) → (0, 1) → (0, 0)\) cannot occur in a valid grid path.

One marble is placed on the first square of each grid path. Genos wants to get both marbles to the last square of each grid path. However, there is a catch. Whenever he moves one marble, the other marble will copy its movement if possible. For instance, if one marble moves east, then the other marble will try and move east as well. By try, we mean if moving east is a valid move, then the marble will move east.

Moving north increases the second coordinate by \(1\), while moving south decreases it by \(1\). Similarly, moving east increases first coordinate by \(1\), while moving west decreases it.

Given these two valid grid paths, Genos wants to know if it is possible to move both marbles to the ends of their respective paths. That is, if it is possible to move the marbles such that both marbles rest on the last square of their respective paths.

<b>Input</b>
The first line of the input contains a single integer \(n\) \((2 ≤ n ≤ 1 000 000)\) — the length of the paths.

The second line of the input contains a string consisting of \(n - 1\) characters (each of which is either 'N', 'E', 'S', or 'W') — the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string "NNESWW".

The third line of the input contains a string of \(n - 1\) characters (each of which is either 'N', 'E', 'S', or 'W') — the second grid path.

<b>Output</b>
Print "YES" (without quotes) if it is possible for both marbles to be at the end position at the same time. Print "NO" (without quotes) otherwise. In both cases, the answer is case-insensitive.

<b>Note</b>
In the first sample, the first grid path is the one described in the statement. Moreover, the following sequence of moves will get both marbles to the end: NNESWWSWSW.

In the second sample, no sequence of moves can get both marbles to the end.





A naive solution would involve simulating the movements of both marbles step by step to check if they can both reach their respective end positions simultaneously. This would require moving each marble according to its path while trying to make the other marble follow the same direction if possible. Essentially, at each step, we would need to explore whether both marbles can move forward simultaneously or if only one can move, while the other remains in place. This simulation would require checking all possible combinations of movements for both marbles, which won't fit the time limit. So, we have to come up with a better approach to solve the problem efficiently.






First, we need to reverse the first path to later facilitate the comparison of the first path, but in reverse, against the second path. Following the reversal, the code proceeds to invert the directions of the first path, where 'N' becomes 'S', 'E' becomes 'W', and vice versa. This inversion is done to check if the movements of the second path can be mirrored exactly in the opposite direction by the first path. Let us take the input and implement this part.





#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 1;
vector<char> s(2 * N);

int main() {
    int n; cin >> n; n--;
    for (int i = 1; i <= n; ++i)  cin >> s[i];
    for (int i = n + 1; i <= 2 * n; ++i)  cin >> s[i];
    
    for (int i = 1; i < n + 1 - i; ++i) {
        swap(s[i], s[n + 1 - i]);
    }

    for (int i = 1; i <= n; ++i) {
        if (s[i] == 'N') s[i] = 'S';
        else if (s[i] == 'S') s[i] = 'N';
        else if (s[i] == 'W') s[i] = 'E';
        else if (s[i] == 'E') s[i] = 'W';
    }
    
    return 0;
}





Then, we use the Knuth-Morris-Pratt (KMP) algorithm to match the patterns. The \(KMP\) array, which stores the length of the longest prefix that matches a suffix for every position in the combined string, is built by iterating through the array \(s\). We maintain a while loop to find the proper prefix length when there’s a mismatch, ensuring that the algorithm efficiently identifies the longest matching prefix. Finally, we check the value of \(KMP[2 * n]\). If this value is zero, it means that no prefix of the second path matches the suffix of the reversed and inverted first path, implying that both marbles can move to the end of their respective paths simultaneously without interfering with each other, and the output is "YES". However, if a match is found, the paths interfere, and the output is "NO".





#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 1;
vector<char> s(2 * N);
int KMP[2 * N];

int main() {
    int n; cin >> n; n--;
    for (int i = 1; i <= n; ++i)  cin >> s[i];
    for (int i = n + 1; i <= 2 * n; ++i)  cin >> s[i]; 

    for (int i = 1; i < n + 1 - i; ++i) {
        swap(s[i], s[n + 1 - i]);
    }

    for (int i = 1; i <= n; ++i) {
        if (s[i] == 'N') s[i] = 'S';
        else if (s[i] == 'S') s[i] = 'N';
        else if (s[i] == 'W') s[i] = 'E';
        else if (s[i] == 'E') s[i] = 'W';
    }
    KMP[1] = KMP[0] = 0;
    int t = KMP[1];

    for (int i = 2; i <= 2 * n; ++i) {
        while (t != 0 && s[t + 1] != s[i]) t = KMP[t];
        if (s[t + 1] == s[i]) ++t;
        KMP[i] = t;
    }

    return 0;
}






Finally, we print the answer as we explained in the previous block.






#include <bits/stdc++.h>
using namespace std;

const int N = 1e6 + 1;
vector<char> s(2 * N);
int KMP[2 * N];

int main() {
    int n; cin >> n; n--;
    for (int i = 1; i <= n; ++i)  cin >> s[i];
    for (int i = n + 1; i <= 2 * n; ++i)  cin >> s[i]; 

    for (int i = 1; i < n + 1 - i; ++i) {
        swap(s[i], s[n + 1 - i]);
    }

    for (int i = 1; i <= n; ++i) {
        if (s[i] == 'N') s[i] = 'S';
        else if (s[i] == 'S') s[i] = 'N';
        else if (s[i] == 'W') s[i] = 'E';
        else if (s[i] == 'E') s[i] = 'W';
    }
    KMP[1] = KMP[0] = 0;
    int t = KMP[1];

    for (int i = 2; i <= 2 * n; ++i) {
        while (t != 0 && s[t + 1] != s[i]) t = KMP[t];
        if (s[t + 1] == s[i]) ++t;
        KMP[i] = t;
    }
    if (KMP[2 * n] == 0) cout << "YES" << endl;
    else cout << "NO" << endl;

    return 0;
}






For the custom test case, let us try the minimum constraints possible. Let \(n = 2\) and both path are 'E' and 'E'. The answer is obviously "YES" because it is possible for both marbles to be at the end position at the same time.





2
E
E