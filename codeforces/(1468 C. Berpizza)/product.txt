Berpizza
time limit per test: 5 seconds
memory limit per test: 512 megabytes

Monocarp and Polycarp are working as waiters in Berpizza, a pizzeria located near the center of Bertown. Since they are waiters, their job is to serve the customers, but they choose whom they serve first differently.

At the start of the working day, there are no customers at the Berpizza. They come there one by one. When a customer comes into the pizzeria, she sits and waits for Monocarp or Polycarp to serve her. Monocarp has been working in Berpizza for just two weeks, so whenever he serves a customer, he simply chooses the one who came to Berpizza first, and serves that customer.

On the other hand, Polycarp is an experienced waiter at Berpizza, and he knows which customers are going to spend a lot of money at the pizzeria (and which aren't) as soon as he sees them. For each customer, Polycarp estimates the amount of money this customer can spend, and when he serves a customer, he chooses the one that is expected to leave the most money at Berpizza (in case there are several such customers, he chooses the one who came first among them).

Obviously, no customer can be served twice, so Monocarp and Polycarp choose which customer to serve only among those who haven't been served yet.

When the number of customers gets really high, it becomes difficult for both Monocarp and Polycarp to choose the customer they are going to serve. Your task is to write a program that makes these choices for them. Formally, your program should be able to process three types of queries:

\(\bull\) \(1\) \(m\) — a customer comes to Berpizza, and Polycarp estimates the amount of money that they will spend as \(m\);
\(\bull\) \(2\) — Monocarp serves a customer which came to the pizzeria first;
\(\bull\) \(3\) — Polycarp serves a customer which is expected to spend the largest amount of money at the pizzeria (if there are several such customers, the one that came to the pizzeria first is chosen).

For each query of types \(2\) and \(3\), report the number of the customer who was served (the customers are numbered in the order they come to the pizzeria, starting from \(1\)).

<b>Input</b>
The first line contains one integer \(q\) \((2 \le q \le 5⋅10^5)\) — the number of queries.

Then \(q\) lines follow, each describing a query in one of the following formats:

\(\bull\) \(1\) \(m\) \((1 \le m \le 5⋅10^5)\) — a customer comes to Berpizza, and Polycarp estimates the amount of money that they will spend as \(m\);
\(\bull\) \(2\) — Monocarp serves a customer which came to the pizzeria first;
\(\bull\) \(3\) — Polycarp serves a customer which is expected to spend the largest amount of money at the pizzeria (if there are multiple such customers, the one that came to the pizzeria first is chosen).

Queries of type \(2\) and \(3\) are asked only when there exists at least one customer that hasn't been served yet. There is at least one query of type \(2\) or \(3\) in the input.

<b>Output</b>
For each query of type \(2\) or \(3\), print one integer — the number of the customer that has been served in that event. The customers are numbered in the order in which they come to the pizzeria, starting from \(1\).




The most obvious solution is to just simulate the process while keeping track of customers that came first and customers that are going to spend more money and for each query we can just get either the customer that came first or the customer that is going to spend more money according to the type of query, so, let's start with boilerplate code.




#include <bits/stdc++.h>

using namespace std;

int main(){
    int q;
    cin >> q;
    int id = 1;
    for (int i = 0;i < q;++i){
        int t;
        cin >> t;
        if (t == 1){
            int m;
            cin >> m;
            
        }
        else if(t == 2){
            
        }
        else{
            
        }
    }
    
    
    return 0;   
}




Now, let's store the customer in two sets, one of them will be sorted in the order that they came in and the other one will be sorted in the order of the amount that the customer is going to spend, note that we will store also the ID with the amount to know the ID which corresponds to this amount.





#include <bits/stdc++.h>

using namespace std;

int main(){
    int q;
    cin >> q;
    int id = 1;
    set<pair<int,int>> amount;
    map<int,int> idToAmount;
    set<int> order;
    for (int i = 0;i < q;++i){
        int t;
        cin >> t;
        if (t == 1){
            int m;
            cin >> m;
            order.insert(id);
            amount.insert({m,id});
            idToAmount[id] = m;
            id++;
        }
        else if(t == 2){
            
        }
        else{
            
        }
    }
    
    
    return 0;   
}




For the queries of the second type, we will just output the customer that came first and erase it from both sets.




#include <bits/stdc++.h>

using namespace std;

int main(){
    int q;
    cin >> q;
    int id = 1;
    set<pair<int,int>> amount;
    map<int,int> idToAmount;
    set<int> order;
    for (int i = 0;i < q;++i){
        int t;
        cin >> t;
        if (t == 1){
            int m;
            cin >> m;
            order.insert(id);
            amount.insert({m,id});
            idToAmount[id] = m;
            id++;
        }
        else if(t == 2){
            int x = *order.begin();
            cout << x << " ";
            order.erase(order.begin());
            amount.erase(amount.find({idToAmount[x],x}));
        }
        else{
            
        }
    }
    
    
    return 0;   
}




For queries of the third type, we want to get the customer with the largest amount and if more than one customer will pay the same amount then we will get it according to the least ID, so we will need to create comparator to sort the set according to this criteria.





#include <bits/stdc++.h>

using namespace std;

struct Comparator {
    bool operator()(const pair<int, int>& a, const pair<int, int>& b) const {
        if (a.first != b.first) {
            return a.first > b.first;
        }
        return a.second < b.second;
    }
};

int main(){
    int q;
    cin >> q;
    int id = 1;
    set<pair<int,int>,Comparator> amount;
    map<int,int> idToAmount;
    set<int> order;
    for (int i = 0;i < q;++i){
        int t;
        cin >> t;
        if (t == 1){
            int m;
            cin >> m;
            order.insert(id);
            amount.insert({m,id});
            idToAmount[id] = m;
            id++;
        }
        else if(t == 2){
            int x = *order.begin();
            cout << x << " ";
            order.erase(order.begin());
            amount.erase(amount.find({idToAmount[x],x}));
        }
        else{
            pair<int,int> x = *amount.begin();
            cout << x.second << " ";
            amount.erase(amount.begin());
            order.erase(order.find(x.second));
        }
    }


    return 0;
}




8
1 8
1 10
1 6
3
2
1 9
2
3





6
1 8
1 10
1 8
3
3
3





8
1 103913
3
1 103913
1 103913
3
1 103913
1 103913
2





Let's try another case, with minimum constraints and there is only one customer to be served.

Input:

2
1 5
2

The expected output is 
1
1 because this is the only customer that enters the place, so he is the only choice to be served.





2
1 5
2