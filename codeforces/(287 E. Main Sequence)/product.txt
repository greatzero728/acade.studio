<b>E. Main Sequence</b>
time limit per test: 2 seconds
memory limit per test: 256 megabytes

As you know, Vova has recently become a new shaman in the city of Ultima Thule. So, he has received the shaman knowledge about the correct bracket sequences. The shamans of Ultima Thule have been using lots of different types of brackets since prehistoric times. A bracket type is a positive integer. The shamans define a correct bracket sequence as follows:

\(\bullet\) An empty sequence is a correct bracket sequence.
\(\bullet\) If \({a_1, a_2, ..., a_l}\) and \({b_1, b_2, ..., b_k}\) are correct bracket sequences, then sequence \({a_1, a_2, ..., a_l, b_1, b_2, ..., b_k}\) (their concatenation) also is a correct bracket sequence.
\(\bullet\) If \({a_1, a_2, ..., a_l}\) — is a correct bracket sequence, then sequence \(\{v, a_1, a_2, ..., a_l, -v\}\) also is a correct bracket sequence, where \(v (v > 0)\) is an integer.

For example, sequences {1, 1,  - 1, 2,  - 2,  - 1} and {3,  - 3} are correct bracket sequences, and {2,  - 3} is not.

Moreover, after Vova became a shaman, he learned the most important correct bracket sequence \({x_1, x_2, ..., x_n}\), consisting of \(n\) integers. As sequence \(x\) is the most important, Vova decided to encrypt it just in case.

Encrypting consists of two sequences. The first sequence \({p_1, p_2, ..., p_n}\) contains types of brackets, that is, \(p_i = |x_i| (1 ≤ i ≤ n)\). The second sequence \({q_1, q_2, ..., q_t}\) contains \(t\) integers — some positions (possibly, not all of them), which had negative numbers in sequence \({x_1, x_2, ..., x_n}\).

Unfortunately, Vova forgot the main sequence. But he was lucky enough to keep the encryption: sequences \({p_1, p_2, ..., p_n}\) and \({q_1, q_2, ..., q_t}\). Help Vova restore sequence \(x\) by the encryption. If there are multiple sequences that correspond to the encryption, restore any of them. If there are no such sequences, you should tell so.

<b>Input</b>
The first line of the input contains integer \(n (1 ≤ n ≤ 10^6)\). The second line contains \(n\) integers: \(p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9)\).

The third line contains integer \(t (0 ≤ t ≤ n)\), followed by \(t\) distinct integers \(q_1, q_2, ..., q_t (1 ≤ q_i ≤ n)\).

The numbers in each line are separated by spaces.

<b>Output</b>
Print a single string "NO" (without the quotes) if Vova is mistaken and a suitable sequence \({x_1, x_2, ..., x_n}\) doesn't exist.

Otherwise, in the first line print "YES" (without the quotes) and in the second line print \(n\) integers \(x_1, x_2, ..., x_n (|x_i| = p_i; x_{q_j} < 0)\). If there are multiple sequences that correspond to the encrypting, you are allowed to print any of them.




Let's suppose \(\{v, a_1, a_2, ..., a_l, -v\}\) is a valid bracket sequence, and let's call \(v\) as left bracket, \(-v\) as right bracket.

\(\bullet\) Let's think about the naive approach.
The \(t\) positions are already marked as right bracket, so we have to determine the types of remaining \(n - t\) brackets.
There are \(2 ^ {n - t}\) possible ways to determine the types of remaining brackets, so we can iterate all of the ways to check if there is a valid sequence. but \(n - t\) can up to \(10 ^ 6\) so this algorithm will get the result of time limit exceed error.

\(\bullet\) Let's explain the real algorithm.
The main idea is that to check the validity of a certain sequence, we can eliminate the minimum valid bracket pairs. This because after deleting the minimum valid bracket pairs, the validity of the sequence doesn't change.

For example, let's consider this about "(())()".
To check the validity we can check one bracket by one bracket from right to left.
1st state is ")". (6th position of the original)
2nd state is "()". (5th, 6th position of the original) Here, we can delete the minimum valid bracket pair "()"(5th, 6th position). So we can change the state into "".
3rd state is ")". (4th position of the original)
4th state is "))". (3rd, 4th position of the original)
5th state is "())". (2nd, 3rd, 4th position of the original) Here, we can delete the minimum valid bracket pair "()" (2nd, 3rd position of the original). So we can change the state into ")".
6th state is "()". (1st, 4th of the original) Here, we can delete the minimum valid bracket pair "()" (1st, 4th position of the original). So we can change the state into "".
The final sequence is "" which is a valid state, so the original sequence "(())()" is also a valid.

We can implement this idea to this problem.
But there is a challenge of this problem. The challenge is that we only know about the certain positions of right brackets.
a). If current bracket is determined position, we can implement above mentioned algorithm.
b). If current bracket is not determined position, there are two possible options.
b->1). We can replace current position as "(" if after replace we can erase minimum valid bracket pair.
b->2). If we can't replace current position then there is no option, so we should replace current position as ")".
After implement all position, if the remaining one is not valid, then there is no valid sequence.

By implementing the algorithm, we already determine the type for every position, we can restore the original valid sequence.




Let's prove why this algorithm is correct.




Let's denote the type of the ith bracket as \({T_i}\) : \({T_i} = 1\) if the bracket is "(" and \({T_i} = -1\) if the bracket is ")".
Let's denote the stack of the brackets as \(\{S_i\}\).

\(\bullet\) At first, we initialize the stack as an empty stack \(\{\}\).
\(\bullet\) Suppose that we already processed the first i brackets and we got the stack \(\{S_i\}\).
\(\bullet\) Now we process the i + 1th bracket. There are two possible options:
a). The i + 1th position is determined position, then we have to replace it as ")".
b). The i + 1th position is not determined position, there are two possible options.
b->1). We can replace the i + 1th position as "(" then we must push it to the stack, then we can move to the i + 2th position.
b->2). We can't replace the i + 1th position as "(" then we must replace it as ")" and move to the i + 2th position.

\(\bullet\) Now we process all n brackets and we get the stack \(\{S_n\}\).
If the stack is empty then the final sequence is valid and we can restore it. Otherwise, the final sequence is invalid.

The algorithm is correct because to check the validity of a certain sequence, we can eliminate the minimum valid bracket pairs. This because after deleting the minimum valid bracket pairs, the validity of the sequence doesn't change, and we can process all brackets only once so the algorithm is quite efficient.

The time complexity is O(n) because we only need to process all brackets once.
The space complexity is O(n) because we need to keep at most n brackets in the stack.

We can implement this algorithm to solve this problem.




#include <iostream>
using namespace std;

const int NN = 1010101;

int p[NN], tp[NN];

int main() {
    int n; cin>>n;
    for(int i = 1; i <= n; i++) {
        cin>>p[i];
        tp[i] = 1;
    }
    int t; cin>>t;
    while(t--) {
        int x; cin>>x;
        tp[x] = -1;
    }
    return 0;
}




To implement the algorithm, we can use a stack. We iterate through all brackets from right to left. If the current bracket is marked as a right bracket, we can simply push it to the stack. If the current bracket is not marked, we can check if we can replace it with a left bracket. If we can, we replace it with a left bracket and push it to the stack. If we can't, we replace it with a right bracket.

When we check if we can replace a bracket with a left bracket, we need to check if the stack is empty or if the top element of the stack is not equal to the current bracket. If we can replace it with a left bracket, we continue to the next bracket.

If we finish iterating through all brackets and the stack is empty, then the final sequence is valid. Otherwise, the final sequence is invalid.




#include <iostream>
using namespace std;

const int NN = 1010101;

int p[NN], tp[NN], s[NN], nn;

int main() {
    int n; cin>>n;
    for(int i = 1; i <= n; i++) {
        cin>>p[i];
        tp[i] = 1;
    }
    int t; cin>>t;
    while(t--) {
        int x; cin>>x;
        tp[x] = -1;
    }
    for(int i = n; i; i--) {
        if(tp[i] == -1) s[++nn] = p[i];
        else if(!nn) {
            tp[i] = -1, s[++nn] = p[i]; // We can erase a valid minimum bracket pair
        }
        else if(s[nn] != p[i]) {
            tp[i] = -1, s[++nn] = p[i]; // We can erase a valid minimum bracket pair
        }
        else nn--; //We found a valid minimum bracket pair
    }
    if(nn) puts("NO");
    else {
        puts("YES");
        for(int i = 1; i <= n; i++) cout<<tp[i] * p[i]<<' ';
    }
    return 0;
}




Let's check the custom corner case, where \(n, p_i, t\) are their minimum values: \(n = 1, p_i = 1, t  = 0\).
<b>Input</b>
<code>
1
1
0
</code>
In this case, it's obvious that there is not valid bracket sequence that has the odd length, so the answer for case where \(n = 1\) should be "NO".




1
1
0




Even my algorithm is \(O(n)\), I am getting time limit exceed error.
This is because the input and output amount is \(10^6\) integers.
So let's using fast input/output method using fread.




#include <iostream>
using namespace std;

const int NN = 1010101;
char buf[1<<21],*p1=buf,*p2=buf;
int read() {
    if (p1==p2) { p2=(p1=buf)+fread(buf,1,1<<21,stdin); if (p1==p2) return -1; }
    return *(p1++);
}
int readint() {
    int x=0;
    int c=read();
    while (c<48||c>57) c=read();
    while (c>=48&&c<=57) { x=(x<<1)+(x<<3)+(c^48); c=read(); }
    return x;
}
void print(int x) {
    if (!x) return;
    print(x/10);
    putchar((x%10)|48);
}
int p[NN], tp[NN], s[NN], nn;

int main() {
    int n; n=readint();
    for(int i = 1; i <= n; i++) p[i]=readint(),tp[i]=1;
    int t; t=readint();
    while(t--) {
        int x; x=readint();
        tp[x]=-1;
    }
    for(int i = n; i; i--) {
        if(tp[i]==-1) s[++nn]=p[i];
        else if(!nn) {
            tp[i]=-1, s[++nn]=p[i]; // We can erase a valid minimum bracket pair
        }
        else if(s[nn]!=p[i]) {
            tp[i]=-1, s[++nn]=p[i]; // We can erase a valid minimum bracket pair
        }
        else nn--; //We found a valid minimum bracket pair
    }
    if(nn) puts("NO");
    else {
        puts("YES");
        for(int i = 1; i <= n; i++) print(tp[i] * p[i]),putchar(' ');
    }
    return 0;
}




Sample is not working.
This is because we are printing negative value.
So we have to check the case, where \(x\) is negative in print function.




#include <iostream>
using namespace std;

const int NN = 1010101;
char buf[1<<21],*p1=buf,*p2=buf;
int read() {
    if (p1==p2) { p2=(p1=buf)+fread(buf,1,1<<21,stdin); if (p1==p2) return -1; }
    return *(p1++);
}
int readint() {
    int x=0;
    int c=read();
    while (c<48||c>57) c=read();
    while (c>=48&&c<=57) { x=(x<<1)+(x<<3)+(c^48); c=read(); }
    return x;
}
void print(int x) {
    if (x<0) putchar('-'),x=-x;
    if (!x) return;
    print(x/10);
    putchar((x%10)|48);
}
int p[NN], tp[NN], s[NN], nn;

int main() {
    int n; n=readint();
    for(int i = 1; i <= n; i++) p[i]=readint(),tp[i]=1;
    int t; t=readint();
    while(t--) {
        int x; x=readint();
        tp[x]=-1;
    }
    for(int i = n; i; i--) {
        if(tp[i]==-1) s[++nn]=p[i];
        else if(!nn) {
            tp[i]=-1, s[++nn]=p[i]; // We can erase a valid minimum bracket pair
        }
        else if(s[nn]!=p[i]) {
            tp[i]=-1, s[++nn]=p[i]; // We can erase a valid minimum bracket pair
        }
        else nn--; //We found a valid minimum bracket pair
    }
    if(nn) puts("NO");
    else {
        puts("YES");
        for(int i = 1; i <= n; i++) print(tp[i] * p[i]),putchar(' ');
    }
    return 0;
}




Let's check the custom corner case, where \(n, p_i, t\) are their minimum values: \(n = 1, p_i = 1, t  = 0\).
<b>Input</b>
<code>
1
1
0
</code>
In this case, it's obvious that there is not valid bracket sequence that has the odd length, so the answer for case where \(n = 1\) should be "NO".




1
1
0