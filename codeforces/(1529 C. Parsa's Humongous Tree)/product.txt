<b>
Parsa's Humongous Tree
time limit per test: 1 second
memory limit per test: 256 megabytes
</b>
Parsa has a humongous tree on \(n\) vertices.

On each vertex \(v\) he has written two integers \(l_v\) and \(r_v\).

To make Parsa's tree look even more majestic, Nima wants to assign a number \(a_v\ (l_v≤a_v≤r_v)\) to each vertex \(v\) such that the beauty of Parsa's tree is maximized.

Nima's sense of the beauty is rather bizarre. He defines the beauty of the tree as the sum of \(|a_u−a_v|\) over all edges \((u,v)\) of the tree.

Since Parsa's tree is too large, Nima can't maximize its beauty on his own. Your task is to find the maximum possible beauty for Parsa's tree.

<b>Input
</b>
The first line contains an integer \(t\ (1≤t≤250)\) — the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer \(n\ (2≤n≤10^5)\) — the number of vertices in Parsa's tree.

The \(i\)-th of the following \(n\) lines contains two integers \(l_i\) and \(r_i\ (1≤l_i≤r_i≤10^9)\).

Each of the next \(n−1\) lines contains two integers \(u\) and \(v\ (1≤u,v≤n,u≠v)\) meaning that there is an edge between the vertices \(u\) and \(v\) in Parsa's tree.

It is guaranteed that the given graph is a tree.

It is guaranteed that the sum of \(n\) over all test cases doesn't exceed \(2 \cdot 10^5\).

<b>Output
</b>
For each test case print the maximum possible beauty for Parsa's tree.

<b>Note
</b>
The trees in the example:
<img 1>

In the first test case, one possible assignment is \(a= \{{ 1,8\}}\) which results in \(|1−8|=7\).

In the second test case, one of the possible assignments is \(a=\{{1,5,9\}}\) which results in a beauty of \(|1−5|+|5−9|=8\)




The naive solution for problem is that for every node we try every possible value from \(l\) to \(r\) but this is too slow as number on nodes can reach \(10^5\) and the number of values to pick from \(l\) to \(r\) can reach \(10^9\) value




The key observation in this problem is that the optimal value for each node is either its left boundary \(l\) or its right boundary \(r\). To prove this, we can use the fact that the beauty of the tree is the sum of \(|a_u-a_v|\) over all edges \((u,v)\) of the tree.

Let's assume that we have a node \(v\) with an optimal value \(a_v\) that is not equal to its left boundary \(l_v\) or its right boundary \(r_v\). Without loss of generality, let's assume that \(l_v < a_v < r_v\).

We can now consider two cases:

1. The majority of the neighbors of \(v\) have values greater than \(a_v\). In this case, we can increase the value of \(v\) to \(r_v\) without decreasing the beauty of the tree, since the sum of \(|a_u-a_v|\) over all edges \((u,v)\) will increase.
2. The majority of the neighbors of \(v\) have values smaller than \(a_v\). In this case, we can decrease the value of \(v\) to \(l_v\) without decreasing the beauty of the tree, since the sum of \(|a_u-a_v|\) over all edges \((u,v)\) will increase.

In both cases, we can improve the beauty of the tree by moving the value of \(v\) to its left boundary or its right boundary, which contradicts our assumption that \(a_v\) is optimal.

Therefore, we can conclude that the optimal value for each node is either its left boundary \(l\) or its right boundary \(r\). This reduces the problem to a simple graph problem, where we need to find the maximum cut in a tree.

We can solve this problem by using a depth-first search (DFS) algorithm to traverse the tree, and at each node, we choose the value that maximizes the cut. The maximum cut is then the sum of the cuts at each node.




#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'

int n, l[100005], r[100005], dp[100005][2], ans;

vector<int> g[100005];

void dfs(int u, int p = 0) {
    for (int v : g[u]) if (v != p) {
        dfs(v, u);
        dp[u][0] += max(abs(l[u] - l[v]) + dp[v][0], abs(l[u] - r[v]) + dp[v][1]);
        dp[u][1] += max(abs(r[u] - l[v]) + dp[v][0], abs(r[u] - r[v]) + dp[v][1]);
    }
}

void solve() {
    cin >> n;
    for (int i = 1; i <= n; i++) {
        cin >> l[i] >> r[i];
        ans = 0;
        dp[i][0] = dp[i][1] = 0;
        g[i].clear();
    }
    for (int i = 1; i < n; i++) {
        int u, v; cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1);
    cout << max(dp[1][0], dp[1][1]) << endl;
}

signed main() {
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    int t = 1; cin >> t; while (t--) solve();
    return 0;
}





3
2
1 6
3 8
1 2
3
1 3
4 6
7 9
1 2
2 3
6
3 14
12 20
12 19
2 12
10 17
3 17
3 2
6 5
1 5
2 6
4 6




its work now lets test to make sure our code not overflow.

input:
<code>
1
4
1 1000000000
1 1000000000
1 1000000000
1 1000000000
1 2
2 3
3 4
</code>

the optimal values for nodes should be:

for node \(1= 1\), for node \(2=1000000000\), for node \(3=1\), for node \(4=1000000000\)

OR

for node \(1= 1000000000\), for node \(2=1\), for node \(3=1000000000\), for node \(4=1\)

and the sum of \(|a_u−a_v|\) over all edges is \(999999999+999999999+999999999\) which is \(2999999997\)

so excepted output:
<code>
2999999997
</code>




1
4
1 1000000000 
1 1000000000
1 1000000000
1 1000000000
1 2
2 3
3 4