<b>Universal Solution</b>
time limit per test: 2 seconds
memory limit per test: 256 megabytes

Recently, you found a bot to play "Rock paper scissors" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string \(s=s_1s_2…s_n\) of length \(n\) where each letter is either \(R, S\) or \(P\).

While initializing, the bot is choosing a starting index \(pos\) \((1≤pos≤n)\), and then it can play any number of rounds. In the first round, he chooses "Rock", "Scissors" or "Paper" based on the value of \(s_{pos}\):
\(\bull\) if \(s_{pos}\) is equal to \(R\) the bot chooses "Rock";
\(\bull\) if \(s_{pos}\) is equal to \(S\) the bot chooses "Scissors";
\(\bull\) if \(s_{pos}\) is equal to \(P\) the bot chooses "Paper";
In the second round, the bot's choice is based on the value of \(s_{pos+1}\). In the third round — on \(s_{pos+2}\) and so on. After \(s_n\) the bot returns to \(s_1\) and continues his game.

You plan to play \(n\) rounds and you've already figured out the string \(s\) but still don't know what is the starting index \(pos\). But since the bot's tactic is so boring, you've decided to find \(n\) choices to each round to maximize the average number of wins.

In other words, let's suggest your choices are \(c_1c_2…c_n\) and if the bot starts from index \(pos\) then you'll win in \(win(pos)\) rounds. Find \(c_1c_2…c_n\) such that \(\dfrac{win(1)+win(2)+⋯+win(n)}{n}\) is maximum possible.

<b>Input</b>
The first line contains a single integer \(t (1≤t≤1000)\) — the number of test cases.

Next \(t\) lines contain test cases — one per line. The first and only line of each test case contains string \(s=s_1s_2…s_n\) \((1≤n≤2⋅10^5; s_i∈{R,S,P})\) — the string of the bot.

It's guaranteed that the total length of all strings in one test doesn't exceed \(2⋅10^5\).

<b>Output</b>
For each test case, print \(n\) choices \(c_1c_2…c_n\) to maximize the average number of wins. Print them in the same manner as the string \(s\).

If there are multiple optimal answers, print any of them.

<b>Note</b>
In the first test case, the bot (wherever it starts) will always choose "Rock", so we can always choose "Paper". So, in any case, we will win all \(n=4\) rounds, so the average is also equal to \(4\).

In the second test case:
\(\bull\) if bot will start from \(pos=1\), then \((s_1,c_1)\) is draw, \((s_2,c_2)\) is draw and \((s_3,c_3)\) is draw, so \(win(1)=0\);
\(\bull\) if bot will start from \(pos=2\), then \((s_2,c_1)\) is win, \((s_3,c_2)\) is win and \((s_1,c_3)\) is win, so \(win(2)=3\);
\(\bull\) if bot will start from \(pos=3\), then \((s_3,c_1)\) is lose, \((s_1,c_2)\) is lose and \((s_2,c_3)\) is lose, so \(win(3)=0\);
The average is equal to \(\frac{0+3+0}{3}=1\) and it can be proven that it's the maximum possible average.A picture from Wikipedia explaining "Rock paper scissors" game:

<img 1>




The naive solution would be to check for every possible string the and find the value of \(\dfrac{\sum_{x=1}^{n}win(x)}{n}\). After founing the maximal one, we output the string that results in that maximal value. Time complexity is \(O(3^n\cdot n^2)\) which is not efficient enough.




For the faster algorihtm, we will be using the fact that during our games, for each choice \(c_i\) that we are making, we will be playing against every bot choice \(s_j\). So for each one of choices \(R,S,P\) there is a fixed amount of wins that we will get. So it is efficient to be using only one type of choices.

So our solution is to count the number of every bot choice occurences in \(s\) and construct the string made out of same characters designed to counter the most frequent choice of the bot.




#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main() {
    int t;
    cin >> t;
    while (t--) {
        string s;
        cin >> s;
        int r = 0, p = 0, sc = 0;
        for (int i = 0; i < s.size(); i++) {
            switch (s[i]) {
                case 'R':
                    r++;
                    break;
                case 'S':
                    sc++;
                    break;
                case 'P':
                    p++;
                    break;
            }
        }
        if (r >= p && r >= sc) {
            for (int i = 0; i < s.size(); i++)
                cout << "P";
        } else if (p >= r && p >= sc) {
            for (int i = 0; i < s.size(); i++)
                cout << "S";
        } else {
            for (int i = 0; i < s.size(); i++)
                cout << "R";
        }
        cout << endl;
    }
    return 0;
}




Even though our answer is not the same as the one in the example, it is still valid becase:
For the first test case our answer has average \(win(x)\) equal to \(4\).
For the second test case our answer has average \(win(x)\) equal to \(1\).
For the third test case our answer has average \(win(x)\) equal to \(1\).




For the custom test we will be using a corner case where there are \(2\) choices of which character we can use.

<b>Input</b>:
1
PS

<b>Expected output</b>:
We are expecting either RR or SS, because then we wil be winning in average \(1\) time.





1
PS